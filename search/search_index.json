{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SeAT documentation pages! This documentation site hopes to provide you with useful information about SeAT. Please refer to the index on the side for detailed installation instructions, documentation about SeAT internals and or development guidelines! contributing to documentation Great software is coupled with even greater documentation. If you would like to contribute to making this documentation even better, please don't hesitate to fork the documentation repository and submit a pull request with your contribution. quickstart SeAT comes with a handy command that can perform installations, upgrades and generic diagnostics of your environment for you. To get up and running the fastest, you should download this tool and run the seat install:production command. For more information, please refer to the getting started guide. upgrades New features, performance improvements and bug fixes are continuously being made to SeAT. The seat command provides an easy way to ensure that you are always up to date with the latest improvements. For details on how to stay up to date, please refer to the general upgrades guide. contact Want to get in touch with developers, or just other users of SeAT? Refer to the contact details page to find out how!","title":"Home"},{"location":"#contributing-to-documentation","text":"Great software is coupled with even greater documentation. If you would like to contribute to making this documentation even better, please don't hesitate to fork the documentation repository and submit a pull request with your contribution.","title":"contributing to documentation"},{"location":"#quickstart","text":"SeAT comes with a handy command that can perform installations, upgrades and generic diagnostics of your environment for you. To get up and running the fastest, you should download this tool and run the seat install:production command. For more information, please refer to the getting started guide.","title":"quickstart"},{"location":"#upgrades","text":"New features, performance improvements and bug fixes are continuously being made to SeAT. The seat command provides an easy way to ensure that you are always up to date with the latest improvements. For details on how to stay up to date, please refer to the general upgrades guide.","title":"upgrades"},{"location":"#contact","text":"Want to get in touch with developers, or just other users of SeAT? Refer to the contact details page to find out how!","title":"contact"},{"location":"community_packages/","text":"Below is a list of packages contributed by the community. These packages normally follow the same installation procedure, however, its best you consult the documentation of the package itself in case there is anything special you need to get it working. generic package installation Packages will normally come in the form of a composer package that you need to include in your SeAT install, as well as a Service Provider that you need to bootstrap. So, generically speaking, installing a package will mean that you: Require the package via composer: composer require <package vendor>/<package-name> Bootstrap the packages service provider here . Installing packages like this will ensure that none of the core SeAT packages are affected and you should be free to upgrade SeAT core at anytime. package list SeAT specific packages freedenizen/eveseat-notes a notes addon for seat 1.x warlof/slackbot a slack bot that handles invites and kicks based on an api key addon for seat 1.x and 2.x warlof/seat-slack-sso a slack SSO integration for seat 2.x eve-scout/eveseat-oauth2-server This EVE SeAT package enables an OAuth2 server for Single sign-on. other SeAT related packages Betriebsrat/err-seat Seat Api Interface for errbot eve-scout/passport-eveseat Passport strategy for authenticating with EVE SeAT using the OAuth 2.0 API. eve-scout/nodebb-plugin-sso-eveseat This NodeBB plugin allows users login/register via their EVE SeAT account.","title":"Community Packages"},{"location":"community_packages/#generic-package-installation","text":"Packages will normally come in the form of a composer package that you need to include in your SeAT install, as well as a Service Provider that you need to bootstrap. So, generically speaking, installing a package will mean that you: Require the package via composer: composer require <package vendor>/<package-name> Bootstrap the packages service provider here . Installing packages like this will ensure that none of the core SeAT packages are affected and you should be free to upgrade SeAT core at anytime.","title":"generic package installation"},{"location":"community_packages/#package-list","text":"","title":"package list"},{"location":"community_packages/#seat-specific-packages","text":"freedenizen/eveseat-notes a notes addon for seat 1.x warlof/slackbot a slack bot that handles invites and kicks based on an api key addon for seat 1.x and 2.x warlof/seat-slack-sso a slack SSO integration for seat 2.x eve-scout/eveseat-oauth2-server This EVE SeAT package enables an OAuth2 server for Single sign-on.","title":"SeAT specific packages"},{"location":"community_packages/#other-seat-related-packages","text":"Betriebsrat/err-seat Seat Api Interface for errbot eve-scout/passport-eveseat Passport strategy for authenticating with EVE SeAT using the OAuth 2.0 API. eve-scout/nodebb-plugin-sso-eveseat This NodeBB plugin allows users login/register via their EVE SeAT account.","title":"other SeAT related packages"},{"location":"contact/","text":"Need help? Use these channels to get support! Slack We are on the eve-seat slack team. It seems like most of the activity happens here, and has a really nice github bot too :) Get invites here IRC The #eveseat channel on irc.coldfront.net is where its at. If you just want to come say hi, you can use the link below to quick join. EVE Online Forum Thread Track the conversation on the eveonline forums here: https://forums.eveonline.com/default.aspx?g=posts&t=460658&find=unread","title":"Contact"},{"location":"contact/#slack","text":"We are on the eve-seat slack team. It seems like most of the activity happens here, and has a really nice github bot too :) Get invites here","title":"Slack"},{"location":"contact/#irc","text":"The #eveseat channel on irc.coldfront.net is where its at. If you just want to come say hi, you can use the link below to quick join.","title":"IRC"},{"location":"contact/#eve-online-forum-thread","text":"Track the conversation on the eveonline forums here: https://forums.eveonline.com/default.aspx?g=posts&t=460658&find=unread","title":"EVE Online Forum Thread"},{"location":"reporting_bugs/","text":"So, the inevitable happened. Something broke! Its ok. The first thing to do is to relax, and prepare some info for a bug report. the more info, the better In order to best understand the bug, we need as much info as possible about your environment. For that, you can run the following command (from your SeAT directory), and copy / paste the output as part of your bug report: php artisan seat:admin:diagnose log files Log files are a fantastic resource. Check out the laravel log for any Exception type errors, and add them to your bug report. The log file is located (relative to where you installed SeAT) at: storage/logs/laravel.log screenshots and debug mode Screenshots may also help, so don't be shy to take some and attach them to your bug report! If you flip your installation into debug mode then it may be possible to capture the error that is occurring via a screenshot. To flip to debug mode, open your applications .env file, and set DEBUG=false to DEBUG=true . See: https://github.com/eveseat/seat/blob/master/.env.example#L2 report the bug Finally, to report the bug, head over to https://github.com/eveseat/seat/issues and click on New Issue .","title":"Reporting Bugs"},{"location":"reporting_bugs/#the-more-info-the-better","text":"In order to best understand the bug, we need as much info as possible about your environment. For that, you can run the following command (from your SeAT directory), and copy / paste the output as part of your bug report: php artisan seat:admin:diagnose","title":"the more info, the better"},{"location":"reporting_bugs/#log-files","text":"Log files are a fantastic resource. Check out the laravel log for any Exception type errors, and add them to your bug report. The log file is located (relative to where you installed SeAT) at: storage/logs/laravel.log","title":"log files"},{"location":"reporting_bugs/#screenshots-and-debug-mode","text":"Screenshots may also help, so don't be shy to take some and attach them to your bug report! If you flip your installation into debug mode then it may be possible to capture the error that is occurring via a screenshot. To flip to debug mode, open your applications .env file, and set DEBUG=false to DEBUG=true . See: https://github.com/eveseat/seat/blob/master/.env.example#L2","title":"screenshots and debug mode"},{"location":"reporting_bugs/#report-the-bug","text":"Finally, to report the bug, head over to https://github.com/eveseat/seat/issues and click on New Issue .","title":"report the bug"},{"location":"todo/","text":"The SeAT TODO list! This list is supposed to give a very brief idea of whats coming\u2122 . It is the stuff that should be developed; should be improved; should be fixed etc. All items in this list is very high level and should be interpreted from a long term perspective. Of course, there are also the Github tickets tagged as wishlist items: https://github.com/eveseat/seat/labels/wishlist . the list ~~Table sorting, filtering etc.~~ Wallet Ledger with reporting capabilities. Export to CSV / Excel ability for datasets RBAC Wiki Documentation ~~RBAC roles additions for; all characters; all corporations~~ ~~RBAC roles exclusions for; NOT character_id ; NOT corporation_id ~~ Integration: Teamspeak3 Integration: Mumble Integration: Openfire Integration: PHPBB Integration: SMF Character public views if key does not exist. Read package schedules from a config file and seed them using the ScheduleSeeder ~~Implement the Search functionality~~ wishlist Many features are requested via the github issues page. This list is a collection of those feature requests. They are 'wishlist' items as the feeling is they need to be solved via a SeAT package the wishlist Recruitment Page ref SRP ref NodeBB Integration ref ~~Starbase Siphon Detection ref ~~ Starbase Timer Board ref","title":"TODO List"},{"location":"todo/#the-seat-todo-list","text":"This list is supposed to give a very brief idea of whats coming\u2122 . It is the stuff that should be developed; should be improved; should be fixed etc. All items in this list is very high level and should be interpreted from a long term perspective. Of course, there are also the Github tickets tagged as wishlist items: https://github.com/eveseat/seat/labels/wishlist .","title":"The SeAT TODO list!"},{"location":"todo/#the-list","text":"~~Table sorting, filtering etc.~~ Wallet Ledger with reporting capabilities. Export to CSV / Excel ability for datasets RBAC Wiki Documentation ~~RBAC roles additions for; all characters; all corporations~~ ~~RBAC roles exclusions for; NOT character_id ; NOT corporation_id ~~ Integration: Teamspeak3 Integration: Mumble Integration: Openfire Integration: PHPBB Integration: SMF Character public views if key does not exist. Read package schedules from a config file and seed them using the ScheduleSeeder ~~Implement the Search functionality~~","title":"the list"},{"location":"todo/#wishlist","text":"Many features are requested via the github issues page. This list is a collection of those feature requests. They are 'wishlist' items as the feeling is they need to be solved via a SeAT package","title":"wishlist"},{"location":"todo/#the-wishlist","text":"Recruitment Page ref SRP ref NodeBB Integration ref ~~Starbase Siphon Detection ref ~~ Starbase Timer Board ref","title":"the wishlist"},{"location":"admin_guides/eveapi_admin_contact/","text":"what Requests to the EVE API need to have an administrative contact email set before SeAT will queue jobs to process. CCP made the request in this Github issue. To address this, the email address is added to the User-Agent string that is used when making EVE API requests as can be seen here . why The error Failed to queue due to default config is generated by this check. In order for this check to pass, you need to configure the administrative email address in the SeAT configuration. how Adding the email address can be done in two ways. Wither via the command line or via the Web interface. command line The command php artisan seat:admin:email will prompt you to add a valid email address for the administrative contact: Example: web interface The other method to change the admin email is via the web interface. You need to be logged in with a user that has the superuser role. Typically, if the email address is not set, you may notice the following warning on the home page: To configure it, browse to Configuration -> SeAT Settings from the side menu, and set the email in the Administrator Email field.","title":"EVE Api Administrative Contact"},{"location":"admin_guides/eveapi_admin_contact/#what","text":"Requests to the EVE API need to have an administrative contact email set before SeAT will queue jobs to process. CCP made the request in this Github issue. To address this, the email address is added to the User-Agent string that is used when making EVE API requests as can be seen here .","title":"what"},{"location":"admin_guides/eveapi_admin_contact/#why","text":"The error Failed to queue due to default config is generated by this check. In order for this check to pass, you need to configure the administrative email address in the SeAT configuration.","title":"why"},{"location":"admin_guides/eveapi_admin_contact/#how","text":"Adding the email address can be done in two ways. Wither via the command line or via the Web interface.","title":"how"},{"location":"admin_guides/eveapi_admin_contact/#command-line","text":"The command php artisan seat:admin:email will prompt you to add a valid email address for the administrative contact: Example:","title":"command line"},{"location":"admin_guides/eveapi_admin_contact/#web-interface","text":"The other method to change the admin email is via the web interface. You need to be logged in with a user that has the superuser role. Typically, if the email address is not set, you may notice the following warning on the home page: To configure it, browse to Configuration -> SeAT Settings from the side menu, and set the email in the Administrator Email field.","title":"web interface"},{"location":"admin_guides/rbac/","text":"introduction SeAT supports configuring user access control by means of Role-based Access Control . This allows for SeAT administrators to granularly control who has access to what based on which roles a SeAT user has. definitions This section aims to clear up the definitions used in the SeAT RBAC (Role-based Access Control) implementation. User A SeAT user account. This can be either a user account that was created in SeAT itself, or an automatically created account based on SSO. The only difference between the accounts is that with an SSO account, SeAT has no idea what the accounts password is. Otherwise, everything else is exactly the same. Permission A Permission is an attribute that is assigned to a Role . It grants access based on the specific permission. Role A Role is simply a collection of permissions. Users get assigned a roles and inherit the permissions granted by that role. A user can not be given a raw permission. Permissions can only be granted my creating a Role, assigning permissions to the Role and granting the role to a user. Affiliation Affiliations allow administrators to set permissions bound to a specific entity. When configuring a role, permissions are granted to the role. When the an affiliation is set, the role effectively gives the permissions to the specified entities in the affiliation list. Not all roles are affected by affiliations. By default, only Corporation and Character roles are affected by affiliations. Entity An entity is either a Character or a Corporation identified by its unique ID. Examples corporation accountant Lets assume you wanted to create a role for a corporation accountant. To acheive this, you would do the following: Create a new role. Name it something like Corporation Accountant . Edit the new role, and grant it the Corporation.ledger , Corporation.walletJournal , Corporation.transactions and Corporation.summary (to view the sheet) permissions. Next, affiliate the role with the corporation(s) for whom this role should act as an accountant. Optionally, assign some users to the role. You can assign users at a later stage too. Your configured role from the above example may now look as follows: Permissions The next list is a short definition of what the currently available permissions are and which sections of SeAT they grant access to. For the latest list of available permissions, please refer to the definitions file in the eveseat/web package here . Affiliation column shows if the permissions considers affiliations. Dangerous column shows if the permission could be harmful if granted to the wrong user. Global Permissions Permission Affiliation Dangerous Description superuser No Yes Grants administrative access to SeAT. This is a dangerous role to have! queue_manager No Yes Grants access to the SeAT Queue Interface with the ability to manage the queue too API Key Permissions Permission Affiliation Dangerous Description apikey.delete Yes No Grants the ability to delete API Keys. apikey.detail Yes Yes Grants the ability to view API Key details. This includes the keys vCode. apikey.toggle_status Yes No Allows for an API Key to be re-enabled if disabled. apikey.list No Yes Allows the listing of API Keys in SeAT. apikey.update Yes No Allows for an API Key to be updated. Character Permissions Permission Affiliation Dangerous Description character.assets Yes No Grants the ability to view Character Assets. character.bookmarks Yes No Grants the ability to view Character Bookmarks. character.calendar Yes No Grants the ability to view Character Calendar. character.channels Yes No Grants the ability to view Character Channels. character.contacts Yes No Grants the ability to view Character Contacts. character.contracts Yes No Grants the ability to view Character Contracts. character.industry Yes No Grants the ability to view Character Industry. character.killmails Yes No Grants the ability to view Character Killmails. character.list No Yes Grants the ability to list characters in SeAT. character.mail Yes No Grants the ability to view Character Mail. character.market_orders Yes No Grants the ability to view Character Market Orders. character.notifications Yes No Grants the ability to view Character Notifications. character.pi Yes No Grants the ability to view Character Planetary Interaction. character.research_agents Yes No Grants the ability to view Character Research Agents. character.skills Yes No Grants the ability to view Character Skills. character.standings Yes No Grants the ability to view Character Standings. character.sheet Yes No Grants the ability to view Character Sheet. NOTE: This is also the default view when selecting a character from the character list. It is recommended you grant this role in addition with any other character role. character.wallet_journal Yes No Grants the ability to view Character Wallet Journal. character.wallet_transactions Yes No Grants the ability to view Character Wallet Transactions. Corporation Permissions Permission Affiliation Dangerous Description corporation.assets Yes No Grants the ability to view Corporation Assets. corporation.bookmarks Yes No Grants the ability to view Corporation Bookmarks. corporation.contracts Yes No Grants the ability to view Corporation Contracts. corporation.industry Yes No Grants the ability to view Corporation Industry. corporation.killmails Yes No Grants the ability to view Corporation Killmails. corporation.ledger Yes No Grants the ability to view Corporation Ledger. corporation.list_all Yes Yes Grants the ability to list corporations in SeAT. corporation.market Yes No Grants the ability to view Corporation Market Orders. corporation.security Yes No Grants the ability to view Corporation Security Logs. corporation.standings Yes No Grants the ability to view Corporation Standings. corporation.tracking Yes No Grants the ability to view Corporation Member Tracking. corporation.pocos Yes No Grants the ability to view Corporation POCOs. corporation.starbases Yes No Grants the ability to view Corporation Starbases. corporation.summary Yes No Grants the ability to view Corporation Summary. NOTE: This is also the default view when selecting a corporation from the corporation list. It is recommended you grant this role in addition to any other corporation role. corporation.wallet_journal Yes No Grants the ability to view Corporation Wallet Journal. corporation.transactions Yes No Grants the ability to view Corporation Wallet Transactions.","title":"Role Based Access Control"},{"location":"admin_guides/rbac/#introduction","text":"SeAT supports configuring user access control by means of Role-based Access Control . This allows for SeAT administrators to granularly control who has access to what based on which roles a SeAT user has.","title":"introduction"},{"location":"admin_guides/rbac/#definitions","text":"This section aims to clear up the definitions used in the SeAT RBAC (Role-based Access Control) implementation. User A SeAT user account. This can be either a user account that was created in SeAT itself, or an automatically created account based on SSO. The only difference between the accounts is that with an SSO account, SeAT has no idea what the accounts password is. Otherwise, everything else is exactly the same. Permission A Permission is an attribute that is assigned to a Role . It grants access based on the specific permission. Role A Role is simply a collection of permissions. Users get assigned a roles and inherit the permissions granted by that role. A user can not be given a raw permission. Permissions can only be granted my creating a Role, assigning permissions to the Role and granting the role to a user. Affiliation Affiliations allow administrators to set permissions bound to a specific entity. When configuring a role, permissions are granted to the role. When the an affiliation is set, the role effectively gives the permissions to the specified entities in the affiliation list. Not all roles are affected by affiliations. By default, only Corporation and Character roles are affected by affiliations. Entity An entity is either a Character or a Corporation identified by its unique ID.","title":"definitions"},{"location":"admin_guides/rbac/#examples","text":"","title":"Examples"},{"location":"admin_guides/rbac/#corporation-accountant","text":"Lets assume you wanted to create a role for a corporation accountant. To acheive this, you would do the following: Create a new role. Name it something like Corporation Accountant . Edit the new role, and grant it the Corporation.ledger , Corporation.walletJournal , Corporation.transactions and Corporation.summary (to view the sheet) permissions. Next, affiliate the role with the corporation(s) for whom this role should act as an accountant. Optionally, assign some users to the role. You can assign users at a later stage too. Your configured role from the above example may now look as follows:","title":"corporation accountant"},{"location":"admin_guides/rbac/#permissions","text":"The next list is a short definition of what the currently available permissions are and which sections of SeAT they grant access to. For the latest list of available permissions, please refer to the definitions file in the eveseat/web package here . Affiliation column shows if the permissions considers affiliations. Dangerous column shows if the permission could be harmful if granted to the wrong user.","title":"Permissions"},{"location":"admin_guides/rbac/#global-permissions","text":"Permission Affiliation Dangerous Description superuser No Yes Grants administrative access to SeAT. This is a dangerous role to have! queue_manager No Yes Grants access to the SeAT Queue Interface with the ability to manage the queue too","title":"Global Permissions"},{"location":"admin_guides/rbac/#api-key-permissions","text":"Permission Affiliation Dangerous Description apikey.delete Yes No Grants the ability to delete API Keys. apikey.detail Yes Yes Grants the ability to view API Key details. This includes the keys vCode. apikey.toggle_status Yes No Allows for an API Key to be re-enabled if disabled. apikey.list No Yes Allows the listing of API Keys in SeAT. apikey.update Yes No Allows for an API Key to be updated.","title":"API Key Permissions"},{"location":"admin_guides/rbac/#character-permissions","text":"Permission Affiliation Dangerous Description character.assets Yes No Grants the ability to view Character Assets. character.bookmarks Yes No Grants the ability to view Character Bookmarks. character.calendar Yes No Grants the ability to view Character Calendar. character.channels Yes No Grants the ability to view Character Channels. character.contacts Yes No Grants the ability to view Character Contacts. character.contracts Yes No Grants the ability to view Character Contracts. character.industry Yes No Grants the ability to view Character Industry. character.killmails Yes No Grants the ability to view Character Killmails. character.list No Yes Grants the ability to list characters in SeAT. character.mail Yes No Grants the ability to view Character Mail. character.market_orders Yes No Grants the ability to view Character Market Orders. character.notifications Yes No Grants the ability to view Character Notifications. character.pi Yes No Grants the ability to view Character Planetary Interaction. character.research_agents Yes No Grants the ability to view Character Research Agents. character.skills Yes No Grants the ability to view Character Skills. character.standings Yes No Grants the ability to view Character Standings. character.sheet Yes No Grants the ability to view Character Sheet. NOTE: This is also the default view when selecting a character from the character list. It is recommended you grant this role in addition with any other character role. character.wallet_journal Yes No Grants the ability to view Character Wallet Journal. character.wallet_transactions Yes No Grants the ability to view Character Wallet Transactions.","title":"Character Permissions"},{"location":"admin_guides/rbac/#corporation-permissions","text":"Permission Affiliation Dangerous Description corporation.assets Yes No Grants the ability to view Corporation Assets. corporation.bookmarks Yes No Grants the ability to view Corporation Bookmarks. corporation.contracts Yes No Grants the ability to view Corporation Contracts. corporation.industry Yes No Grants the ability to view Corporation Industry. corporation.killmails Yes No Grants the ability to view Corporation Killmails. corporation.ledger Yes No Grants the ability to view Corporation Ledger. corporation.list_all Yes Yes Grants the ability to list corporations in SeAT. corporation.market Yes No Grants the ability to view Corporation Market Orders. corporation.security Yes No Grants the ability to view Corporation Security Logs. corporation.standings Yes No Grants the ability to view Corporation Standings. corporation.tracking Yes No Grants the ability to view Corporation Member Tracking. corporation.pocos Yes No Grants the ability to view Corporation POCOs. corporation.starbases Yes No Grants the ability to view Corporation Starbases. corporation.summary Yes No Grants the ability to view Corporation Summary. NOTE: This is also the default view when selecting a corporation from the corporation list. It is recommended you grant this role in addition to any other corporation role. corporation.wallet_journal Yes No Grants the ability to view Corporation Wallet Journal. corporation.transactions Yes No Grants the ability to view Corporation Wallet Transactions.","title":"Corporation Permissions"},{"location":"admin_guides/scaling_seat/","text":"At some stage, you may come to a point where a single install of SeAT might not be enough to process api key updates. Thankfully, it is actually very easy to scale SeAT horizontally in order to improve performance. This document aims to share some need to knows before embarking on a tiered installation of SeAT. definitions Lets get some definitions cleared up. server A server is defined as any VPS, hardware, docker container, or other form of virtualization. When talking performance though, keep in mind that there will probably be very little performance gains when everything runs on the same physical hardware instance. seat component A SeAT Component is a collection of SeAT packages and configurations that is responsible for performing a specific task. Tasks include the SeAT Web Interface, the job workers or dispatchers. components Before we can talk scale, we need to understand which components SeAT actually consists of. We will not talk about the immutable resources here as they will be mentioned in the next section. So, which components are there to SeAT? The web front end. The queue workers. The job dispatcher. Each of these components can live on their own server and must share the same immutable resources . immutable resources While almost every component in SeAT can 'run on its own', there are some services that SeAT consumes that SeAT can not scale itself. Instead, SeAT can consume a clustered or load balanced instance of these services. There are various reasons for this where the most important is that state is maintained between queue workers using Redis and MySQL. Services that should be shared between all SeAT components are: The Redis cache. The MySQL database. When mentioning these components, they can definitely exist in their clustered/load balanced forms. For Redis, have a look at their Redis cluster tutorial and for MySQL, you can have a look at their MySQL cluster installation documentation, or maybe resort to just setting up plain master-master replication . simple scaled setup The following example setup is probably the most simple option to gain performance improvements by scaling out. The gist of it is that we simply add more queue worker components to the SeAT setup. Lets start by taking a look at a diagram, showing the extra queue worker component added. Installing a new server with only the queue worker component setup can bring a significant speed boost into the environment. A new queue worker could be configured to run an extra 4-6 jobs. This queue worker must be configured to make use of the immutable resources . more complicated scaled setup Of course, one can totally go full nelson and explode all of the components in use. Below is an example deployment (with data flow links, red for redis, blue for mysql) that shows how each SeAT component can live on its own server. component setups Lets talk about component configurations quickly. Apart from the immutable resources , all of the software needed can be sourced from SeAT packages. All of the standard requirements such as PHP7 and Supervisor 3 also apply. However, not all components would need a web server for example. Below are the descriptions (and short requirements list) for the different SeAT components. web front end To setup a web front end component, use the following steps: Ensure you have at least PHP7 installed. Ensure that you have a web server installed that can serve the public/ directory from the SeAT project. Ensure that you have composer installed and available in PATH . Download SeAT somewhere like /var/www/seat using composer create-project eveseat/seat /var/www/seat --no-dev . Once installed, configure the .env files database and Redis settings to connect to your immutable sources . queue worker To setup a queue worker component, use the following steps: Ensure you have at least PHP7 installed. Ensure that you have supervisor3 installed. Ensure that you have composer installed and available in PATH . Download SeAT somewhere using composer create-project eveseat/seat --no-dev . Once installed, configure the .env files database and Redis settings to connect to your immutable sources . Configure the workers in a seat.ini file for supervisor to start. job dispatcher To setup a job dispatcher component, use the following steps: Ensure you have at least PHP7 installed. Ensure that you have composer installed and available in PATH . Download SeAT somewhere like /var/www/seat using composer create-project eveseat/seat /var/www/seat --no-dev . Once installed, configure the .env files database and Redis settings to connect to your immutable sources . Setup the cronjob to run php artisan schedule:run 1>> /dev/null 2>&1 every minute.","title":"Scaled SeAT Deployments"},{"location":"admin_guides/scaling_seat/#definitions","text":"Lets get some definitions cleared up.","title":"definitions"},{"location":"admin_guides/scaling_seat/#server","text":"A server is defined as any VPS, hardware, docker container, or other form of virtualization. When talking performance though, keep in mind that there will probably be very little performance gains when everything runs on the same physical hardware instance.","title":"server"},{"location":"admin_guides/scaling_seat/#seat-component","text":"A SeAT Component is a collection of SeAT packages and configurations that is responsible for performing a specific task. Tasks include the SeAT Web Interface, the job workers or dispatchers.","title":"seat component"},{"location":"admin_guides/scaling_seat/#components","text":"Before we can talk scale, we need to understand which components SeAT actually consists of. We will not talk about the immutable resources here as they will be mentioned in the next section. So, which components are there to SeAT? The web front end. The queue workers. The job dispatcher. Each of these components can live on their own server and must share the same immutable resources .","title":"components"},{"location":"admin_guides/scaling_seat/#immutable-resources","text":"While almost every component in SeAT can 'run on its own', there are some services that SeAT consumes that SeAT can not scale itself. Instead, SeAT can consume a clustered or load balanced instance of these services. There are various reasons for this where the most important is that state is maintained between queue workers using Redis and MySQL. Services that should be shared between all SeAT components are: The Redis cache. The MySQL database. When mentioning these components, they can definitely exist in their clustered/load balanced forms. For Redis, have a look at their Redis cluster tutorial and for MySQL, you can have a look at their MySQL cluster installation documentation, or maybe resort to just setting up plain master-master replication .","title":"immutable resources"},{"location":"admin_guides/scaling_seat/#simple-scaled-setup","text":"The following example setup is probably the most simple option to gain performance improvements by scaling out. The gist of it is that we simply add more queue worker components to the SeAT setup. Lets start by taking a look at a diagram, showing the extra queue worker component added. Installing a new server with only the queue worker component setup can bring a significant speed boost into the environment. A new queue worker could be configured to run an extra 4-6 jobs. This queue worker must be configured to make use of the immutable resources .","title":"simple scaled setup"},{"location":"admin_guides/scaling_seat/#more-complicated-scaled-setup","text":"Of course, one can totally go full nelson and explode all of the components in use. Below is an example deployment (with data flow links, red for redis, blue for mysql) that shows how each SeAT component can live on its own server.","title":"more complicated scaled setup"},{"location":"admin_guides/scaling_seat/#component-setups","text":"Lets talk about component configurations quickly. Apart from the immutable resources , all of the software needed can be sourced from SeAT packages. All of the standard requirements such as PHP7 and Supervisor 3 also apply. However, not all components would need a web server for example. Below are the descriptions (and short requirements list) for the different SeAT components.","title":"component setups"},{"location":"admin_guides/scaling_seat/#web-front-end","text":"To setup a web front end component, use the following steps: Ensure you have at least PHP7 installed. Ensure that you have a web server installed that can serve the public/ directory from the SeAT project. Ensure that you have composer installed and available in PATH . Download SeAT somewhere like /var/www/seat using composer create-project eveseat/seat /var/www/seat --no-dev . Once installed, configure the .env files database and Redis settings to connect to your immutable sources .","title":"web front end"},{"location":"admin_guides/scaling_seat/#queue-worker","text":"To setup a queue worker component, use the following steps: Ensure you have at least PHP7 installed. Ensure that you have supervisor3 installed. Ensure that you have composer installed and available in PATH . Download SeAT somewhere using composer create-project eveseat/seat --no-dev . Once installed, configure the .env files database and Redis settings to connect to your immutable sources . Configure the workers in a seat.ini file for supervisor to start.","title":"queue worker"},{"location":"admin_guides/scaling_seat/#job-dispatcher","text":"To setup a job dispatcher component, use the following steps: Ensure you have at least PHP7 installed. Ensure that you have composer installed and available in PATH . Download SeAT somewhere like /var/www/seat using composer create-project eveseat/seat /var/www/seat --no-dev . Once installed, configure the .env files database and Redis settings to connect to your immutable sources . Setup the cronjob to run php artisan schedule:run 1>> /dev/null 2>&1 every minute.","title":"job dispatcher"},{"location":"admin_guides/seat_supervisor/","text":"introduction SeAT is able to query a supervisor instance for worker statuses and other information. This information can then be displayed in the Queue Status screen. requirements Supervisor monitoring needs Supervisor version 3.0 or later. Check your supervisor version with supervisord -v . If you are running CentOS 6, please refer to the updating supervisor on centos 6 section below before continuing. the config A bit of setup work is needed in order to have your SeAT setup query a supervisor instance. The basic idea to get this working is: Add a [inet_http_server] configuration block to your supervisor.conf file and restart supervisor. Add the username, password, ip and port of the supervisor instance to your SeAT .env configuration file. 1. add supervisor configuration block. On your server where supervisor is running, open the configuration file /etc/supervisor/supervisord.conf in your favorite text editor. Add the following configuration block to your configuration file: [inet_http_server] port=127.0.0.1:9001 username=seat password=your_secure_password Obviously, substitute the values with those that correspond with your environment. For most setups, the values in the example should be just fine. Finally, restart supervisor itself. 2. configure SeAT with the new values. SeAT itself also needs some configurations added in order for it to know where the supervisor instance is, as well as what password to use when querying for status information. Again, on your server, find your SeAT installations .env file (usually located at /var/www/seat/.env ) and add the following configuration block: SUPERVISOR_RPC_ADDRESS=127.0.0.1 SUPERVISOR_RPC_USERNAME=seat SUPERVISOR_RPC_PASSWORD=hd@rjf&@921aJlw0 SUPERVISOR_RPC_PORT=9001 SUPERVISOR_GROUP=seat The defaults here should also be sufficient but feel free to adjust as needed. updating supervisor on centos 6 CentOS 6 ships with supervisor 2x by default. In order to get the supervisor monitoring to work, the following steps may be followed to upgrade your supervisor version. Install the GhettoForge repository. This can be done with: # Download and install the latest release GF=gf-release-6-10.gf.el6.noarch.rpm && curl -O http://mirror.symnds.com/distributions/gf/el/6/gf/x86_64/$GF && yum localinstall -y $GF && rm -f $GF # Import the GhettoForge signing keys rpm --import http://mirror.symnds.com/distributions/gf/RPM-GPG-KEY-gf.el6 # Enable the repository yum install yum-utils -y yum-config-manager --enable gf-plus Next, install Supervisor by running yum install supervisor -y This will update your local installation to version 3x. Your old configuration will be saved in /etc/supervisord.conf.rpmsave . Supervisor 3 allows you to specify a numprocs setting in a command block instead of having to define multiple instances like you had to do with v2.x. You will need to create a file called seat.ini in /etc/supervisord.d/ . This file should look something like this: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=604800 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=6 directory=/var/www/seat stopwaitsecs=600 user=apache Restart supervisor with /etc/init.d/supervisord restart and check that your workers are running again with supervisorctl status . troubleshooting In case something goes wrong, you have a few debugging options. Obviously, first ensure that supervisor itself is running. If the http interface is started on a remote server, ensure that no firewall is blocking TCP traffic to the destination server. If you just added the inet_http_server configuration block, restart supervisor and then check back on the web interface. Attempt to debug the connection using the tinker example below. Hop onto Slack (details in the contact page) for help. troubleshooting - tinker console Another option you have to try and figure out why your supervisor integration might not be working would be to attempt to mimic the calls SeAT makes to supervisor and looking for errors. Don't worry, this is easier than it looks! First, drop into a tinker shell by running php artisan tinker . This will drop you into a fully booted instance of SeAT: Next, copy and paste the following instantiation code into the console. This will initialize the object needed to connect to the supervisor inet_http_server using the configuration in your .env config file: $supervisor = new Supervisor\\Supervisor(config('web.supervisor.name'), config('web.supervisor.rpc.address'), config('web.supervisor.rpc.username'), config('web.supervisor.rpc.password'), (int) config('web.supervisor.rpc.port')); Pasting that should result in output similar to the below screenshot: Finally, attempt to get the current running processes by running the following code: $supervisor->getProcesses(); As you can see in my example below, the object is unable to connect to the supervisor inet_http_server. This could indicate a number of things and should hopefully help with troubleshooting any errors that may occur.","title":"SeAT & Supervisor Integration"},{"location":"admin_guides/seat_supervisor/#introduction","text":"SeAT is able to query a supervisor instance for worker statuses and other information. This information can then be displayed in the Queue Status screen.","title":"introduction"},{"location":"admin_guides/seat_supervisor/#requirements","text":"Supervisor monitoring needs Supervisor version 3.0 or later. Check your supervisor version with supervisord -v . If you are running CentOS 6, please refer to the updating supervisor on centos 6 section below before continuing.","title":"requirements"},{"location":"admin_guides/seat_supervisor/#the-config","text":"A bit of setup work is needed in order to have your SeAT setup query a supervisor instance. The basic idea to get this working is: Add a [inet_http_server] configuration block to your supervisor.conf file and restart supervisor. Add the username, password, ip and port of the supervisor instance to your SeAT .env configuration file.","title":"the config"},{"location":"admin_guides/seat_supervisor/#1-add-supervisor-configuration-block","text":"On your server where supervisor is running, open the configuration file /etc/supervisor/supervisord.conf in your favorite text editor. Add the following configuration block to your configuration file: [inet_http_server] port=127.0.0.1:9001 username=seat password=your_secure_password Obviously, substitute the values with those that correspond with your environment. For most setups, the values in the example should be just fine. Finally, restart supervisor itself.","title":"1. add supervisor configuration block."},{"location":"admin_guides/seat_supervisor/#2-configure-seat-with-the-new-values","text":"SeAT itself also needs some configurations added in order for it to know where the supervisor instance is, as well as what password to use when querying for status information. Again, on your server, find your SeAT installations .env file (usually located at /var/www/seat/.env ) and add the following configuration block: SUPERVISOR_RPC_ADDRESS=127.0.0.1 SUPERVISOR_RPC_USERNAME=seat SUPERVISOR_RPC_PASSWORD=hd@rjf&@921aJlw0 SUPERVISOR_RPC_PORT=9001 SUPERVISOR_GROUP=seat The defaults here should also be sufficient but feel free to adjust as needed.","title":"2. configure SeAT with the new values."},{"location":"admin_guides/seat_supervisor/#updating-supervisor-on-centos-6","text":"CentOS 6 ships with supervisor 2x by default. In order to get the supervisor monitoring to work, the following steps may be followed to upgrade your supervisor version. Install the GhettoForge repository. This can be done with: # Download and install the latest release GF=gf-release-6-10.gf.el6.noarch.rpm && curl -O http://mirror.symnds.com/distributions/gf/el/6/gf/x86_64/$GF && yum localinstall -y $GF && rm -f $GF # Import the GhettoForge signing keys rpm --import http://mirror.symnds.com/distributions/gf/RPM-GPG-KEY-gf.el6 # Enable the repository yum install yum-utils -y yum-config-manager --enable gf-plus Next, install Supervisor by running yum install supervisor -y This will update your local installation to version 3x. Your old configuration will be saved in /etc/supervisord.conf.rpmsave . Supervisor 3 allows you to specify a numprocs setting in a command block instead of having to define multiple instances like you had to do with v2.x. You will need to create a file called seat.ini in /etc/supervisord.d/ . This file should look something like this: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=604800 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=6 directory=/var/www/seat stopwaitsecs=600 user=apache Restart supervisor with /etc/init.d/supervisord restart and check that your workers are running again with supervisorctl status .","title":"updating supervisor on centos 6"},{"location":"admin_guides/seat_supervisor/#troubleshooting","text":"In case something goes wrong, you have a few debugging options. Obviously, first ensure that supervisor itself is running. If the http interface is started on a remote server, ensure that no firewall is blocking TCP traffic to the destination server. If you just added the inet_http_server configuration block, restart supervisor and then check back on the web interface. Attempt to debug the connection using the tinker example below. Hop onto Slack (details in the contact page) for help.","title":"troubleshooting"},{"location":"admin_guides/seat_supervisor/#troubleshooting-tinker-console","text":"Another option you have to try and figure out why your supervisor integration might not be working would be to attempt to mimic the calls SeAT makes to supervisor and looking for errors. Don't worry, this is easier than it looks! First, drop into a tinker shell by running php artisan tinker . This will drop you into a fully booted instance of SeAT: Next, copy and paste the following instantiation code into the console. This will initialize the object needed to connect to the supervisor inet_http_server using the configuration in your .env config file: $supervisor = new Supervisor\\Supervisor(config('web.supervisor.name'), config('web.supervisor.rpc.address'), config('web.supervisor.rpc.username'), config('web.supervisor.rpc.password'), (int) config('web.supervisor.rpc.port')); Pasting that should result in output similar to the below screenshot: Finally, attempt to get the current running processes by running the following code: $supervisor->getProcesses(); As you can see in my example below, the object is unable to connect to the supervisor inet_http_server. This could indicate a number of things and should hopefully help with troubleshooting any errors that may occur.","title":"troubleshooting - tinker console"},{"location":"admin_guides/sso/","text":"introduction SeAT supports authenticating users using CCP's EVE SSO services. Technical details behind the SSO implementation can be found here . Authenticating users using SSO effectively means that users may authenticate to SeAT using only their existing EVE Online credentials, and not have to worry about another set of credentials for SeAT. You do not have access to the credentials itself as that is handled entirely by CCP. Only once authentication is successful from an EVE Online perspective will the users browser redirect back with a user object provided by CCP. We use this user object to auth the user in SeAT. EVE SSO Support is not enabled by default as it requires some setup steps unique to your install. the config A bit of setup work is needed in order to have your SeAT setup ready for SSO integration. The gist of it is: Register your application on the EVE Online Developers portal here . Confirm that your SeAT install has the eveonline service configured. Set your EVE_CLIENT_ID , EVE_CLIENT_SECRET and EVE_CALLBACK_URL in the .env configuration file . Enable SSO in the SeAT settings pages . 1. register your application Browse to https://developers.eveonline.com/applications and create a new Application. Give your application a meaningful Name and a Description . Next, set the connection type to Authentication Only and specify the Callback URL Note on the Callback URL : This is the URL that the user should be redirected to once authentication was successful. In the example, we can see it is https://seat.test/auth/eve/callback . You should replace the seat.test part with your domain! In other words, lets say you are hosting SeAT at https://this.is.seat/ , then the Callback URL will be https://this.is.seat/auth/eve/callback . If you have SeAT in a sub folder on your web server, remember to prepend the folder name before /auth/eve/callback . With the new application created, you will now have the EVE_CLIENT_ID , EVE_CLIENT_SECRET that you need to configure in SeAT itself. Take note of these values. 2. confirm that you have the eveonline service configured EVE SSO Support was added later (version 1.0.12 ), quite some time after the initial release. This means that you may have installed it before the settings were prepared for this. So, just to double check, browse to your SeAT installation directory and run the following command: grep eveonline config/services.php : /var/www/seat $ grep eveonline config/services.php // an application at https://developers.eveonline.com/applications 'eveonline' => [ If you get no output from that command, it may mean that you have to add a few lines to config/services.php . Refer to this file for an example on how it should look. 3. set config parameters in .env file We almost done. We just have to add the configuration parameters to our SeAT installs .env file. Browse to your SeAT installation directory and edit the .env file (note this is a hidden file and wont show up when you just type ls ). Look for the following section towards the end of the file and populate the values with those you got when you created an application on the developers site (if you don\u2019t have these options in your .env file, feel free to just add it as you may have installed SeAT before SSO support was added): EVE_CLIENT_ID=null EVE_CLIENT_SECRET=null EVE_CALLBACK_URL=http://seat.local/auth/eve/callback 3. enable sso support in SeAT Login as an admin user into SeAT, browse to Configuration -> SeAT Settings and flip Allow Single Signon to Yes . Logout, and you should see the LOGIN with EVE Online button. troubleshooting In case something goes wrong, you have a few debugging options. Obviously, first ensure that you have correctly configured everything in the .env file. Check for copy/paste errors. Check the Laravel log file in your SeAT installation directory storage/logs/laravel.log . Flip the app into debug mode (by setting this value to true in your .env ) and reload the request. Hop onto Slack (details in the contact page) for help.","title":"Configuring Eve Online SSO"},{"location":"admin_guides/sso/#introduction","text":"SeAT supports authenticating users using CCP's EVE SSO services. Technical details behind the SSO implementation can be found here . Authenticating users using SSO effectively means that users may authenticate to SeAT using only their existing EVE Online credentials, and not have to worry about another set of credentials for SeAT. You do not have access to the credentials itself as that is handled entirely by CCP. Only once authentication is successful from an EVE Online perspective will the users browser redirect back with a user object provided by CCP. We use this user object to auth the user in SeAT. EVE SSO Support is not enabled by default as it requires some setup steps unique to your install.","title":"introduction"},{"location":"admin_guides/sso/#the-config","text":"A bit of setup work is needed in order to have your SeAT setup ready for SSO integration. The gist of it is: Register your application on the EVE Online Developers portal here . Confirm that your SeAT install has the eveonline service configured. Set your EVE_CLIENT_ID , EVE_CLIENT_SECRET and EVE_CALLBACK_URL in the .env configuration file . Enable SSO in the SeAT settings pages .","title":"the config"},{"location":"admin_guides/sso/#1-register-your-application","text":"Browse to https://developers.eveonline.com/applications and create a new Application. Give your application a meaningful Name and a Description . Next, set the connection type to Authentication Only and specify the Callback URL Note on the Callback URL : This is the URL that the user should be redirected to once authentication was successful. In the example, we can see it is https://seat.test/auth/eve/callback . You should replace the seat.test part with your domain! In other words, lets say you are hosting SeAT at https://this.is.seat/ , then the Callback URL will be https://this.is.seat/auth/eve/callback . If you have SeAT in a sub folder on your web server, remember to prepend the folder name before /auth/eve/callback . With the new application created, you will now have the EVE_CLIENT_ID , EVE_CLIENT_SECRET that you need to configure in SeAT itself. Take note of these values.","title":"1. register your application"},{"location":"admin_guides/sso/#2-confirm-that-you-have-the-eveonline-service-configured","text":"EVE SSO Support was added later (version 1.0.12 ), quite some time after the initial release. This means that you may have installed it before the settings were prepared for this. So, just to double check, browse to your SeAT installation directory and run the following command: grep eveonline config/services.php : /var/www/seat $ grep eveonline config/services.php // an application at https://developers.eveonline.com/applications 'eveonline' => [ If you get no output from that command, it may mean that you have to add a few lines to config/services.php . Refer to this file for an example on how it should look.","title":"2. confirm that you have the eveonline service configured"},{"location":"admin_guides/sso/#3-set-config-parameters-in-env-file","text":"We almost done. We just have to add the configuration parameters to our SeAT installs .env file. Browse to your SeAT installation directory and edit the .env file (note this is a hidden file and wont show up when you just type ls ). Look for the following section towards the end of the file and populate the values with those you got when you created an application on the developers site (if you don\u2019t have these options in your .env file, feel free to just add it as you may have installed SeAT before SSO support was added): EVE_CLIENT_ID=null EVE_CLIENT_SECRET=null EVE_CALLBACK_URL=http://seat.local/auth/eve/callback","title":"3. set config parameters in .env file"},{"location":"admin_guides/sso/#3-enable-sso-support-in-seat","text":"Login as an admin user into SeAT, browse to Configuration -> SeAT Settings and flip Allow Single Signon to Yes . Logout, and you should see the LOGIN with EVE Online button.","title":"3. enable sso support in SeAT"},{"location":"admin_guides/sso/#troubleshooting","text":"In case something goes wrong, you have a few debugging options. Obviously, first ensure that you have correctly configured everything in the .env file. Check for copy/paste errors. Check the Laravel log file in your SeAT installation directory storage/logs/laravel.log . Flip the app into debug mode (by setting this value to true in your .env ) and reload the request. Hop onto Slack (details in the contact page) for help.","title":"troubleshooting"},{"location":"admin_guides/tracking/","text":"introduction SeAT implements the Google Analytics Measurement Protocol . This document aims to explain in as much detail as possible how it has been implemented in SeAT, as well as what is tracked and what is not. This document aims to be as transparent as possible. whyyyyyyy Well, the most obvious is it being nice to know how much SeAT is actually being used. One may argue that Github & packagist gives statistics on how many times the project has been installed / cloned, but that does not really reflect how many actual active installations there are. Knowing how many active installs there are, encourages development. Lastly, certain exception types are also sent as hits. This helps immensely with figuring out if a new version may have a serious bug. how its implemented First of all, the Google Analytics Measurement Protocol is really just that. It just measures usage. In summary, when certain events happen, only a hit with what happened is sent. No other data is sent with the hit. For example. When the scheduler queues jobs, a hit is sent that says that this happened, and that it happened for x amount of keys. This can be seen in the following line of code: https://github.com/eveseat/console/blob/master/src/Commands/Eve/QueueKeys.php#L96-L103 . It can also be seen that no other data goes along with the hit. For example, the key_id and vcode (which is what most will be worried about) does not go with the hit. Once a hit is getting ready to be sent, information such as which OS/Version as well as versions of installed SeAT packages gets sent along with the hit. This can be seen in the following lines of code . how are you protecting my privacy? Very special care has been taken to ensure that no personally identifiable information goes along with the Measurement Protocol hits. In fact, its actually not allowed and serves no purpose for tracking. That being said, the following actions have been taken to ensure that privacy is key: Source IP addresses are anonymized (Ref: here ) Only OS Name, Machine Type and Version is reported. Type a is specifically not sent as it will disclose the hostname of the server (Ref: here ) Identifying an installation is done by generating a completely random V4 UUID. It is simply not possible to identify anyone with just this string (Ref: here ) If you insist, tracking can be completely disabled in the SeAT web interface (Ref: here and here ) can you link the commits where this was added? Sure! https://github.com/eveseat/services/commit/b2765c6d72f2e4069bc7f4c758f6a30c3872529b https://github.com/eveseat/console/commit/f3f44dc6e84e73f06dd34872fc157949586ed764 https://github.com/eveseat/eveapi/commit/cfdf20c0a271fbaa44ce17cd172d6be541265f53 https://github.com/eveseat/web/commit/ccd332dee18a93dd6041f6f1f989c214faf4e05d https://github.com/eveseat/services/commit/b4a80803a4ab00fa72c68d5774c02a61b243fdbc are the stats a secret? Not at all. However, as a start I am going to limit access to people whom have actively contributed towards SeAT. If you would like access, please ping me on Slack . how do I disable this crap? If you insist on disabling the usage tracking, you can do this (as a SeAT administrator) by browsing to Configuration -> SeAT Settings and setting Allow Tracking to No .","title":"Understanding Tracking"},{"location":"admin_guides/tracking/#introduction","text":"SeAT implements the Google Analytics Measurement Protocol . This document aims to explain in as much detail as possible how it has been implemented in SeAT, as well as what is tracked and what is not. This document aims to be as transparent as possible.","title":"introduction"},{"location":"admin_guides/tracking/#whyyyyyyy","text":"Well, the most obvious is it being nice to know how much SeAT is actually being used. One may argue that Github & packagist gives statistics on how many times the project has been installed / cloned, but that does not really reflect how many actual active installations there are. Knowing how many active installs there are, encourages development. Lastly, certain exception types are also sent as hits. This helps immensely with figuring out if a new version may have a serious bug.","title":"whyyyyyyy"},{"location":"admin_guides/tracking/#how-its-implemented","text":"First of all, the Google Analytics Measurement Protocol is really just that. It just measures usage. In summary, when certain events happen, only a hit with what happened is sent. No other data is sent with the hit. For example. When the scheduler queues jobs, a hit is sent that says that this happened, and that it happened for x amount of keys. This can be seen in the following line of code: https://github.com/eveseat/console/blob/master/src/Commands/Eve/QueueKeys.php#L96-L103 . It can also be seen that no other data goes along with the hit. For example, the key_id and vcode (which is what most will be worried about) does not go with the hit. Once a hit is getting ready to be sent, information such as which OS/Version as well as versions of installed SeAT packages gets sent along with the hit. This can be seen in the following lines of code .","title":"how its implemented"},{"location":"admin_guides/tracking/#how-are-you-protecting-my-privacy","text":"Very special care has been taken to ensure that no personally identifiable information goes along with the Measurement Protocol hits. In fact, its actually not allowed and serves no purpose for tracking. That being said, the following actions have been taken to ensure that privacy is key: Source IP addresses are anonymized (Ref: here ) Only OS Name, Machine Type and Version is reported. Type a is specifically not sent as it will disclose the hostname of the server (Ref: here ) Identifying an installation is done by generating a completely random V4 UUID. It is simply not possible to identify anyone with just this string (Ref: here ) If you insist, tracking can be completely disabled in the SeAT web interface (Ref: here and here )","title":"how are you protecting my privacy?"},{"location":"admin_guides/tracking/#can-you-link-the-commits-where-this-was-added","text":"Sure! https://github.com/eveseat/services/commit/b2765c6d72f2e4069bc7f4c758f6a30c3872529b https://github.com/eveseat/console/commit/f3f44dc6e84e73f06dd34872fc157949586ed764 https://github.com/eveseat/eveapi/commit/cfdf20c0a271fbaa44ce17cd172d6be541265f53 https://github.com/eveseat/web/commit/ccd332dee18a93dd6041f6f1f989c214faf4e05d https://github.com/eveseat/services/commit/b4a80803a4ab00fa72c68d5774c02a61b243fdbc","title":"can you link the commits where this was added?"},{"location":"admin_guides/tracking/#are-the-stats-a-secret","text":"Not at all. However, as a start I am going to limit access to people whom have actively contributed towards SeAT. If you would like access, please ping me on Slack .","title":"are the stats a secret?"},{"location":"admin_guides/tracking/#how-do-i-disable-this-crap","text":"If you insist on disabling the usage tracking, you can do this (as a SeAT administrator) by browsing to Configuration -> SeAT Settings and setting Allow Tracking to No .","title":"how do I disable this crap?"},{"location":"changelogs/api/","text":"api change logs Generated with: git log --oneline --decorate 1.0.13 b55b1aa (tag: 1.0.13) Version Bump 8b80e11 Paginate the token logs 1.0.12 fbf3e88 (tag: 1.0.12) Version Bump e8f1882 Fix eveseat/seat#115 by adding new endpoints for role management 729971f Convert from a resource to controller route for roles d2ff1df Merge pull request #1 from nizzan/patch-1 dc80447 Typo on API Token generation 1.0.11 d35e7ef (tag: 1.0.11) Version Bump 60475a4 Add /api/v1/corporation/assets-contents/{corp_id} endpoint 530703c Add missing PPHDoc comment for argument 1.0.10 3faff1e (tag: 1.0.10) Version Bump 99871c9 Rename repository method that was incorrectly called 131a3b8 Add /api/v1/corporation/all endpoint be8e6aa Include key info and characters. 1.0.9 22f8b34 (tag: 1.0.9) Version Bump f6bfc7e Update copyright 7f24bf8 Code style fixes 1.0.8 2409d0c (tag: 1.0.8) Version Bump ad8351a Add Corp Pocos Endpoint 1.0.7 6ca59b0 (tag: 1.0.7) Version Bump 603cb76 Add ability to get a specific starbases info 1.0.6 a949267 (tag: 1.0.6) Version Bump 8f5c35f Allow for API Keys to be transferred to a different User c712823 Add starbase and assets-by-location endpoints 1.0.5 220b7bb (tag: 1.0.5) Version Bump 86c4602 Specify versions with ~ 1.0.4 3b80952 (tag: 1.0.4) Version Bump 55269b9 Add char & corp Bookmarks endpoints b65799f Add Character Channels endpoint 1.0.3 dee0f28 (tag: 1.0.3) Version Bump 76647e9 Add localization support de62767 (tag: 1.0.2) Update README.md 1.0.1 cc4ea85 (tag: 1.0.1) Version Bump 16c3896 Dont use a sub-menu 88348cb Cleanup Middleware and add Request Path logging 1.0.0 03064d4 (tag: 1.0.0) Add admin views, complete middleware and add menu. c11ca2e Add Corporation API Endpoints 122f2da Add Character API Endpoints dda7cbb Add endpoint to validate credentials 014502b Add roles and permissions query endpoint 4e88616 Add endpoints to get Role information 4516aaa Add CRUD for User management 2d129ea Update links to eveseat/api 2c2cef3 Fix typo 5620aa2 Update README 6905c26 Compelte the EVE API Key API 32d17cf First preperations for the SeAT API 57f8c6d first commit","title":"Api"},{"location":"changelogs/api/#api-change-logs","text":"Generated with: git log --oneline --decorate","title":"api change logs"},{"location":"changelogs/api/#1013","text":"b55b1aa (tag: 1.0.13) Version Bump 8b80e11 Paginate the token logs","title":"1.0.13"},{"location":"changelogs/api/#1012","text":"fbf3e88 (tag: 1.0.12) Version Bump e8f1882 Fix eveseat/seat#115 by adding new endpoints for role management 729971f Convert from a resource to controller route for roles d2ff1df Merge pull request #1 from nizzan/patch-1 dc80447 Typo on API Token generation","title":"1.0.12"},{"location":"changelogs/api/#1011","text":"d35e7ef (tag: 1.0.11) Version Bump 60475a4 Add /api/v1/corporation/assets-contents/{corp_id} endpoint 530703c Add missing PPHDoc comment for argument","title":"1.0.11"},{"location":"changelogs/api/#1010","text":"3faff1e (tag: 1.0.10) Version Bump 99871c9 Rename repository method that was incorrectly called 131a3b8 Add /api/v1/corporation/all endpoint be8e6aa Include key info and characters.","title":"1.0.10"},{"location":"changelogs/api/#109","text":"22f8b34 (tag: 1.0.9) Version Bump f6bfc7e Update copyright 7f24bf8 Code style fixes","title":"1.0.9"},{"location":"changelogs/api/#108","text":"2409d0c (tag: 1.0.8) Version Bump ad8351a Add Corp Pocos Endpoint","title":"1.0.8"},{"location":"changelogs/api/#107","text":"6ca59b0 (tag: 1.0.7) Version Bump 603cb76 Add ability to get a specific starbases info","title":"1.0.7"},{"location":"changelogs/api/#106","text":"a949267 (tag: 1.0.6) Version Bump 8f5c35f Allow for API Keys to be transferred to a different User c712823 Add starbase and assets-by-location endpoints","title":"1.0.6"},{"location":"changelogs/api/#105","text":"220b7bb (tag: 1.0.5) Version Bump 86c4602 Specify versions with ~","title":"1.0.5"},{"location":"changelogs/api/#104","text":"3b80952 (tag: 1.0.4) Version Bump 55269b9 Add char & corp Bookmarks endpoints b65799f Add Character Channels endpoint","title":"1.0.4"},{"location":"changelogs/api/#103","text":"dee0f28 (tag: 1.0.3) Version Bump 76647e9 Add localization support de62767 (tag: 1.0.2) Update README.md","title":"1.0.3"},{"location":"changelogs/api/#101","text":"cc4ea85 (tag: 1.0.1) Version Bump 16c3896 Dont use a sub-menu 88348cb Cleanup Middleware and add Request Path logging","title":"1.0.1"},{"location":"changelogs/api/#100","text":"03064d4 (tag: 1.0.0) Add admin views, complete middleware and add menu. c11ca2e Add Corporation API Endpoints 122f2da Add Character API Endpoints dda7cbb Add endpoint to validate credentials 014502b Add roles and permissions query endpoint 4e88616 Add endpoints to get Role information 4516aaa Add CRUD for User management 2d129ea Update links to eveseat/api 2c2cef3 Fix typo 5620aa2 Update README 6905c26 Compelte the EVE API Key API 32d17cf First preperations for the SeAT API 57f8c6d first commit","title":"1.0.0"},{"location":"changelogs/console/","text":"console change logs Generated with: git log --oneline --decorate 1.0.16 c356fd3 (tag: 1.0.16) Version Bump ebbebf2 Default to 6 hours to reap jobs 40707ef Add missing trait 1.0.15 43fc0b2 (tag: 1.0.15) Version Bump a1da1a0 Remove string concatenation causing systax errors 1.0.14 57132cf (tag: 1.0.14) Version Bump 8c9abec Fix eveseat/seat#127 by removing string concatenation in Class property 1.0.13 974cfad (tag: 1.0.13) Version Bump f3f44dc Add analytics hit information. 161cdee Add ClearExpired command a87e8d0 Add `seat:queue:clear-expired` command. 1.0.12 a6e5e54 (tag: 1.0.12) Version Bump 0c9f1c7 Add a console command to set the admin email address 1.0.11 53fda6e (tag: 1.0.11) Version Bump bb9841c Fix eveseat/seat#83 by ensuring seat:admin:reset recovers admin roles 1.0.10 8fb5ad1 (tag: 1.0.10) Version Bump 3e1dca5 Update copyright d4b2b6f Code style fix 1.0.9 68e5638 (tag: 1.0.9) Version Bump 8b3aef9 Use `class` notation 1.0.8 6a6d779 (tag: 1.0.8) Version Bump 643479f Update diagnose with some more useful debug info 0132b4e Add Github version lookup 1.0.7 18bf548 (tag: 1.0.7) Version Bump 8934a36 Specify versions with ~ 1.0.6 3f541b4 (tag: 1.0.6) Version Bump a49d908 Revert b7cac27ebe4a1de8 1.0.5 7e1d13d (tag: 1.0.5) Version Bump b7cac27 Drop guzzle version to match that of phealng 91f2e03 Cleanups 6361651 Add diagnose command 123bc36 Update README.md 1.0.4 338a397 (tag: 1.0.4) Cleanup outputs and sink to a filehandler instead. 1.0.3 0f83a18 (tag: 1.0.3) Version Bump d0f6d31 Display versions in a table 3d472d4 Add notifications version 1.0.2 65f650d (tag: 1.0.2) Versino Bump 1.0.1 2a2a350 (tag: 1.0.1) Add web and api versions 1.0.0 8cc907d (tag: 1.0.0) Update required eveseat package versions 81fde9f Version Bump 1.0-pre-alpha fe0da9e (tag: 1.0-pre-alpha) Update README 05e59b3 Add a cache clearing command 41081d9 Add the UpdateSDE command 9af76fb use ::class format 7e0bae5 Add seat:admin:reset command 9f4e15f Update to match eveseat/eveapi model refacto ee48a61 Add services version lookup 5d7ca5f Add a 'live' status command bcd1feb Add command to update a single key ee43dc5 Add seat:keys:show command f72ba13 Style fix b4bcc04 Add the console.config and update version command 8fe529d Refactor updater commands to the Eve\\ namespace cc92c10 Ensure only enabled keys are queued for updates 8f93faf Update to new eveapi version information location fa5513d Queue Jobs using the UpdatePublic Job 887b89c Update readme with badges 74f82f5 Prepare for packagist publish. a782121 Add the command to queue updates for API keys 14edaa8 Make all commands honor the Job Container 12538ef Add command for the Api CallList update 31e0d06 Add EVE Map Update command 20aa008 Add eve:update-eve command b9b7545 Add the EveUpdateServerStatus command c978b94 Add the add:job command for testing c01ddd9 Start the Console package f42ac27 first commit","title":"Console"},{"location":"changelogs/console/#console-change-logs","text":"Generated with: git log --oneline --decorate","title":"console change logs"},{"location":"changelogs/console/#1016","text":"c356fd3 (tag: 1.0.16) Version Bump ebbebf2 Default to 6 hours to reap jobs 40707ef Add missing trait","title":"1.0.16"},{"location":"changelogs/console/#1015","text":"43fc0b2 (tag: 1.0.15) Version Bump a1da1a0 Remove string concatenation causing systax errors","title":"1.0.15"},{"location":"changelogs/console/#1014","text":"57132cf (tag: 1.0.14) Version Bump 8c9abec Fix eveseat/seat#127 by removing string concatenation in Class property","title":"1.0.14"},{"location":"changelogs/console/#1013","text":"974cfad (tag: 1.0.13) Version Bump f3f44dc Add analytics hit information. 161cdee Add ClearExpired command a87e8d0 Add `seat:queue:clear-expired` command.","title":"1.0.13"},{"location":"changelogs/console/#1012","text":"a6e5e54 (tag: 1.0.12) Version Bump 0c9f1c7 Add a console command to set the admin email address","title":"1.0.12"},{"location":"changelogs/console/#1011","text":"53fda6e (tag: 1.0.11) Version Bump bb9841c Fix eveseat/seat#83 by ensuring seat:admin:reset recovers admin roles","title":"1.0.11"},{"location":"changelogs/console/#1010","text":"8fb5ad1 (tag: 1.0.10) Version Bump 3e1dca5 Update copyright d4b2b6f Code style fix","title":"1.0.10"},{"location":"changelogs/console/#109","text":"68e5638 (tag: 1.0.9) Version Bump 8b3aef9 Use `class` notation","title":"1.0.9"},{"location":"changelogs/console/#108","text":"6a6d779 (tag: 1.0.8) Version Bump 643479f Update diagnose with some more useful debug info 0132b4e Add Github version lookup","title":"1.0.8"},{"location":"changelogs/console/#107","text":"18bf548 (tag: 1.0.7) Version Bump 8934a36 Specify versions with ~","title":"1.0.7"},{"location":"changelogs/console/#106","text":"3f541b4 (tag: 1.0.6) Version Bump a49d908 Revert b7cac27ebe4a1de8","title":"1.0.6"},{"location":"changelogs/console/#105","text":"7e1d13d (tag: 1.0.5) Version Bump b7cac27 Drop guzzle version to match that of phealng 91f2e03 Cleanups 6361651 Add diagnose command 123bc36 Update README.md","title":"1.0.5"},{"location":"changelogs/console/#104","text":"338a397 (tag: 1.0.4) Cleanup outputs and sink to a filehandler instead.","title":"1.0.4"},{"location":"changelogs/console/#103","text":"0f83a18 (tag: 1.0.3) Version Bump d0f6d31 Display versions in a table 3d472d4 Add notifications version","title":"1.0.3"},{"location":"changelogs/console/#102","text":"65f650d (tag: 1.0.2) Versino Bump","title":"1.0.2"},{"location":"changelogs/console/#101","text":"2a2a350 (tag: 1.0.1) Add web and api versions","title":"1.0.1"},{"location":"changelogs/console/#100","text":"8cc907d (tag: 1.0.0) Update required eveseat package versions 81fde9f Version Bump","title":"1.0.0"},{"location":"changelogs/console/#10-pre-alpha","text":"fe0da9e (tag: 1.0-pre-alpha) Update README 05e59b3 Add a cache clearing command 41081d9 Add the UpdateSDE command 9af76fb use ::class format 7e0bae5 Add seat:admin:reset command 9f4e15f Update to match eveseat/eveapi model refacto ee48a61 Add services version lookup 5d7ca5f Add a 'live' status command bcd1feb Add command to update a single key ee43dc5 Add seat:keys:show command f72ba13 Style fix b4bcc04 Add the console.config and update version command 8fe529d Refactor updater commands to the Eve\\ namespace cc92c10 Ensure only enabled keys are queued for updates 8f93faf Update to new eveapi version information location fa5513d Queue Jobs using the UpdatePublic Job 887b89c Update readme with badges 74f82f5 Prepare for packagist publish. a782121 Add the command to queue updates for API keys 14edaa8 Make all commands honor the Job Container 12538ef Add command for the Api CallList update 31e0d06 Add EVE Map Update command 20aa008 Add eve:update-eve command b9b7545 Add the EveUpdateServerStatus command c978b94 Add the add:job command for testing c01ddd9 Start the Console package f42ac27 first commit","title":"1.0-pre-alpha"},{"location":"changelogs/eveapi/","text":"eveapi change logs Generated with: git log --oneline --decorate 1.0.17 d9af10e (tag: 1.0.17) Version Bump 1267346 Remove DispatchesJobs trait and use Bus Facade 1.0.16 804bbdc (tag: 1.0.16) Version Bump cfdf20c Report Exception types that have occured. 69de2a2 Add timestamp to error. 87efa4b Add model for the failed_jobs table 1.0.15 c02f338 (tag: 1.0.15) Version Bump 3356cd0 Fix method comment bd3e928 Handle the `failed()` method on jobs by updating the `JobTracking`. 1.0.14 c812028 (tag: 1.0.14) Version Bump 55f1ade Fix eveseat/seat#100 by finding by primary key only. 4451000 Fix eveseat/seat#99 by cleaning up after a key is deleted 1.0.13 8f8e0b1 (tag: 1.0.13) Version Bump e9db18e Add a block if an admin contact email has not been set. 459d353 Add the new char/Clones and char/Skills endpoints as updaters ccc7a08 Fix XSD as 2 new endpoints have been added, bumping accessMask to long type 85b21b0 Disable keys that respond with HTTP 403 in APIKeyInfo 1.0.12 56c8444 (tag: 1.0.12) Version Bump 00d8697 Catch the PhealException to handle XML parsing issues ab00f40 Temporarily fix eveseat/seat#71 by catching the PhealException 20f00e9 Mark jobs as done in the case of errors. 1.0.11 ab985bd (tag: 1.0.11) Version Bump d4d4f50 Dont disable on HTTP 403. Too many false positives. 1.0.10 3a5c6cf (tag: 1.0.10) Version Bump 6995d17 Fix eveseat/seat#52 by searching by refTypeID to update 1.0.9 ab271fa (tag: 1.0.9) Version Bump c285f7d Update copyright e741457 Code style fixes 1.0.8 eac8500 (tag: 1.0.8) Version Bump 83cb845 Fix eveseat/seat#37 1.0.7 f816c1d (tag: 1.0.7) Version Bump dd72510 Default to an Unknown system 1e41a94 Default to the solarsystemid instead of null da049c7 Fix eveseat/seat#8 by checking if the body exists before insert ff48a73 Add the CustomsOfficeLocations API updater 601eb36 Specify phealng version with a ~ a08e970 Remove specific minor version. a93f674 Bump minimum PHP version 1.0.6 74dcedb (tag: 1.0.6) Version Bump fb2e473 Set composer versions using ~ f9fdfb5 Merge pull request #4 from warlof/shareholders fd53795 Keep track of the closest distance. 9840802 Provide a fix to eveseat/seat issue #21 69e8c3b Merge pull request #3 from warlof/contactslabels 173f57c Provide a fix to eveseat/seat issue #5 1.0.5 03101f9 (tag: 1.0.5) Version Bump 5562f03 Add corporation bookmarks updater 17c7c41 Resolve the closest celestials for bookmarks c7bef60 Only resolve to items that have names 856f66f Add channel relations 1.0.4 7be3801 (tag: 1.0.4) Version Bump 6302a17 Handle some HTTP response codes for expired keys 1.0.3 53c168f (tag: 1.0.3) Add check to job_ids and version bump 1.0.2 dc612d9 (tag: 1.0.2) Version Bump a8bcd62 Compile a sane user agent for eveapi xml requests 6eced6a Change - to _ 05378b6 Catch the ConnectionException when checking keys fa6bcf6 Decrement the counters when checking key types 78441a9 Dont increment past the limit ff3df0a Add ability to check if the EVE XMLAPI is down. 3ec7598 Add primary key f954257 Add primary key. 1.0.1 f4d133a (tag: 1.0.1) Version Bump 6db0044 Update to Pheal2.3 and use the Guzzle fetcher 4354a90 Reload the info relationship on a key to update accessMask 47ddd2b Update README.md 1.0.0 a49216a (tag: 1.0.0) Version Bump 1.0-pre-alpha debc408 (tag: 1.0-pre-alpha) Update README 3ab3bb9 Populate $fillable properties to include corpIDs 7577325 Small refactor to reduce code duplication 403b894 Add method to get a corporationID f116fbe Fix up testing by allowing the access bit to be set in the constructor 18e3967 Actually set the configured instance 18522f4 Load access definitions directly from the config d9c3d8f Resolve PhealNG out of the IoC 3e75254 Increase field size cc1823d Add User relationship 2c3f4a6 Change Case 411e46c Refactor Models into categorized namespaces 0940ea9 Make Jobs aware of the Pheal\\ConnectionException acf0a53 Write a log entry if the JobTracker lookup failed bc9b4ce Dont try and get Courier contracts items 10f496a Dont type hint the exception type, as any exception should get here. d1d8555 Cater for the strange AccountStatus call access. 318de50 Rate Limit requests p/s to remain under 30 p/s dfcd9c6 Jobs can now be assigned to a queue for priority. 5b8cd0b Prevent an array_merge() attempt on NULL 31f1af0 Allow for granular update worker control ca9ff3e Collapse KillMail Attacker, Detail and Items tables. 16e75b5 Split configs up and update the Service Provider 1639d2b Move load_workers to the JobTracker Trait 827f34a Small refactor to remove duplicate code starting workers. 66bb167 Code Style fixes 9701167 Log failed jobs to the general log. 5c76f57 Fix Line Seperator to LF e9eb32d Add sample XML 2712ac3 Remove unnecessary leading \\ acd5c1b Add Corporation WalletTransaction Update worker 42e8355 Add more transaction uniqueness b4b5c01 Add missing accountKey arg c27e7d3 Add Corporation Wallet Journal Update worker fa876b7 Add primary key for updates 0117329 Add Corporation Titles Update worker 30162a2 Add StarbaseList and Detail Update workers 821b63b Add Corporation Standing Update worker ccfa8b6 Add Corporation Shareholders Update worker 6478410 Add Corporation MemberSecurityLog Update worker 84cabb4 Add Corporation MemberTracking Update worker f860322 Only set titles if the API response had some eac6568 Add Corporation MemberSecurity Update Worker 92cb2a0 Add Corporation MemberMedals Update worker adb06db Add Corporation Medals Update worker 799246d Add Corporation Market Order Update worker 91b9b8f Add Corporation KillMail Update worker 422cc28 Add Corporation IndustryJobs Update worker a8c58c5 Add Corporation Customs Offices Update worker 2bfb7cc Add Corporation Sheet Update worker e91a78f Add Corporation Contract/Items Update worker c8ba721 Add Corporation ContactList update worker 8042cb9 Update comment 9876ed2 Add Corporation Locations Update worker 4949d96 Add method to find celestials closest to an x,y,z d7f3844 Add the Corporation Assets Update worker 367d83d Add Corporation Account Balance worker 85b7ed4 Slightly increase possible value a02f4f6 Add helper to determine corpID for corp keys 942ee79 Get a fresh instance of the model as it just updated aaa4e2b Use relation to get type instead of a new query 0cef16e Code Style Fixes 3127104 Optimize a few updater workers, fix comments and styling ed350b6 Check if api_info is available first. 3aabc11 Add EVEAPI error handling e38f15a Check if the info relation exists before using eda56f2 Add test for accessMask checking efa6bd3 Implement CanCheck to check API key accessmasks 076a608 Improve readability of error output c327e62 Bump dependencies to stable versions only d3690c0 Update class comments d377c46 Move list of update classes to a config file 55c3d31 Fixup tests since the phealng optimization d0f93b4 Optimize PhealNG usage. 6a0182e Add Bookmarks Update worker 5cc2f16 Update Badges 72f4a40 Update License 62abf5d Add Chat Channels Update worker b1c1890 Fix reference to transactions element 9d17c5e Add Utils test effef96 Update License 55a0f70 Use 'hash' as primary key 9a3a1e3 Add Wallet Transactions Update worker 8149688 Add the Wallet Journal update worker 7fb983f Add Calendar Events Update worker fc553d5 Add Standings Update worker b06989c Add SkillQueue Update worker faf93b0 Add SkillInTraining Update worker 4ca03ab Add Character Research Update worker 532b75b Add Character Market Orders update worker 4d2baeb Add Planetary Related Update workers 9f82357 Add Character Notification Update workers 985ec34 Add character mailing lists update worker 9a1da2f Add MailMessage Update worker fdddcec Increase size of output column 81bfd5e Add supporting files for Char KillMail Updater ea775fd Add Character KillMail Update worker 53b3b92 Add CharacterInfo Update worker 259f2c6 Add Industry Update worker 4cb4c79 Fix a few small keying issues 75718fe Add Contract and ContractItems update workers bb8fdbd Add Contact Notifications update worker ae67622 Add ContactList update worker 576e022 Add complete CharacterUpdate worker 77ed8ca Bump default cURL timeout to 60s 6d15331 Fix issue causing member corp allianceID to be 0 08ef47a Add the Character AssetsList Updater 0a0f959 Add AccountBalance Update worker 5a65242 Fix up the relationship keys b12f246 Add a relationship between API Keys and Characters f20b464 Prevent an errored job from being marked as Done 13ed536 Add AccountStatus sample XML b26fcf2 Add AccountStatus Updater 93952a3 Update Checker to queue jobs based on key type c61dd09 Style and docblock fixes db60993 Abstract some of the repeated Trait usage 7124c77 Constrain the character removals to the key b5f2f61 Remove unused PhealException b0063c7 Start the Key pickup worker 3e97b6c Return the object when setting the key/vcode 99081b7 Group API Tests to be easily excluded by PHPUnit 207a33d Add the Job Container to resolve Job information 598ed88 Remove unused DispatchesJobs trait 93eec75 Add the API CallList Updater and Test 79f4a16 Add Code Climate f881d47 Update README aafe40f Update travis-ci to include newer PHP and HHVM d21e557 Add Travis-CI config 3da6a8e Add tests for the currently implemented calls 21a3f2d CS Fixes 82c0f51 Add Test to validate ServerStatus API Response 1ee3bb0 Small namespace change for the test 21be320 Start Testing! :) 6d0ed85 Throw an exception if an api key is empty 52ad9b7 Add Map Jumps Update worker 6c4bc86 Add Map Kills update worker 4720ae1 Fix job to actually update if something changes too 6d39cb2 Update Models defining new primary keys 377428b Modify Migration Indexes c753ad1 Add Map Sovereignty Update workers 187b336 Add AllianceList update 8fff877 Add ConquerableStationList updater a75c66e Add eve/errorlist API call b02dc11 Add Eve RefTypes API Call 9c61de8 Move Jobs error handling to a trait 8bc8a64 Implement the Job Tracker 0d0ab93 Add a job manager ca0a6d7 Add generated docblocks 086ebb5 Complete ServerStatus Update 8991564 Start core logic and add server status checker b6991b9 Start a few things to test job workers 40d4948 Start composer package af4f12f first commit","title":"Eveapi"},{"location":"changelogs/eveapi/#eveapi-change-logs","text":"Generated with: git log --oneline --decorate","title":"eveapi change logs"},{"location":"changelogs/eveapi/#1017","text":"d9af10e (tag: 1.0.17) Version Bump 1267346 Remove DispatchesJobs trait and use Bus Facade","title":"1.0.17"},{"location":"changelogs/eveapi/#1016","text":"804bbdc (tag: 1.0.16) Version Bump cfdf20c Report Exception types that have occured. 69de2a2 Add timestamp to error. 87efa4b Add model for the failed_jobs table","title":"1.0.16"},{"location":"changelogs/eveapi/#1015","text":"c02f338 (tag: 1.0.15) Version Bump 3356cd0 Fix method comment bd3e928 Handle the `failed()` method on jobs by updating the `JobTracking`.","title":"1.0.15"},{"location":"changelogs/eveapi/#1014","text":"c812028 (tag: 1.0.14) Version Bump 55f1ade Fix eveseat/seat#100 by finding by primary key only. 4451000 Fix eveseat/seat#99 by cleaning up after a key is deleted","title":"1.0.14"},{"location":"changelogs/eveapi/#1013","text":"8f8e0b1 (tag: 1.0.13) Version Bump e9db18e Add a block if an admin contact email has not been set. 459d353 Add the new char/Clones and char/Skills endpoints as updaters ccc7a08 Fix XSD as 2 new endpoints have been added, bumping accessMask to long type 85b21b0 Disable keys that respond with HTTP 403 in APIKeyInfo","title":"1.0.13"},{"location":"changelogs/eveapi/#1012","text":"56c8444 (tag: 1.0.12) Version Bump 00d8697 Catch the PhealException to handle XML parsing issues ab00f40 Temporarily fix eveseat/seat#71 by catching the PhealException 20f00e9 Mark jobs as done in the case of errors.","title":"1.0.12"},{"location":"changelogs/eveapi/#1011","text":"ab985bd (tag: 1.0.11) Version Bump d4d4f50 Dont disable on HTTP 403. Too many false positives.","title":"1.0.11"},{"location":"changelogs/eveapi/#1010","text":"3a5c6cf (tag: 1.0.10) Version Bump 6995d17 Fix eveseat/seat#52 by searching by refTypeID to update","title":"1.0.10"},{"location":"changelogs/eveapi/#109","text":"ab271fa (tag: 1.0.9) Version Bump c285f7d Update copyright e741457 Code style fixes","title":"1.0.9"},{"location":"changelogs/eveapi/#108","text":"eac8500 (tag: 1.0.8) Version Bump 83cb845 Fix eveseat/seat#37","title":"1.0.8"},{"location":"changelogs/eveapi/#107","text":"f816c1d (tag: 1.0.7) Version Bump dd72510 Default to an Unknown system 1e41a94 Default to the solarsystemid instead of null da049c7 Fix eveseat/seat#8 by checking if the body exists before insert ff48a73 Add the CustomsOfficeLocations API updater 601eb36 Specify phealng version with a ~ a08e970 Remove specific minor version. a93f674 Bump minimum PHP version","title":"1.0.7"},{"location":"changelogs/eveapi/#106","text":"74dcedb (tag: 1.0.6) Version Bump fb2e473 Set composer versions using ~ f9fdfb5 Merge pull request #4 from warlof/shareholders fd53795 Keep track of the closest distance. 9840802 Provide a fix to eveseat/seat issue #21 69e8c3b Merge pull request #3 from warlof/contactslabels 173f57c Provide a fix to eveseat/seat issue #5","title":"1.0.6"},{"location":"changelogs/eveapi/#105","text":"03101f9 (tag: 1.0.5) Version Bump 5562f03 Add corporation bookmarks updater 17c7c41 Resolve the closest celestials for bookmarks c7bef60 Only resolve to items that have names 856f66f Add channel relations","title":"1.0.5"},{"location":"changelogs/eveapi/#104","text":"7be3801 (tag: 1.0.4) Version Bump 6302a17 Handle some HTTP response codes for expired keys","title":"1.0.4"},{"location":"changelogs/eveapi/#103","text":"53c168f (tag: 1.0.3) Add check to job_ids and version bump","title":"1.0.3"},{"location":"changelogs/eveapi/#102","text":"dc612d9 (tag: 1.0.2) Version Bump a8bcd62 Compile a sane user agent for eveapi xml requests 6eced6a Change - to _ 05378b6 Catch the ConnectionException when checking keys fa6bcf6 Decrement the counters when checking key types 78441a9 Dont increment past the limit ff3df0a Add ability to check if the EVE XMLAPI is down. 3ec7598 Add primary key f954257 Add primary key.","title":"1.0.2"},{"location":"changelogs/eveapi/#101","text":"f4d133a (tag: 1.0.1) Version Bump 6db0044 Update to Pheal2.3 and use the Guzzle fetcher 4354a90 Reload the info relationship on a key to update accessMask 47ddd2b Update README.md","title":"1.0.1"},{"location":"changelogs/eveapi/#100","text":"a49216a (tag: 1.0.0) Version Bump","title":"1.0.0"},{"location":"changelogs/eveapi/#10-pre-alpha","text":"debc408 (tag: 1.0-pre-alpha) Update README 3ab3bb9 Populate $fillable properties to include corpIDs 7577325 Small refactor to reduce code duplication 403b894 Add method to get a corporationID f116fbe Fix up testing by allowing the access bit to be set in the constructor 18e3967 Actually set the configured instance 18522f4 Load access definitions directly from the config d9c3d8f Resolve PhealNG out of the IoC 3e75254 Increase field size cc1823d Add User relationship 2c3f4a6 Change Case 411e46c Refactor Models into categorized namespaces 0940ea9 Make Jobs aware of the Pheal\\ConnectionException acf0a53 Write a log entry if the JobTracker lookup failed bc9b4ce Dont try and get Courier contracts items 10f496a Dont type hint the exception type, as any exception should get here. d1d8555 Cater for the strange AccountStatus call access. 318de50 Rate Limit requests p/s to remain under 30 p/s dfcd9c6 Jobs can now be assigned to a queue for priority. 5b8cd0b Prevent an array_merge() attempt on NULL 31f1af0 Allow for granular update worker control ca9ff3e Collapse KillMail Attacker, Detail and Items tables. 16e75b5 Split configs up and update the Service Provider 1639d2b Move load_workers to the JobTracker Trait 827f34a Small refactor to remove duplicate code starting workers. 66bb167 Code Style fixes 9701167 Log failed jobs to the general log. 5c76f57 Fix Line Seperator to LF e9eb32d Add sample XML 2712ac3 Remove unnecessary leading \\ acd5c1b Add Corporation WalletTransaction Update worker 42e8355 Add more transaction uniqueness b4b5c01 Add missing accountKey arg c27e7d3 Add Corporation Wallet Journal Update worker fa876b7 Add primary key for updates 0117329 Add Corporation Titles Update worker 30162a2 Add StarbaseList and Detail Update workers 821b63b Add Corporation Standing Update worker ccfa8b6 Add Corporation Shareholders Update worker 6478410 Add Corporation MemberSecurityLog Update worker 84cabb4 Add Corporation MemberTracking Update worker f860322 Only set titles if the API response had some eac6568 Add Corporation MemberSecurity Update Worker 92cb2a0 Add Corporation MemberMedals Update worker adb06db Add Corporation Medals Update worker 799246d Add Corporation Market Order Update worker 91b9b8f Add Corporation KillMail Update worker 422cc28 Add Corporation IndustryJobs Update worker a8c58c5 Add Corporation Customs Offices Update worker 2bfb7cc Add Corporation Sheet Update worker e91a78f Add Corporation Contract/Items Update worker c8ba721 Add Corporation ContactList update worker 8042cb9 Update comment 9876ed2 Add Corporation Locations Update worker 4949d96 Add method to find celestials closest to an x,y,z d7f3844 Add the Corporation Assets Update worker 367d83d Add Corporation Account Balance worker 85b7ed4 Slightly increase possible value a02f4f6 Add helper to determine corpID for corp keys 942ee79 Get a fresh instance of the model as it just updated aaa4e2b Use relation to get type instead of a new query 0cef16e Code Style Fixes 3127104 Optimize a few updater workers, fix comments and styling ed350b6 Check if api_info is available first. 3aabc11 Add EVEAPI error handling e38f15a Check if the info relation exists before using eda56f2 Add test for accessMask checking efa6bd3 Implement CanCheck to check API key accessmasks 076a608 Improve readability of error output c327e62 Bump dependencies to stable versions only d3690c0 Update class comments d377c46 Move list of update classes to a config file 55c3d31 Fixup tests since the phealng optimization d0f93b4 Optimize PhealNG usage. 6a0182e Add Bookmarks Update worker 5cc2f16 Update Badges 72f4a40 Update License 62abf5d Add Chat Channels Update worker b1c1890 Fix reference to transactions element 9d17c5e Add Utils test effef96 Update License 55a0f70 Use 'hash' as primary key 9a3a1e3 Add Wallet Transactions Update worker 8149688 Add the Wallet Journal update worker 7fb983f Add Calendar Events Update worker fc553d5 Add Standings Update worker b06989c Add SkillQueue Update worker faf93b0 Add SkillInTraining Update worker 4ca03ab Add Character Research Update worker 532b75b Add Character Market Orders update worker 4d2baeb Add Planetary Related Update workers 9f82357 Add Character Notification Update workers 985ec34 Add character mailing lists update worker 9a1da2f Add MailMessage Update worker fdddcec Increase size of output column 81bfd5e Add supporting files for Char KillMail Updater ea775fd Add Character KillMail Update worker 53b3b92 Add CharacterInfo Update worker 259f2c6 Add Industry Update worker 4cb4c79 Fix a few small keying issues 75718fe Add Contract and ContractItems update workers bb8fdbd Add Contact Notifications update worker ae67622 Add ContactList update worker 576e022 Add complete CharacterUpdate worker 77ed8ca Bump default cURL timeout to 60s 6d15331 Fix issue causing member corp allianceID to be 0 08ef47a Add the Character AssetsList Updater 0a0f959 Add AccountBalance Update worker 5a65242 Fix up the relationship keys b12f246 Add a relationship between API Keys and Characters f20b464 Prevent an errored job from being marked as Done 13ed536 Add AccountStatus sample XML b26fcf2 Add AccountStatus Updater 93952a3 Update Checker to queue jobs based on key type c61dd09 Style and docblock fixes db60993 Abstract some of the repeated Trait usage 7124c77 Constrain the character removals to the key b5f2f61 Remove unused PhealException b0063c7 Start the Key pickup worker 3e97b6c Return the object when setting the key/vcode 99081b7 Group API Tests to be easily excluded by PHPUnit 207a33d Add the Job Container to resolve Job information 598ed88 Remove unused DispatchesJobs trait 93eec75 Add the API CallList Updater and Test 79f4a16 Add Code Climate f881d47 Update README aafe40f Update travis-ci to include newer PHP and HHVM d21e557 Add Travis-CI config 3da6a8e Add tests for the currently implemented calls 21a3f2d CS Fixes 82c0f51 Add Test to validate ServerStatus API Response 1ee3bb0 Small namespace change for the test 21be320 Start Testing! :) 6d0ed85 Throw an exception if an api key is empty 52ad9b7 Add Map Jumps Update worker 6c4bc86 Add Map Kills update worker 4720ae1 Fix job to actually update if something changes too 6d39cb2 Update Models defining new primary keys 377428b Modify Migration Indexes c753ad1 Add Map Sovereignty Update workers 187b336 Add AllianceList update 8fff877 Add ConquerableStationList updater a75c66e Add eve/errorlist API call b02dc11 Add Eve RefTypes API Call 9c61de8 Move Jobs error handling to a trait 8bc8a64 Implement the Job Tracker 0d0ab93 Add a job manager ca0a6d7 Add generated docblocks 086ebb5 Complete ServerStatus Update 8991564 Start core logic and add server status checker b6991b9 Start a few things to test job workers 40d4948 Start composer package af4f12f first commit","title":"1.0-pre-alpha"},{"location":"changelogs/notifications/","text":"notifications change logs Generated with: git log --oneline --decorate 1.0.4 c115945 (tag: 1.0.4) Version Bump 7b0cd6f Update copyright 23e89b1 Code style fix 1.0.3 d47b267 (tag: 1.0.3) Version Bump e0a5b53 Specify Versions with ~ 1.0.2 aedd78a (tag: 1.0.2) Version Bump a2e7ddf Add suport for lacalization 1.0.1 6594754 (tag: 1.0.1) Version Bump ccf7596 Update README.md 70994aa Add more complete message 1.0.0 15b1175 (tag: 1.0.0) Add views to see notifications fd76941 Fix typo a5f93e7 Update README c22a837 First iteration of the notification package 032bebf first commit","title":"Notifications"},{"location":"changelogs/notifications/#notifications-change-logs","text":"Generated with: git log --oneline --decorate","title":"notifications change logs"},{"location":"changelogs/notifications/#104","text":"c115945 (tag: 1.0.4) Version Bump 7b0cd6f Update copyright 23e89b1 Code style fix","title":"1.0.4"},{"location":"changelogs/notifications/#103","text":"d47b267 (tag: 1.0.3) Version Bump e0a5b53 Specify Versions with ~","title":"1.0.3"},{"location":"changelogs/notifications/#102","text":"aedd78a (tag: 1.0.2) Version Bump a2e7ddf Add suport for lacalization","title":"1.0.2"},{"location":"changelogs/notifications/#101","text":"6594754 (tag: 1.0.1) Version Bump ccf7596 Update README.md 70994aa Add more complete message","title":"1.0.1"},{"location":"changelogs/notifications/#100","text":"15b1175 (tag: 1.0.0) Add views to see notifications fd76941 Fix typo a5f93e7 Update README c22a837 First iteration of the notification package 032bebf first commit","title":"1.0.0"},{"location":"changelogs/services/","text":"services change logs Generated with: git log --oneline --decorate 1.0.22 a0a0c75 (tag: 1.0.22) Version Bump 02ad71e Seed the expired job time to run every 6 hours 1.0.21 0ad3ccf (tag: 1.0.21) Version Bump 1.0.20 cfcefda (tag: 1.0.20) Version Bump 7fa3040 Add missing import of CharacterSheetCorporationTitles b4a8080 Set available options and defaults for usage tracking b2765c6 Add analytics Jobs using Google Analytics measurement protocol. 9d23cb6 * Add corporation titles to character sheet (#7) 26c1673 Fix eveseat/seat#112 by using an advanced where to group the filter (actually eveseat/seat#122) 58cfc96 Add the `seat:queue:clear-expired` scheduled command 1.0.19 b2b9995 (tag: 1.0.19) Version Bump 744e982 Paginate Killmails 5711563 Paginate contracts. Part of the fix for eveseat/seat#111 1.0.18 b3d538d (tag: 1.0.18) Version Bump 305a3ab Sort killmails by newest first. 2edf0fd Add module info if a single starbases' info is called 1.0.17 e35f552 (tag: 1.0.17) Version Bump 10c4a86 Set default values for 'allow_sso' 1.0.16 439fbac (tag: 1.0.16) Version Bump ea240c7 Add defaults for minimum access mask checking settings d7b7eaf Add the search service ce085f7 Fix eveseat/seat#93 by filtering corporation_account_balances too 0c03b8e Modify timeline method to retrive one specific message 1.0.15 570bbd0 (tag: 1.0.15) Version Bump 630b8af Remove unused pagination and CS fixes cbc4206 Services for Corporation Ledger queries. (#5) b87d364 Order jobs by creation date 1.0.14 e4d521b (tag: 1.0.14) Version Bump 96c9fb5 Update copyright c9cd51c Ensure that people.view role is enforced 2f1e9e3 Add methods for People groups f7bb649 Handle some unicode characters for cases like eveseat/seat#13 0ad1ffa Code style fix 1.0.13 e33ed92 (tag: 1.0.13) Version Bump 582d719 Fix eveseat/seat#28 1.0.12 c3d9aaf (tag: 1.0.12) Version Bump bee194f Add method to get corporation customs offices 1.0.11 bb1cd45 (tag: 1.0.11) Version Bump 0d139b2 Allow starbase details to be loaded by starbase_id 1.0.10 e985e13 (tag: 1.0.10) Version Bump 9e75900 Revert version setting via ~ 1.0.9 cd3878c (tag: 1.0.9) Version Bump a0c30a9 Version Set via ^ 1.0.8 ebd21c7 (tag: 1.0.8) Version Bump e7a055d Set composer versions using ~ 08a50d8 Determine capacity bonus with tower aa51300 Temporarily ignore nested groups 5ff8e0a Add methods to get starbase related data 63e9be9 Return paginated results 1.0.7 5734db7 (tag: 1.0.7) Version Bump e221f72 Add method to get corp bookmarks 30699d3 Add method to get character bookmarks afd7cba Add method to get character chat channels 6ca677b Second attempt at fixing eveseat/seat#7 1.0.6 aa17e7d (tag: 1.0.6) Version Bump 691dc5c Prevent dupe or corp chars from showing 1b93322 Prevent duplicate entries in corp member tracking 1.0.5 af4abdc (tag: 1.0.5) Version Bump cda2f34 Default to english language ea02832 Add method to get mail timeline 28b0933 Suppress errors incase the html is invalid 012e0e6 Add method to get an email for a character 1.0.4 d087604 (tag: 1.0.4) Version Bump d3d6bd0 Add an admin contact setting a5b4135 Order jobs by date 1.0.3 e1c75bb (tag: 1.0.3) Version Bump 1.0.2 717f9fb (tag: 1.0.2) Add server status method f2172dc Update README.md 8b65137 Add default MFA setting 1.0.1 f32b199 (tag: 1.0.1) Version Bump 9a2fe0f Allow to get/set settings for another user by id 71504e9 Add default for email notifications 8109b5c Add service for database stored schedules d4afc21 Ensure we pass integers to the helper 1.0.0 300cdde (tag: 1.0.0) Update required eveseat package version 526493c Style Fixes and Version Bump 9ded93d Add registration options e5348f0 Update to support new settings features f601b60 Move options scope to public dcbd238 Add a setting() helper and provide some defaults 82115c2 Add a settings service c72cd8a Add methods to query corp security info 5371848 Add method to get corp member tracking 1.0-pre-alpha 93958d6 (tag: 1.0-pre-alpha) Update README 666036a Add method to get corp wallet transactions bcb36f7 Fix filter rule reference 5e579ec Add methods to get standings and wallet journal 91163b3 Fix a join bab5d59 Add method to get corp market orders 6b2734d Add method to get corp killmails 513c1e5 Add method to get corp industry jobs eb0b9d7 Add method to get corp contracts 3b2e7eb Add methods to get corp contacts & labels 057e1d4 Add method to get corp assets 907870a Add methods for corp summary pages c4a4977 Small refactor to remove attributes instead of making them blank 0b1ee7a Add method to cleanup CCP produced HTML 11e55c6 Add method to list corporations 3a76e64 Fix typo 02eea36 Add ability to just dump query and continue load c71ca03 Add method to get character standings be1c6db Add method to get character research info 7d0105c Add method to get character pi 6ea00fb Add methods to get character market orders 18e3580 Add method comments 4daabd8 Add method to get character industry 196e968 Add method to get contract information 3ad8de1 Add method to get killmails 2c5ca99 Lock type image to max 32/64px 0071fa7 Add character contact lists and calendar repositories 11ebe15 Add character notifications repo 52807cf Add the Notification Types Seeder 6560b34 Add rules to ensure columns can not be tampered with bb32b1b Add Character Assets services cc493be Style fixes 0e56275 Add Mail Service for Characters 6fa7631 Add Character Wallet Transactions Service bd1b364 Add Wallet Journal Services 22d7e6f Add option to auto-detect image types f899060 Rename method from Character->Eve d3f6fb7 Add more methods for character information 46910d1 Fix a table ambiguity problem for characterID 33463b9 Add more repository methods f75cd7c Add Services for Character Skills d35099a Add security repository 9bcb126 Add more methods for character info 71e3864 Add a number formatter 55a29d2 Add repositories to get character information 04df3b9 Add a query builder filterable helper 0fdea02 Add SQL debug helper 6e32c77 Add Respository to support the Queue 54cda05 Set extention correctly based on image type 4172206 Add a service to prepare lazy loaded <img> tags 89dfbb2 Add user modifiction services 30bdace Add repositories used in eveseat/web acl a8ff125 Update to match eveseat/eveapi Model refactor 4a69ce0 Add Config file ea84fb0 Add Queue Data Source 2f60e1d Add EveApiKeyData service 467fb42 Update badges 5779eff Prepare repository for packagist a46f437 Initial commit","title":"Services"},{"location":"changelogs/services/#services-change-logs","text":"Generated with: git log --oneline --decorate","title":"services change logs"},{"location":"changelogs/services/#1022","text":"a0a0c75 (tag: 1.0.22) Version Bump 02ad71e Seed the expired job time to run every 6 hours","title":"1.0.22"},{"location":"changelogs/services/#1021","text":"0ad3ccf (tag: 1.0.21) Version Bump","title":"1.0.21"},{"location":"changelogs/services/#1020","text":"cfcefda (tag: 1.0.20) Version Bump 7fa3040 Add missing import of CharacterSheetCorporationTitles b4a8080 Set available options and defaults for usage tracking b2765c6 Add analytics Jobs using Google Analytics measurement protocol. 9d23cb6 * Add corporation titles to character sheet (#7) 26c1673 Fix eveseat/seat#112 by using an advanced where to group the filter (actually eveseat/seat#122) 58cfc96 Add the `seat:queue:clear-expired` scheduled command","title":"1.0.20"},{"location":"changelogs/services/#1019","text":"b2b9995 (tag: 1.0.19) Version Bump 744e982 Paginate Killmails 5711563 Paginate contracts. Part of the fix for eveseat/seat#111","title":"1.0.19"},{"location":"changelogs/services/#1018","text":"b3d538d (tag: 1.0.18) Version Bump 305a3ab Sort killmails by newest first. 2edf0fd Add module info if a single starbases' info is called","title":"1.0.18"},{"location":"changelogs/services/#1017","text":"e35f552 (tag: 1.0.17) Version Bump 10c4a86 Set default values for 'allow_sso'","title":"1.0.17"},{"location":"changelogs/services/#1016","text":"439fbac (tag: 1.0.16) Version Bump ea240c7 Add defaults for minimum access mask checking settings d7b7eaf Add the search service ce085f7 Fix eveseat/seat#93 by filtering corporation_account_balances too 0c03b8e Modify timeline method to retrive one specific message","title":"1.0.16"},{"location":"changelogs/services/#1015","text":"570bbd0 (tag: 1.0.15) Version Bump 630b8af Remove unused pagination and CS fixes cbc4206 Services for Corporation Ledger queries. (#5) b87d364 Order jobs by creation date","title":"1.0.15"},{"location":"changelogs/services/#1014","text":"e4d521b (tag: 1.0.14) Version Bump 96c9fb5 Update copyright c9cd51c Ensure that people.view role is enforced 2f1e9e3 Add methods for People groups f7bb649 Handle some unicode characters for cases like eveseat/seat#13 0ad1ffa Code style fix","title":"1.0.14"},{"location":"changelogs/services/#1013","text":"e33ed92 (tag: 1.0.13) Version Bump 582d719 Fix eveseat/seat#28","title":"1.0.13"},{"location":"changelogs/services/#1012","text":"c3d9aaf (tag: 1.0.12) Version Bump bee194f Add method to get corporation customs offices","title":"1.0.12"},{"location":"changelogs/services/#1011","text":"bb1cd45 (tag: 1.0.11) Version Bump 0d139b2 Allow starbase details to be loaded by starbase_id","title":"1.0.11"},{"location":"changelogs/services/#1010","text":"e985e13 (tag: 1.0.10) Version Bump 9e75900 Revert version setting via ~","title":"1.0.10"},{"location":"changelogs/services/#109","text":"cd3878c (tag: 1.0.9) Version Bump a0c30a9 Version Set via ^","title":"1.0.9"},{"location":"changelogs/services/#108","text":"ebd21c7 (tag: 1.0.8) Version Bump e7a055d Set composer versions using ~ 08a50d8 Determine capacity bonus with tower aa51300 Temporarily ignore nested groups 5ff8e0a Add methods to get starbase related data 63e9be9 Return paginated results","title":"1.0.8"},{"location":"changelogs/services/#107","text":"5734db7 (tag: 1.0.7) Version Bump e221f72 Add method to get corp bookmarks 30699d3 Add method to get character bookmarks afd7cba Add method to get character chat channels 6ca677b Second attempt at fixing eveseat/seat#7","title":"1.0.7"},{"location":"changelogs/services/#106","text":"aa17e7d (tag: 1.0.6) Version Bump 691dc5c Prevent dupe or corp chars from showing 1b93322 Prevent duplicate entries in corp member tracking","title":"1.0.6"},{"location":"changelogs/services/#105","text":"af4abdc (tag: 1.0.5) Version Bump cda2f34 Default to english language ea02832 Add method to get mail timeline 28b0933 Suppress errors incase the html is invalid 012e0e6 Add method to get an email for a character","title":"1.0.5"},{"location":"changelogs/services/#104","text":"d087604 (tag: 1.0.4) Version Bump d3d6bd0 Add an admin contact setting a5b4135 Order jobs by date","title":"1.0.4"},{"location":"changelogs/services/#103","text":"e1c75bb (tag: 1.0.3) Version Bump","title":"1.0.3"},{"location":"changelogs/services/#102","text":"717f9fb (tag: 1.0.2) Add server status method f2172dc Update README.md 8b65137 Add default MFA setting","title":"1.0.2"},{"location":"changelogs/services/#101","text":"f32b199 (tag: 1.0.1) Version Bump 9a2fe0f Allow to get/set settings for another user by id 71504e9 Add default for email notifications 8109b5c Add service for database stored schedules d4afc21 Ensure we pass integers to the helper","title":"1.0.1"},{"location":"changelogs/services/#100","text":"300cdde (tag: 1.0.0) Update required eveseat package version 526493c Style Fixes and Version Bump 9ded93d Add registration options e5348f0 Update to support new settings features f601b60 Move options scope to public dcbd238 Add a setting() helper and provide some defaults 82115c2 Add a settings service c72cd8a Add methods to query corp security info 5371848 Add method to get corp member tracking","title":"1.0.0"},{"location":"changelogs/services/#10-pre-alpha","text":"93958d6 (tag: 1.0-pre-alpha) Update README 666036a Add method to get corp wallet transactions bcb36f7 Fix filter rule reference 5e579ec Add methods to get standings and wallet journal 91163b3 Fix a join bab5d59 Add method to get corp market orders 6b2734d Add method to get corp killmails 513c1e5 Add method to get corp industry jobs eb0b9d7 Add method to get corp contracts 3b2e7eb Add methods to get corp contacts & labels 057e1d4 Add method to get corp assets 907870a Add methods for corp summary pages c4a4977 Small refactor to remove attributes instead of making them blank 0b1ee7a Add method to cleanup CCP produced HTML 11e55c6 Add method to list corporations 3a76e64 Fix typo 02eea36 Add ability to just dump query and continue load c71ca03 Add method to get character standings be1c6db Add method to get character research info 7d0105c Add method to get character pi 6ea00fb Add methods to get character market orders 18e3580 Add method comments 4daabd8 Add method to get character industry 196e968 Add method to get contract information 3ad8de1 Add method to get killmails 2c5ca99 Lock type image to max 32/64px 0071fa7 Add character contact lists and calendar repositories 11ebe15 Add character notifications repo 52807cf Add the Notification Types Seeder 6560b34 Add rules to ensure columns can not be tampered with bb32b1b Add Character Assets services cc493be Style fixes 0e56275 Add Mail Service for Characters 6fa7631 Add Character Wallet Transactions Service bd1b364 Add Wallet Journal Services 22d7e6f Add option to auto-detect image types f899060 Rename method from Character->Eve d3f6fb7 Add more methods for character information 46910d1 Fix a table ambiguity problem for characterID 33463b9 Add more repository methods f75cd7c Add Services for Character Skills d35099a Add security repository 9bcb126 Add more methods for character info 71e3864 Add a number formatter 55a29d2 Add repositories to get character information 04df3b9 Add a query builder filterable helper 0fdea02 Add SQL debug helper 6e32c77 Add Respository to support the Queue 54cda05 Set extention correctly based on image type 4172206 Add a service to prepare lazy loaded <img> tags 89dfbb2 Add user modifiction services 30bdace Add repositories used in eveseat/web acl a8ff125 Update to match eveseat/eveapi Model refactor 4a69ce0 Add Config file ea84fb0 Add Queue Data Source 2f60e1d Add EveApiKeyData service 467fb42 Update badges 5779eff Prepare repository for packagist a46f437 Initial commit","title":"1.0-pre-alpha"},{"location":"changelogs/web/","text":"web change logs Generated with: git log --oneline --decorate 1.0.30 bc1f5ac (tag: 1.0.30) Version Bump 33b0e03 Update full api mask (#31) ec19039 Add link to analytics doc ccd332d Add ability to disable tracking completely. c7372e9 Add corporation titles to character sheet b527652 Add contact tracking links into character and corporation contact list (#30) 1.0.29 bc76609 (tag: 1.0.29) Version Bump 12a1229 Resolve names of affiliations. e1c82e3 Paginate character contracts and all killmails 91a5e98 Fix eveseat/seat#111 by paginating the results 3ac3699 Fix eveseat/seat#121 by adding a button to re-enable all keys a6a8897 Add warning about a autogenerated email from sso c66c68e Fix spacing 4aa702d Small codestyle related fixes 1cca04d Provide a way for user to change their email address (#27) e27d545 Adjusted setting (#26) 1.0.28 4e5225e (tag: 1.0.28) Version Bump 5b2443b FIx indentation f9b6ee8 Added total values to the Bounty Prizes and PI monthly ledgers. (#25) 21fc0d9 Remove logic that is now in the service repository. 1.0.27 7689032 (tag: 1.0.27) Version Bump c036c44 Update Provider with new method name. 1.0.26 981ccc4 (tag: 1.0.26) Version Bump 0796b2c Allow SSO to be enabled/disabled via the web interface. 7a605be Give accounts a temp email address and flag Sso created accounts 6efc9bf Add first support for the EVE Online SSO 1.0.25 168bb3e (tag: 1.0.25) Version Bump aee17af Add ability to force a minimum API access mask. 5101767 Start adding search functionality b8ac4fb Remove accountid as it is not useful data 8604036 Fix eveseat/seat#81 by validating for numeric instead of integers e1cd641 Fix eveseat/seat#78 by adding a link to view one mail only 60727e4 Warn if the default admin contact is still set. Ref eveseat/seat#77 a5d1f8f Fix eveseat/seat#65 by setting the key_id in the model 9884772 fix reinforcement time using API stateTimeStamp (#24) 1.0.24 c20194b (tag: 1.0.24) Version Bump eac101f CS Fixes f6e3186 Small refactoring and CS fixes 9997914 Adding Corporation Wallet Ledger (#23) 1.0.23 954c178 (tag: 1.0.23) Version Bump 498b868 Fix eveseat/seat#70 by ignoring the current users email in the constraint 8422602 Fix eveseat/seat#57 by adding missing language strings 1.0.22 cc8019a (tag: 1.0.22) Version Bump 0f02f88 Fix eveseat/seat#59 by adding a unique validation constraint c69fa2f Add button to easily re-enable keys 1.0.21 70783d8 (tag: 1.0.21) Version Bump c9188b7 Fix eveseat/seat#60 by using `firstOrNew` instead of create 98b9679 Fix eveseat/seat#51 by always showing the pagination 1.0.20 e2056a1 (tag: 1.0.20) Version Bump 92986b7 Remove pcntl requirement ad5f515 Merge pull request #21 from warlof/french 1.0.19 f212c78 (tag: 1.0.19) Version Bump d5376f9 Update Copyright 39c8243 Subclass the bouncers afb0be5 Add a People Groups feature 17c4f3e Set queue status update time via configuration 5d30ff0 Fix eveseat/seat#48 by adding data-order attributes 530c268 Add a check for loaded modules and php version c84baaa Merge pull request #18 from warlof/ticket38 e4e1fd0 Merge pull request #20 from warlof/ticket43 94e470d (origin/pr/18) Fix wishlist #38 eveseat/seat#38 21a3bb3 (origin/pr/20) Fix issue eveseat/seat issues#43 - Update calc formula - Adding ceil in order to get round item unit (ccp like) 274409b Use league/csv to parse CSV's instead of the homebrew 741755d Remove unnecessary re-fetch of model data b7ff1a2 Fix eveseat/seat#39 by changing ownership of an existing key. 8fcc13e Remove footer. Datatables will count the keys b357826 Code formatting fixes d5f58de Merge pull request #19 from Cynabal/master 7a78e2f Merge pull request #17 from warlof/french 9d2ab0f (origin/pr/19) Update seat.php 86da25f (origin/pr/17) New translation according to v1.0.18 1.0.18 69239bf (tag: 1.0.18) Version Bump 33470ce Allow packages to hook into corporation menus 24c9f1d Only attempt to read package menus if they are defined 3b7ecad Allow packages to hook into character menus bac4a6e Add Datatables to starbase summary 1.0.17 ec9d5c8 (tag: 1.0.17) Version Bump aaaac36 Fix eveseat/seat#29 6de7e1e Add Datatables for tables. 1.0.16 075784c (tag: 1.0.16) Version Bump b688c4f Add planet type icons 54ccdec Add corporation Pocos view 1.0.15 bbede7b (tag: 1.0.15) Version Bump 63f308a Load starbase modules via Ajax calls c0f48df Display page render time 1.0.14 3f8587c (tag: 1.0.14) Version Bump 14d87b4 Merge pull request #13 from warlof/ticket5 d412b7e Excluse Towers themselves from module views 98a8e19 Use a macro for progressbar generation c0e9ce3 Remove unused variables 22932b4 Refactor Starbase views mostly for performance reasons 0cefaac fix issue #5 about labels display on neutral and negative standing 1.0.13 936e8b8 (tag: 1.0.13) Fix a assets check, add missing string and Version Bump 1.0.12 7bdbf10 (tag: 1.0.12) Version Bump 6c365ad Specify versions with ~ 3f604e2 Merge pull request #11 from warlof/french c1f4657 add new translations according to recent commits (for 1.0.12) ed485b3 Move strontium usage to its own string for easier translation 64a6f86 Take into account bonusses silo/coupling array capacities 488fd3b Merge pull request #8 from warlof/unknown-item cd66a8a Add Starbase details views f9dc521 fix issue #9 9f74d1c Add more details about starbases 7e67371 First pass at adding starbase views 9496188 Merge pull request #6 from warlof/french 2491e69 Translate SeAT in french according to 1.0.11 f5fa4e3 Show timestampts and paginate wallet info c6b4311 Fix eveseat/seat#15 1.0.11 ca67d0a (tag: 1.0.11) Version Bump 78da260 Add ability to view corporation bookmarks eda1260 Add ability to view character bookmarks 8e1285e Add ability to view character channels 1.0.10 5aebf1e (tag: 1.0.10) Allow French to be chosen and Version Bump dae1719 Merge pull request #5 from warlof/french 6e827ae Translate SeAT in french according to 1.0.9 1.0.9 9e4cd79 (tag: 1.0.9) Add account info check and Version Bump bfaabe2 Merge pull request #4 from freedenizen/master d802b98 add updated_at timestamps to Character and Corporation Sheet summary 1.0.8 0ece0ce (tag: 1.0.8) Version Bump 616067c Check if we have data before attempting to display 99c14a3 Fix eveseat/seat#10 1.0.7 660b6fa (tag: 1.0.7) Version Bump b65aa7e Remove URI scheme 639b3fb Add missing language definition for view 1.0.6 2042098 (tag: 1.0.6) Version Bump 83a7ea8 Add Afrikaans language support 0039045 Add ability to select a preferred language 30a71e6 Update langauge strings 2956a15 Resolve contract issuerID's to names 36ea925 Apply number() to a few values 40e5c24 Add ability to view profile login/logout history a8e93d7 Add for user password resets 81682c4 Add recipient info into the mail timeline cc141c8 Add id-to-name helper 6999007 Add X-CSRF Token for ajax calls 6915fec Add the mail timeline view 5ade565 Add ability to view character email 1.0.5 df6ddae (tag: 1.0.5) Version Bump 14bc397 Add ability to set an admin contact 5e6498b Add links to external services f819124 Show output of jobs 070c232 Show eveapi errors status 80775e2 Allows superusers to transfer keys to other owners 1.0.4 4aab9b8 (tag: 1.0.4) Version Bump 1.0.3 bc8e6eb (tag: 1.0.3) Start something for a dashboard 0238e32 Update README.md 73d415d Add optional Google Two-Factor TOTP support. 84723ff Merge pull request #3 from Cynabal/patch-1 2d98ead Update add.blade.php 1.0.2 7fcac57 (tag: 1.0.2) Version Bump 020c885 Add notifications version f9fdaf6 Dont force packages to set a permission 5d1bb8c Add email notifications setting and new email templates 4bade0d Auto update copyright year 9eba303 Add WebUI to manage schedules 1.0.1 4598815 (tag: 1.0.1) Version Bump 2c683ba Dont force a package to have a sub-menu 6c13e32 Resolve menu routes in the sidebar view. e8f3237 Add api version display 0f6d4ec First pass in allowing packages to add menu items fe117ce Add hasRole() method be056a9 Fix #2 1.0.0 e885f07 (tag: 1.0.0) Style fixes and version Bump fddc5ba Add SeAT Settings Page with registration toggle 30b2b9c Add more settings options bb6e8ed Add ability to change SeAT theme. 8dbb713 Read skin ccs filename from settings() 67d823c Read some values from settings 91872a1 Remove unused HTML and fix brand route 3ec66f3 Reduce icon size and add corp icons e78c62f Add more complete corp security views 13f6c9d Add ability to view corp member tracking 1.0-pre-alpha 6332cd7 (tag: 1.0-pre-alpha) Update README a48340a Login using names instead of emails 2dfdc27 Add ability to view corp wallet transactions 06c4741 Add ability to view corp wallet journals 97547a7 Add ability to view corp standings 1a825e0 Add ability to view corp market orders bab5d6a Add ability to view corp killmails 26923cc Add ability to view corporation industry jobs fc43803 Add ability to view corporation contracts a386881 Add ability to view corp contacts 110b142 Add ability to view corporation assets 2b9dd85 Add ability to view corp summary 0bf5bdc First work on corporation views. 5114d4f Resolve a trait method conflict 5eaffdc Add ability to mass import keys via CSV files 17feb08 Add ability to view character standings 797c9f0 Add ability to view character research info 771ee34 Add ability to view character PI 0fcb7de Add ability to view character market orders a6b7ac6 Add ability to view character industry c020c36 Small UI refactor to make it cleaner 0d5e18a Add character contract view f36e34b Add ability to view character killmails 45e8dd5 Link to character details 08d1d48 Add character contacts view dc3a396 Add character calendar view 085368f Add character notifications view 04ca0ee Add filter rules. ccc5ad2 Add Character Assets View c748d29 Add table-responsive 9aaa7ae Add Character Mail View f046272 Add Character Wallet Transaction View 1ae69e0 Add Character Wallet Journal View 814a95d Rename method from EveRepository 5d9cfc1 Add Implants, Jump Fatigue and Clone info ac83d39 Minor formatting changes 3631b89 Re-arrange character details layout e23a153 Add more character sheet info and shuffle a few things around c414bb2 Create a base view for character detail views d3fc448 Add Character Skills view 51caf72 Add Security logging and viewing abilities 7debd56 Start the Character Viewer 5bfbed0 Small responsive fixes 4cf03ed Add All Characters View 51ccf46 Add hasAny() 12e05de Split permissions into categories 50a68ab Add a view into the Job Queue as well as some management 0da342b Add live queue status updates b9df4c4 Fix cases where keys with missing info would throw errors 9faffab Remove usage of the Redirect Facade 2250508 Add ability to manually start a job update 3e34b3e Add key detail viewer and introduce the keybouncer 85bf567 Add ability ti list and delete API keys 2fe3d76 Add lazy image loading support ee21c49 Style fixes 1de991a Add ability to add new Api Keys 358ba7f Make sidebar permissions aware 41190e6 Introduce the Bouncer and hes AccessChecker \ud83d\udeaa c2edc6b Use auth() helper instead of Auth Facade 2a864dc Fix some inconsistency with edit/updater user lang e473bba Swap input for has to read better 5e65509 Allow for users to be quick added 89ca4e1 Allow for the account status to be filled 05e6019 Resize grid to match other configuration views fdeb2cc Rename menu entry to match page title 7a03e34 Complete the impersonation feature 6195979 Add ability to delete users 0675ef9 Cleanup when a user is deleted 4c58659 Allow for users to be modified a3f1882 Add a basic summary of user roles and affiliations f03f872 Localize flash messages on perm/role changes 679b020 Fix typo in affiliation form request validator 2e656a8 First iteration of Acl methods and web structuring. e8c4343 Highlight submenu items based on URL match b6cd2b9 Have the sidebar honor the Locale 1f91ef0 Add view composer to build the sidebar menu 3425769 Add a User view composer 3e72326 Restructure Service Provider 4aa96f5 Fix duplicate 'reset' translation key 1160deb Use class property 22c7747 Add password reset functionality 9377f67 Add README f16a71d Start web interface 3f15794 Initial commit","title":"Web"},{"location":"changelogs/web/#web-change-logs","text":"Generated with: git log --oneline --decorate","title":"web change logs"},{"location":"changelogs/web/#1030","text":"bc1f5ac (tag: 1.0.30) Version Bump 33b0e03 Update full api mask (#31) ec19039 Add link to analytics doc ccd332d Add ability to disable tracking completely. c7372e9 Add corporation titles to character sheet b527652 Add contact tracking links into character and corporation contact list (#30)","title":"1.0.30"},{"location":"changelogs/web/#1029","text":"bc76609 (tag: 1.0.29) Version Bump 12a1229 Resolve names of affiliations. e1c82e3 Paginate character contracts and all killmails 91a5e98 Fix eveseat/seat#111 by paginating the results 3ac3699 Fix eveseat/seat#121 by adding a button to re-enable all keys a6a8897 Add warning about a autogenerated email from sso c66c68e Fix spacing 4aa702d Small codestyle related fixes 1cca04d Provide a way for user to change their email address (#27) e27d545 Adjusted setting (#26)","title":"1.0.29"},{"location":"changelogs/web/#1028","text":"4e5225e (tag: 1.0.28) Version Bump 5b2443b FIx indentation f9b6ee8 Added total values to the Bounty Prizes and PI monthly ledgers. (#25) 21fc0d9 Remove logic that is now in the service repository.","title":"1.0.28"},{"location":"changelogs/web/#1027","text":"7689032 (tag: 1.0.27) Version Bump c036c44 Update Provider with new method name.","title":"1.0.27"},{"location":"changelogs/web/#1026","text":"981ccc4 (tag: 1.0.26) Version Bump 0796b2c Allow SSO to be enabled/disabled via the web interface. 7a605be Give accounts a temp email address and flag Sso created accounts 6efc9bf Add first support for the EVE Online SSO","title":"1.0.26"},{"location":"changelogs/web/#1025","text":"168bb3e (tag: 1.0.25) Version Bump aee17af Add ability to force a minimum API access mask. 5101767 Start adding search functionality b8ac4fb Remove accountid as it is not useful data 8604036 Fix eveseat/seat#81 by validating for numeric instead of integers e1cd641 Fix eveseat/seat#78 by adding a link to view one mail only 60727e4 Warn if the default admin contact is still set. Ref eveseat/seat#77 a5d1f8f Fix eveseat/seat#65 by setting the key_id in the model 9884772 fix reinforcement time using API stateTimeStamp (#24)","title":"1.0.25"},{"location":"changelogs/web/#1024","text":"c20194b (tag: 1.0.24) Version Bump eac101f CS Fixes f6e3186 Small refactoring and CS fixes 9997914 Adding Corporation Wallet Ledger (#23)","title":"1.0.24"},{"location":"changelogs/web/#1023","text":"954c178 (tag: 1.0.23) Version Bump 498b868 Fix eveseat/seat#70 by ignoring the current users email in the constraint 8422602 Fix eveseat/seat#57 by adding missing language strings","title":"1.0.23"},{"location":"changelogs/web/#1022","text":"cc8019a (tag: 1.0.22) Version Bump 0f02f88 Fix eveseat/seat#59 by adding a unique validation constraint c69fa2f Add button to easily re-enable keys","title":"1.0.22"},{"location":"changelogs/web/#1021","text":"70783d8 (tag: 1.0.21) Version Bump c9188b7 Fix eveseat/seat#60 by using `firstOrNew` instead of create 98b9679 Fix eveseat/seat#51 by always showing the pagination","title":"1.0.21"},{"location":"changelogs/web/#1020","text":"e2056a1 (tag: 1.0.20) Version Bump 92986b7 Remove pcntl requirement ad5f515 Merge pull request #21 from warlof/french","title":"1.0.20"},{"location":"changelogs/web/#1019","text":"f212c78 (tag: 1.0.19) Version Bump d5376f9 Update Copyright 39c8243 Subclass the bouncers afb0be5 Add a People Groups feature 17c4f3e Set queue status update time via configuration 5d30ff0 Fix eveseat/seat#48 by adding data-order attributes 530c268 Add a check for loaded modules and php version c84baaa Merge pull request #18 from warlof/ticket38 e4e1fd0 Merge pull request #20 from warlof/ticket43 94e470d (origin/pr/18) Fix wishlist #38 eveseat/seat#38 21a3bb3 (origin/pr/20) Fix issue eveseat/seat issues#43 - Update calc formula - Adding ceil in order to get round item unit (ccp like) 274409b Use league/csv to parse CSV's instead of the homebrew 741755d Remove unnecessary re-fetch of model data b7ff1a2 Fix eveseat/seat#39 by changing ownership of an existing key. 8fcc13e Remove footer. Datatables will count the keys b357826 Code formatting fixes d5f58de Merge pull request #19 from Cynabal/master 7a78e2f Merge pull request #17 from warlof/french 9d2ab0f (origin/pr/19) Update seat.php 86da25f (origin/pr/17) New translation according to v1.0.18","title":"1.0.19"},{"location":"changelogs/web/#1018","text":"69239bf (tag: 1.0.18) Version Bump 33470ce Allow packages to hook into corporation menus 24c9f1d Only attempt to read package menus if they are defined 3b7ecad Allow packages to hook into character menus bac4a6e Add Datatables to starbase summary","title":"1.0.18"},{"location":"changelogs/web/#1017","text":"ec9d5c8 (tag: 1.0.17) Version Bump aaaac36 Fix eveseat/seat#29 6de7e1e Add Datatables for tables.","title":"1.0.17"},{"location":"changelogs/web/#1016","text":"075784c (tag: 1.0.16) Version Bump b688c4f Add planet type icons 54ccdec Add corporation Pocos view","title":"1.0.16"},{"location":"changelogs/web/#1015","text":"bbede7b (tag: 1.0.15) Version Bump 63f308a Load starbase modules via Ajax calls c0f48df Display page render time","title":"1.0.15"},{"location":"changelogs/web/#1014","text":"3f8587c (tag: 1.0.14) Version Bump 14d87b4 Merge pull request #13 from warlof/ticket5 d412b7e Excluse Towers themselves from module views 98a8e19 Use a macro for progressbar generation c0e9ce3 Remove unused variables 22932b4 Refactor Starbase views mostly for performance reasons 0cefaac fix issue #5 about labels display on neutral and negative standing","title":"1.0.14"},{"location":"changelogs/web/#1013","text":"936e8b8 (tag: 1.0.13) Fix a assets check, add missing string and Version Bump","title":"1.0.13"},{"location":"changelogs/web/#1012","text":"7bdbf10 (tag: 1.0.12) Version Bump 6c365ad Specify versions with ~ 3f604e2 Merge pull request #11 from warlof/french c1f4657 add new translations according to recent commits (for 1.0.12) ed485b3 Move strontium usage to its own string for easier translation 64a6f86 Take into account bonusses silo/coupling array capacities 488fd3b Merge pull request #8 from warlof/unknown-item cd66a8a Add Starbase details views f9dc521 fix issue #9 9f74d1c Add more details about starbases 7e67371 First pass at adding starbase views 9496188 Merge pull request #6 from warlof/french 2491e69 Translate SeAT in french according to 1.0.11 f5fa4e3 Show timestampts and paginate wallet info c6b4311 Fix eveseat/seat#15","title":"1.0.12"},{"location":"changelogs/web/#1011","text":"ca67d0a (tag: 1.0.11) Version Bump 78da260 Add ability to view corporation bookmarks eda1260 Add ability to view character bookmarks 8e1285e Add ability to view character channels","title":"1.0.11"},{"location":"changelogs/web/#1010","text":"5aebf1e (tag: 1.0.10) Allow French to be chosen and Version Bump dae1719 Merge pull request #5 from warlof/french 6e827ae Translate SeAT in french according to 1.0.9","title":"1.0.10"},{"location":"changelogs/web/#109","text":"9e4cd79 (tag: 1.0.9) Add account info check and Version Bump bfaabe2 Merge pull request #4 from freedenizen/master d802b98 add updated_at timestamps to Character and Corporation Sheet summary","title":"1.0.9"},{"location":"changelogs/web/#108","text":"0ece0ce (tag: 1.0.8) Version Bump 616067c Check if we have data before attempting to display 99c14a3 Fix eveseat/seat#10","title":"1.0.8"},{"location":"changelogs/web/#107","text":"660b6fa (tag: 1.0.7) Version Bump b65aa7e Remove URI scheme 639b3fb Add missing language definition for view","title":"1.0.7"},{"location":"changelogs/web/#106","text":"2042098 (tag: 1.0.6) Version Bump 83a7ea8 Add Afrikaans language support 0039045 Add ability to select a preferred language 30a71e6 Update langauge strings 2956a15 Resolve contract issuerID's to names 36ea925 Apply number() to a few values 40e5c24 Add ability to view profile login/logout history a8e93d7 Add for user password resets 81682c4 Add recipient info into the mail timeline cc141c8 Add id-to-name helper 6999007 Add X-CSRF Token for ajax calls 6915fec Add the mail timeline view 5ade565 Add ability to view character email","title":"1.0.6"},{"location":"changelogs/web/#105","text":"df6ddae (tag: 1.0.5) Version Bump 14bc397 Add ability to set an admin contact 5e6498b Add links to external services f819124 Show output of jobs 070c232 Show eveapi errors status 80775e2 Allows superusers to transfer keys to other owners","title":"1.0.5"},{"location":"changelogs/web/#104","text":"4aab9b8 (tag: 1.0.4) Version Bump","title":"1.0.4"},{"location":"changelogs/web/#103","text":"bc8e6eb (tag: 1.0.3) Start something for a dashboard 0238e32 Update README.md 73d415d Add optional Google Two-Factor TOTP support. 84723ff Merge pull request #3 from Cynabal/patch-1 2d98ead Update add.blade.php","title":"1.0.3"},{"location":"changelogs/web/#102","text":"7fcac57 (tag: 1.0.2) Version Bump 020c885 Add notifications version f9fdaf6 Dont force packages to set a permission 5d1bb8c Add email notifications setting and new email templates 4bade0d Auto update copyright year 9eba303 Add WebUI to manage schedules","title":"1.0.2"},{"location":"changelogs/web/#101","text":"4598815 (tag: 1.0.1) Version Bump 2c683ba Dont force a package to have a sub-menu 6c13e32 Resolve menu routes in the sidebar view. e8f3237 Add api version display 0f6d4ec First pass in allowing packages to add menu items fe117ce Add hasRole() method be056a9 Fix #2","title":"1.0.1"},{"location":"changelogs/web/#100","text":"e885f07 (tag: 1.0.0) Style fixes and version Bump fddc5ba Add SeAT Settings Page with registration toggle 30b2b9c Add more settings options bb6e8ed Add ability to change SeAT theme. 8dbb713 Read skin ccs filename from settings() 67d823c Read some values from settings 91872a1 Remove unused HTML and fix brand route 3ec66f3 Reduce icon size and add corp icons e78c62f Add more complete corp security views 13f6c9d Add ability to view corp member tracking","title":"1.0.0"},{"location":"changelogs/web/#10-pre-alpha","text":"6332cd7 (tag: 1.0-pre-alpha) Update README a48340a Login using names instead of emails 2dfdc27 Add ability to view corp wallet transactions 06c4741 Add ability to view corp wallet journals 97547a7 Add ability to view corp standings 1a825e0 Add ability to view corp market orders bab5d6a Add ability to view corp killmails 26923cc Add ability to view corporation industry jobs fc43803 Add ability to view corporation contracts a386881 Add ability to view corp contacts 110b142 Add ability to view corporation assets 2b9dd85 Add ability to view corp summary 0bf5bdc First work on corporation views. 5114d4f Resolve a trait method conflict 5eaffdc Add ability to mass import keys via CSV files 17feb08 Add ability to view character standings 797c9f0 Add ability to view character research info 771ee34 Add ability to view character PI 0fcb7de Add ability to view character market orders a6b7ac6 Add ability to view character industry c020c36 Small UI refactor to make it cleaner 0d5e18a Add character contract view f36e34b Add ability to view character killmails 45e8dd5 Link to character details 08d1d48 Add character contacts view dc3a396 Add character calendar view 085368f Add character notifications view 04ca0ee Add filter rules. ccc5ad2 Add Character Assets View c748d29 Add table-responsive 9aaa7ae Add Character Mail View f046272 Add Character Wallet Transaction View 1ae69e0 Add Character Wallet Journal View 814a95d Rename method from EveRepository 5d9cfc1 Add Implants, Jump Fatigue and Clone info ac83d39 Minor formatting changes 3631b89 Re-arrange character details layout e23a153 Add more character sheet info and shuffle a few things around c414bb2 Create a base view for character detail views d3fc448 Add Character Skills view 51caf72 Add Security logging and viewing abilities 7debd56 Start the Character Viewer 5bfbed0 Small responsive fixes 4cf03ed Add All Characters View 51ccf46 Add hasAny() 12e05de Split permissions into categories 50a68ab Add a view into the Job Queue as well as some management 0da342b Add live queue status updates b9df4c4 Fix cases where keys with missing info would throw errors 9faffab Remove usage of the Redirect Facade 2250508 Add ability to manually start a job update 3e34b3e Add key detail viewer and introduce the keybouncer 85bf567 Add ability ti list and delete API keys 2fe3d76 Add lazy image loading support ee21c49 Style fixes 1de991a Add ability to add new Api Keys 358ba7f Make sidebar permissions aware 41190e6 Introduce the Bouncer and hes AccessChecker \ud83d\udeaa c2edc6b Use auth() helper instead of Auth Facade 2a864dc Fix some inconsistency with edit/updater user lang e473bba Swap input for has to read better 5e65509 Allow for users to be quick added 89ca4e1 Allow for the account status to be filled 05e6019 Resize grid to match other configuration views fdeb2cc Rename menu entry to match page title 7a03e34 Complete the impersonation feature 6195979 Add ability to delete users 0675ef9 Cleanup when a user is deleted 4c58659 Allow for users to be modified a3f1882 Add a basic summary of user roles and affiliations f03f872 Localize flash messages on perm/role changes 679b020 Fix typo in affiliation form request validator 2e656a8 First iteration of Acl methods and web structuring. e8c4343 Highlight submenu items based on URL match b6cd2b9 Have the sidebar honor the Locale 1f91ef0 Add view composer to build the sidebar menu 3425769 Add a User view composer 3e72326 Restructure Service Provider 4aa96f5 Fix duplicate 'reset' translation key 1160deb Use class property 22c7747 Add password reset functionality 9377f67 Add README f16a71d Start web interface 3f15794 Initial commit","title":"1.0-pre-alpha"},{"location":"configuration/api/","text":"Package : eveseat/api Config : here File: api.config.php return [ 'log_requests' => true ]; Options log_requests Specify whether requests to the SeAT API should be logged.","title":"Api"},{"location":"configuration/api/#file-apiconfigphp","text":"return [ 'log_requests' => true ];","title":"File: api.config.php"},{"location":"configuration/api/#options","text":"log_requests Specify whether requests to the SeAT API should be logged.","title":"Options"},{"location":"configuration/console/","text":"Package : eveseat/console Config : here File: console.config.php return [ ]; Options","title":"Console"},{"location":"configuration/console/#file-consoleconfigphp","text":"return [ ];","title":"File: console.config.php"},{"location":"configuration/console/#options","text":"","title":"Options"},{"location":"configuration/eveapi/","text":"Package : eveseat/eveapi Config : here File: eveapi.config.php return [ 'enable_joblog' => true, 'pheal' => [ 'cache_path' => storage_path() . '/app/pheal/', 'log_file' => storage_path('logs/pheal.log') ], 'cache_keys' => [ 'down' => 'eve_api_down', 'down_until' => 'eve_api_down_until', 'api_error_count' => 'eve_api_error_count', 'connection_error_count' => 'eve_api_conn_error_count' ], 'limits' => [ 'eveapi_errors' => 150, 'connection_errors' => 15 ], 'disabled_workers' => [ 'api' => [], 'character' => [ // Seat\\Eveapi\\Api\\Character\\AccountBalance::class, ], 'corporation' => [], 'eve' => [], 'map' => [], 'server' => [] ] ]; Options enable_joblog Specify wether job progress should be loggged to the joblog table. pheal.cache_path Specify the path to use for the Pheal XML cache. This cache is used to write the downloaded XML files for later retrieval if the cached_until timers have not yet expired. pheal.log_file Specify the log file to write Pheal access and error logs to. cache_keys.down The cache key to use when referring to the EVE API Down status cache_keys.down_until The cache key to use when updating the down until time for the EVE API. cache_keys.api_error_count The cache key to use when counting the number of eve api errors that have occurred. cache_keys.connection_error_count The cache key to use when counting the number of connection errors that have occurred. limits.eveapi_errors The maximum number of EVE API errors that may occur before the EVE API will be considered down for a while. limits.connection_errors The maximum number of connections errors that may occur to the EVE API before it will be considered down for a while. For a reference of which workers are available for the next disabled_workers section, see the definition here disabled_workers.api An array of Seat\\Eveapi\\Api\\Api worker classes that should not be run. disabled_workers.character An array of Seat\\Eveapi\\Api\\Character worker classes that should not be run. disabled_workers.corporation An array of Seat\\Eveapi\\Api\\Corporation worker classes that should not be run. disabled_workers.eve An array of Seat\\Eveapi\\Api\\Eve worker classes that should not be run. disabled_workers.map An array of Seat\\Eveapi\\Api\\Map worker classes that should not be run. disabled_workers.server An array of Seat\\Eveapi\\Api\\Server worker classes that should not be run.","title":"Eveapi"},{"location":"configuration/eveapi/#file-eveapiconfigphp","text":"return [ 'enable_joblog' => true, 'pheal' => [ 'cache_path' => storage_path() . '/app/pheal/', 'log_file' => storage_path('logs/pheal.log') ], 'cache_keys' => [ 'down' => 'eve_api_down', 'down_until' => 'eve_api_down_until', 'api_error_count' => 'eve_api_error_count', 'connection_error_count' => 'eve_api_conn_error_count' ], 'limits' => [ 'eveapi_errors' => 150, 'connection_errors' => 15 ], 'disabled_workers' => [ 'api' => [], 'character' => [ // Seat\\Eveapi\\Api\\Character\\AccountBalance::class, ], 'corporation' => [], 'eve' => [], 'map' => [], 'server' => [] ] ];","title":"File: eveapi.config.php"},{"location":"configuration/eveapi/#options","text":"enable_joblog Specify wether job progress should be loggged to the joblog table. pheal.cache_path Specify the path to use for the Pheal XML cache. This cache is used to write the downloaded XML files for later retrieval if the cached_until timers have not yet expired. pheal.log_file Specify the log file to write Pheal access and error logs to. cache_keys.down The cache key to use when referring to the EVE API Down status cache_keys.down_until The cache key to use when updating the down until time for the EVE API. cache_keys.api_error_count The cache key to use when counting the number of eve api errors that have occurred. cache_keys.connection_error_count The cache key to use when counting the number of connection errors that have occurred. limits.eveapi_errors The maximum number of EVE API errors that may occur before the EVE API will be considered down for a while. limits.connection_errors The maximum number of connections errors that may occur to the EVE API before it will be considered down for a while. For a reference of which workers are available for the next disabled_workers section, see the definition here disabled_workers.api An array of Seat\\Eveapi\\Api\\Api worker classes that should not be run. disabled_workers.character An array of Seat\\Eveapi\\Api\\Character worker classes that should not be run. disabled_workers.corporation An array of Seat\\Eveapi\\Api\\Corporation worker classes that should not be run. disabled_workers.eve An array of Seat\\Eveapi\\Api\\Eve worker classes that should not be run. disabled_workers.map An array of Seat\\Eveapi\\Api\\Map worker classes that should not be run. disabled_workers.server An array of Seat\\Eveapi\\Api\\Server worker classes that should not be run.","title":"Options"},{"location":"configuration/notifications/","text":"Package : eveseat/notifications Config : here File: notifications.config.php return [ ]; Options File: notifications.notifiers.php return [ Seat\\Notifications\\Notifiers\\EmailNotifier::class ]; Options This configuration file simply returns an array of notifier classes.","title":"Notifications"},{"location":"configuration/notifications/#file-notificationsconfigphp","text":"return [ ];","title":"File: notifications.config.php"},{"location":"configuration/notifications/#options","text":"","title":"Options"},{"location":"configuration/notifications/#file-notificationsnotifiersphp","text":"return [ Seat\\Notifications\\Notifiers\\EmailNotifier::class ];","title":"File: notifications.notifiers.php"},{"location":"configuration/notifications/#options_1","text":"This configuration file simply returns an array of notifier classes.","title":"Options"},{"location":"configuration/other/","text":"SeAT sources information about the SDE from a json file hosted here . It may happen that the SDE gets updated but the the json resource has not yet been updated. For this reason, its possible to specify the version to get based on what is available on https://www.fuzzwork.co.uk/dump/ . overriding the resources json Check the version of SDE dumps available on https://www.fuzzwork.co.uk/dump/ . At the time of this writing, frostline-1.0-116241 was the latest. Once you have the version string ready, open the .env configuration file and add a key as follows: SDE_VERSION=frostline-1.0-116241 When running the SDE updater, specify the --local parameter to source the version string from the configuration file: $ php artisan eve:update-sde --local notes By default, SeAT automatically updates the SDE every month . You may want to login as an administrator and remove the schedule to update it monthly if you have overridden the default.","title":"Other"},{"location":"configuration/other/#overriding-the-resources-json","text":"Check the version of SDE dumps available on https://www.fuzzwork.co.uk/dump/ . At the time of this writing, frostline-1.0-116241 was the latest. Once you have the version string ready, open the .env configuration file and add a key as follows: SDE_VERSION=frostline-1.0-116241 When running the SDE updater, specify the --local parameter to source the version string from the configuration file: $ php artisan eve:update-sde --local","title":"overriding the resources json"},{"location":"configuration/other/#notes","text":"By default, SeAT automatically updates the SDE every month . You may want to login as an administrator and remove the schedule to update it monthly if you have overridden the default.","title":"notes"},{"location":"configuration/overview/","text":"This page aims to give a brief overview of how configuration is handled in SeAT and its packages. To give some perspective, we have to have a quick look at how packages are built and bootstrapped. quick-n-dirty-package summary All of SeAT's core internals are built as packages. This means, every package has a service provider. All a service provider really is, is a class with 2 methods ie: handle() and register() . When a service provider is bootstrapped into the application, these 2 methods are called at some stage. It is in these methods that we tell the Laravel framework more about our package. Amongst many things that we can tell it, one of them is configuration related. All we really telling the application is where the configuration file is, and under which namespace does it live. Another important fact is that SeAT package configurations are added with the mergeConfigFrom() method. This means, you can override the defaults in your installation without worrying about breaking the package itself. overriding configuration Lets take a look at a sample package configuration file: The eveseat/web package for example. At the time of this writing, it has 2 configuration options. The first being a version , the next being max_access_mask . When this package is installed, this configuration file will live somewhere deep inside your vendor folder. Changing the value there is not impossible, but it will be lost with the next package upgrade. The better method will be to override the change locally, inside you config/ folder here . an example, changing max_access_mask To start, create the file web.config.php inside the config folder. Next, we add the contents in the file to return an array, specifying the max_access_mask key and its new value. The file would look something like this: <?php // File: config/web.config.php return [ 'max_access_mask' => 123456 ]; Thats it. The configuration should now have been overridden.","title":"Overview"},{"location":"configuration/overview/#quick-n-dirty-package-summary","text":"All of SeAT's core internals are built as packages. This means, every package has a service provider. All a service provider really is, is a class with 2 methods ie: handle() and register() . When a service provider is bootstrapped into the application, these 2 methods are called at some stage. It is in these methods that we tell the Laravel framework more about our package. Amongst many things that we can tell it, one of them is configuration related. All we really telling the application is where the configuration file is, and under which namespace does it live. Another important fact is that SeAT package configurations are added with the mergeConfigFrom() method. This means, you can override the defaults in your installation without worrying about breaking the package itself.","title":"quick-n-dirty-package summary"},{"location":"configuration/overview/#overriding-configuration","text":"Lets take a look at a sample package configuration file: The eveseat/web package for example. At the time of this writing, it has 2 configuration options. The first being a version , the next being max_access_mask . When this package is installed, this configuration file will live somewhere deep inside your vendor folder. Changing the value there is not impossible, but it will be lost with the next package upgrade. The better method will be to override the change locally, inside you config/ folder here .","title":"overriding configuration"},{"location":"configuration/overview/#an-example-changing-max_access_mask","text":"To start, create the file web.config.php inside the config folder. Next, we add the contents in the file to return an array, specifying the max_access_mask key and its new value. The file would look something like this: <?php // File: config/web.config.php return [ 'max_access_mask' => 123456 ]; Thats it. The configuration should now have been overridden.","title":"an example, changing max_access_mask"},{"location":"configuration/service/","text":"Package : eveseat/services Config : here File: services.config.php return [ ]; Options","title":"Service"},{"location":"configuration/service/#file-servicesconfigphp","text":"return [ ];","title":"File: services.config.php"},{"location":"configuration/service/#options","text":"","title":"Options"},{"location":"configuration/web/","text":"Package : eveseat/web Config : here File: web.config.php return [ 'max_access_mask' => 1073741823, 'queue_status_update_time' => 10 * 1000, ]; Options max_access_mask The current maximum possible access_mask queue_status_update_time Amount of seconds (calculated as seconds x 1000 ) to wait before requesting a queue status update.","title":"Web"},{"location":"configuration/web/#file-webconfigphp","text":"return [ 'max_access_mask' => 1073741823, 'queue_status_update_time' => 10 * 1000, ];","title":"File: web.config.php"},{"location":"configuration/web/#options","text":"max_access_mask The current maximum possible access_mask queue_status_update_time Amount of seconds (calculated as seconds x 1000 ) to wait before requesting a queue status update.","title":"Options"},{"location":"development/general/","text":"So, you have a bug / feature / curiosity to test out. Hopefully this article will help you quickly get set up to do that! SeAT packages are developed as a standalone packages. The general idea being that you should be including them in the main seat projects composer.json like here . This of course will install all of the sources in the projects vendor/ directory, though this is not always ideal from a development perspective. Instead, you can decide to follow the next few stops to create a loadable package directory, that you can commit to your fork. Below is generally how I have developed the packages. From the main seat project, create a sub folder called packages . For clarities sake, this folder will be at the same level as say the app folder as well as the composer.json file. Next, I like to create the vendors directory for the package I am going to work on, so, create a folder in under packages and call it eveseat . (This is optional. If you skip it, make sure you keep that in mind when setting up the autoloader later). Clone your fork under the eveseat folder. Next, we move back to the original composer.json file, and add the following for PSR-4 class mapping (for the eveapi package): \"psr-4\": { \"App\\\\\": \"app/\", \"Seat\\\\Eveapi\\\\\": \"packages/eveseat/eveapi/src/\" } Set up the autoloader by running composer dump-autoload You should now have the Seat\\Eveapi namespace autoloaded and ready for your testing :D Take special not of any dependencies that may be missing. You can resolve them by adding them to your composer.json and running composer update .","title":"General Guide"},{"location":"development/package_breakdown/","text":"understanding the core SeAT packages eveseat/api link Namespace: Seat\\Api This repository contains all of the SeAT Api Endpoints. A full description of available methods can be found here: [[SeAT API Reference|SeAT-API-Reference]] eveseat/console link Namespace: Seat\\Console This repository contains all of the SeAT console applications. Console apps are accessed via the artisan command line eg: php artisan seat:version . The console applications typically make use of repository classes (more on these later) in the eveseat/services repo to retrieve and set information from the database. For more information on how to write a Laravel Console Command, see the documentation here eveseat/eveapi link Namespace: Seat\\Eveapi This repository is the heart of the EVE API update logic. It is responsible for doing the actual update work, pulling the EVE API XML documents, parsing them and storing the resultant data in the database. Most of the date models live in this repository eveseat/notifications link Namespace: Seat\\Notifications This repository contains a set of scheduled jobs that perform notifications type tasks. A notification can be something as simple as an alert about a corporation member that has been inactive for a period of time. eveseat/web link Namespace: Seat\\Eveapi This repository contains the web interface for SeAT. It contains by far the most complex service provider and will undoubtedly become the prime example/reference when developing packages for SeAT. This package is also the only one that has a permissions / ACL concept. Refer the to the permissions wiki document for more information. eveseat/seat link Namespace: App This is the main SeAT repository. It does not really contain much logic. It should actually be seen as the glue between all of the packages. This is the repository that is cloned when a new installation is done. The most important part of this repository is the service providers that are bootstrapped with the application. The providers array has the default Laravel providers as well as the SeAT providers at the end. These providers tell the application where to find routes, views, configs etc. For more detailed information, refer to the Laravel 5.1 documentation . When you write your package, the user will have to add your provider to this very providers array for the package to become available, just like the SeAT core packages. eveseat/services link Namespace: Seat\\Services This repository contains 'services'. A service is defined as any form of helper and or repository that other packages can depend on. The eveseat/web package (amongst others) make heavy use of the repository classes in this package.","title":"Core Package Breakdown"},{"location":"development/package_breakdown/#understanding-the-core-seat-packages","text":"eveseat/api link Namespace: Seat\\Api This repository contains all of the SeAT Api Endpoints. A full description of available methods can be found here: [[SeAT API Reference|SeAT-API-Reference]] eveseat/console link Namespace: Seat\\Console This repository contains all of the SeAT console applications. Console apps are accessed via the artisan command line eg: php artisan seat:version . The console applications typically make use of repository classes (more on these later) in the eveseat/services repo to retrieve and set information from the database. For more information on how to write a Laravel Console Command, see the documentation here eveseat/eveapi link Namespace: Seat\\Eveapi This repository is the heart of the EVE API update logic. It is responsible for doing the actual update work, pulling the EVE API XML documents, parsing them and storing the resultant data in the database. Most of the date models live in this repository eveseat/notifications link Namespace: Seat\\Notifications This repository contains a set of scheduled jobs that perform notifications type tasks. A notification can be something as simple as an alert about a corporation member that has been inactive for a period of time. eveseat/web link Namespace: Seat\\Eveapi This repository contains the web interface for SeAT. It contains by far the most complex service provider and will undoubtedly become the prime example/reference when developing packages for SeAT. This package is also the only one that has a permissions / ACL concept. Refer the to the permissions wiki document for more information. eveseat/seat link Namespace: App This is the main SeAT repository. It does not really contain much logic. It should actually be seen as the glue between all of the packages. This is the repository that is cloned when a new installation is done. The most important part of this repository is the service providers that are bootstrapped with the application. The providers array has the default Laravel providers as well as the SeAT providers at the end. These providers tell the application where to find routes, views, configs etc. For more detailed information, refer to the Laravel 5.1 documentation . When you write your package, the user will have to add your provider to this very providers array for the package to become available, just like the SeAT core packages. eveseat/services link Namespace: Seat\\Services This repository contains 'services'. A service is defined as any form of helper and or repository that other packages can depend on. The eveseat/web package (amongst others) make heavy use of the repository classes in this package.","title":"understanding the core SeAT packages"},{"location":"development/package_development/","text":"introduction So, you want to write a SeAT package? Hopefully this guide helps you along the way! This guide was written while writing the API package for SeAT here . I figured it would be best to try and capture the process as I am going through it to help in case I miss any important details. toc Getting Started Service Provider Package Structure Routes and Controllers Routes - Access Control Middleware Views Views - Sidebar Menu Views - Character Menu Views - Corporation Menu Views - Bootstrapping Menu Items Database background notes I think its important to keep in mind a few things about how SeAT is put together. The most important being a brief description of what each core package offers, and how you can integrate with them. For a breakdown on what the core packages provide, please refer the to breakdown here . SeAT 1.x is written on Laravel 5.1 LTS . A very good thing to do would be to actually read the documentation top->bottom and get an idea of what is possible with the framework. SeAT core packages make heavy use of many of the features, based directly of what has been interpreted by this very documentation. If you really want to start contributing packages, but juts cant get your head around this whole Laravel thing, then I can suggest you have a look at this excellent free course material covering the basics of what you will encounter in the SeAT codebase. https://laracasts.com/series/laravel-5-fundamentals getting started The very first thing to do is prepare the empty git repository on say Github, as well as the composer package itself. Clone a clean repo, and run composer init , answering any questions. Once that is done, edit the resultant composer.json and prepare the autoload block. SeAT core follows the PSR-4 autoloading standard. I will suggest you do the same. For some more detailed composer info, refer to the docs here . For the API package, I am going to autoload Seat\\Api from the src directory using PSR-4. service provider As mentioned in the package breakdowns here , the eveseat/seat repository bootstraps the packages via service providers. This is actually a Laravel convention that SeAT just follows. To get our package ready, we need to create a service provider. Thankfully there is a command to stub a new one for us. For the API package, I just ran php artisan make:provider ApiServiceProvider and copied the resultant file from app/Providers to my packages src/ directory. Our packages file structure now looks as follows: \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 src \u2514\u2500\u2500 ApiServiceProvider.php package structure From here you pretty much free to do what you want. How you structure the package will obviously depend on what exactly your package provides. In principle, I prefer to follow the same package structure as Laravel does for web / console features. Since we are going to be providing web features with the API, we will quickly create a few folders in preparation for this. I know beforehand that we are going to need a model to store API tokens; middleware to authenticate API requests; routes and controllers for the actual api logic (preferably making use of the eveapi/services repository classes for data access) as well as a few web views for administrators to generate API tokens for applications. With that in mind, the initial structure looks as follows: \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 src \u251c\u2500\u2500 ApiServiceProvider.php \u251c\u2500\u2500 Config \u251c\u2500\u2500 Http \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2514\u2500\u2500 Middleware \u251c\u2500\u2500 Models \u251c\u2500\u2500 database \u2502 \u2514\u2500\u2500 migrations \u2514\u2500\u2500 resources \u2514\u2500\u2500 views This will obviously change as we progress making the package. routes and controllers To start testing the API, we need to add a route and controller to process some requests and responses. My routes.php will have a global Route::group() to encapsulate the routes in the Seat\\Api namespace as well as prefix them with api/ . // File: routes.php Route::group([ 'namespace' => 'Seat\\Api\\Http\\Controllers', 'prefix' => 'api' ], function () { // Logic here }); See the final product here for a more complete example. Next, I add some logic with a route to / , update the base frameworks composer.json to autoload the Seat\\Api namespace from the directory where my package lives, run composer dump-autoload and add the service provider to the eveseat/seat repositories app.php providers array. Lastly, I add a method to the service provider to load the routes and call it form the boot() method in the generated stub. See the complete service provider here /** * Include the routes */ public function add_routes() { if (!$this->app->routesAreCached()) { include __DIR__ . '/Http/routes.php'; } } As a final test, I check that my route is accessible from a booted SeAT app. :) routes - access control Obviously, some routes are not for everyones eyes. SeAT comes with middleware that can be used to filter out requests that may not be authorized for your route. As can be seen in the example below (from here ), we are filtering out requests to api-admin for only superusers. Route::group([ 'namespace' => 'Admin', 'middleware' => 'bouncer:superuser', // The ACL specification. 'prefix' => 'api-admin' ], function () { Route::get('/', [ 'as' => 'api-admin.list', 'uses' => 'ApiAdminController@listTokens']); }); I suggest you have a look at the eveseat/web packages routes definitions for more examples on how the middlewares are used. https://github.com/eveseat/web/tree/master/src/Http/Routes middleware To auth our API requests, we are going to go with token based authentication for now. We want users to present us with a X-Token header (from a valid allowed src IP address) before they may proceed with their request. To do this, we will filter requests using middleware. Thankfully, again, Laravel comes with a command to stub us some empty middleware. Run php artisan make:middleware ApiToken and copy it to your projects Middleware folder. Next we should register the middleware in our service provider. I do this by adding a method and calling it in boot() . See the complete middleware here /** * Include the middleware needed * * @param $router */ public function add_middleware($router) { // Authenticate checks that the token is valid // from an allowed IP address $router->middleware('api.auth', ApiToken::class); } views Although almost all of our interfacing with this package will be via the json api endpoints, we need to add a few routes that will give an administrator the ability to generate API tokens, as well as view logs etc. As mentioned, this will be for an administrator, so we will re-use the ACL features provided by the eveseat/web package to ensure that only admins an access our api-admin routes. Views live in resources/views and are bootstrapped to the api namespace in the service provider. See the service provider here for an example. Note how we are re-using views that exist in the web namespace. All we have to do is extend one of the grids like here and start without our blade template. views - sidebar menu Integrating with the sidebar is also really easy. All you have to do is create a config file, bootstrap it in the service provider and viola. The config file itself has a set structure for the web package to interpret and can be seen here . return [ 'api' => [ 'permission' => 'Superuser', 'name' => 'Api Tokens', 'icon' => 'fa-exchange', 'route_segment' => 'api-admin', 'entries' => [ [ // Manage API Tokens 'name' => 'Manage', 'icon' => 'fa-key', 'route' => 'api-admin.list' ] ] ] ]; The format is generally an array, whereby the first key is the name of your package ( api in this case). Thereafter you can specify the main entry, and any sub entries you want to add. The route key should refer to the named route. The sidebar loader will resolve the route itself for you. If you have any permissions requirements for your package, the permission key can be used together with a required SeAT permission to render the view. views - character submenus Integrating with the character sub menus is also really easy. Just like the sidebar, all you have to do is create a config file, bootstrap it in the service provider and viola. The namespace should be named package.character.menu in your service provider. A sample config file can be seen below: // file: package.character.menu.php return [ [ 'name' => 'Research', 'permission' => 'character.research', 'highlight_view' => 'research', 'route' => 'character.view.research' ] ]; views - corporation submenus Integrating with the corporation sub menus is also really easy. Just like the sidebar and character menus, all you have to do is create a config file, bootstrap it in the service provider and viola. The namespace should be named package.corporation.menu in your service provider. A sample config file can be seen below: // file: package.corporation.menu.php return [ [ 'name' => 'Research', 'permission' => 'corporation.research', 'highlight_view' => 'research', 'route' => 'corporation.view.research' ] ]; views - bootstrapping menu items In the above items, we refer to the files needing to be bootstrapped via the service provider. All this really means is that we have to tell the Laravel application where to find configuration information for a namespace. So, if we wanted to add a sidebar item, we would add the following line to the register() method of the service provider: // Include this packages menu items $this->mergeConfigFrom(__DIR__ . '/Config/package.sidebar.php', 'package.sidebar'); The first argument is the file with the sidebar definitions, the second is the namespace. database For our API package, we have a database requirement. We need to store api tokens and the ip address that is allowed to use them. We are also going to store an access log (based on the config setting). We create migrations and models just like you would for a base Laravel 5.1 application. The only thing to remember is that your migrations for your package must be published (and specified in your service provider).","title":"Package Development"},{"location":"development/package_development/#introduction","text":"So, you want to write a SeAT package? Hopefully this guide helps you along the way! This guide was written while writing the API package for SeAT here . I figured it would be best to try and capture the process as I am going through it to help in case I miss any important details.","title":"introduction"},{"location":"development/package_development/#toc","text":"Getting Started Service Provider Package Structure Routes and Controllers Routes - Access Control Middleware Views Views - Sidebar Menu Views - Character Menu Views - Corporation Menu Views - Bootstrapping Menu Items Database","title":"toc"},{"location":"development/package_development/#background-notes","text":"I think its important to keep in mind a few things about how SeAT is put together. The most important being a brief description of what each core package offers, and how you can integrate with them. For a breakdown on what the core packages provide, please refer the to breakdown here . SeAT 1.x is written on Laravel 5.1 LTS . A very good thing to do would be to actually read the documentation top->bottom and get an idea of what is possible with the framework. SeAT core packages make heavy use of many of the features, based directly of what has been interpreted by this very documentation. If you really want to start contributing packages, but juts cant get your head around this whole Laravel thing, then I can suggest you have a look at this excellent free course material covering the basics of what you will encounter in the SeAT codebase. https://laracasts.com/series/laravel-5-fundamentals","title":"background notes"},{"location":"development/package_development/#getting-started","text":"The very first thing to do is prepare the empty git repository on say Github, as well as the composer package itself. Clone a clean repo, and run composer init , answering any questions. Once that is done, edit the resultant composer.json and prepare the autoload block. SeAT core follows the PSR-4 autoloading standard. I will suggest you do the same. For some more detailed composer info, refer to the docs here . For the API package, I am going to autoload Seat\\Api from the src directory using PSR-4.","title":"getting started"},{"location":"development/package_development/#service-provider","text":"As mentioned in the package breakdowns here , the eveseat/seat repository bootstraps the packages via service providers. This is actually a Laravel convention that SeAT just follows. To get our package ready, we need to create a service provider. Thankfully there is a command to stub a new one for us. For the API package, I just ran php artisan make:provider ApiServiceProvider and copied the resultant file from app/Providers to my packages src/ directory. Our packages file structure now looks as follows: \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 src \u2514\u2500\u2500 ApiServiceProvider.php","title":"service provider"},{"location":"development/package_development/#package-structure","text":"From here you pretty much free to do what you want. How you structure the package will obviously depend on what exactly your package provides. In principle, I prefer to follow the same package structure as Laravel does for web / console features. Since we are going to be providing web features with the API, we will quickly create a few folders in preparation for this. I know beforehand that we are going to need a model to store API tokens; middleware to authenticate API requests; routes and controllers for the actual api logic (preferably making use of the eveapi/services repository classes for data access) as well as a few web views for administrators to generate API tokens for applications. With that in mind, the initial structure looks as follows: \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 src \u251c\u2500\u2500 ApiServiceProvider.php \u251c\u2500\u2500 Config \u251c\u2500\u2500 Http \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2514\u2500\u2500 Middleware \u251c\u2500\u2500 Models \u251c\u2500\u2500 database \u2502 \u2514\u2500\u2500 migrations \u2514\u2500\u2500 resources \u2514\u2500\u2500 views This will obviously change as we progress making the package.","title":"package structure"},{"location":"development/package_development/#routes-and-controllers","text":"To start testing the API, we need to add a route and controller to process some requests and responses. My routes.php will have a global Route::group() to encapsulate the routes in the Seat\\Api namespace as well as prefix them with api/ . // File: routes.php Route::group([ 'namespace' => 'Seat\\Api\\Http\\Controllers', 'prefix' => 'api' ], function () { // Logic here }); See the final product here for a more complete example. Next, I add some logic with a route to / , update the base frameworks composer.json to autoload the Seat\\Api namespace from the directory where my package lives, run composer dump-autoload and add the service provider to the eveseat/seat repositories app.php providers array. Lastly, I add a method to the service provider to load the routes and call it form the boot() method in the generated stub. See the complete service provider here /** * Include the routes */ public function add_routes() { if (!$this->app->routesAreCached()) { include __DIR__ . '/Http/routes.php'; } } As a final test, I check that my route is accessible from a booted SeAT app. :)","title":"routes and controllers"},{"location":"development/package_development/#routes-access-control","text":"Obviously, some routes are not for everyones eyes. SeAT comes with middleware that can be used to filter out requests that may not be authorized for your route. As can be seen in the example below (from here ), we are filtering out requests to api-admin for only superusers. Route::group([ 'namespace' => 'Admin', 'middleware' => 'bouncer:superuser', // The ACL specification. 'prefix' => 'api-admin' ], function () { Route::get('/', [ 'as' => 'api-admin.list', 'uses' => 'ApiAdminController@listTokens']); }); I suggest you have a look at the eveseat/web packages routes definitions for more examples on how the middlewares are used. https://github.com/eveseat/web/tree/master/src/Http/Routes","title":"routes - access control"},{"location":"development/package_development/#middleware","text":"To auth our API requests, we are going to go with token based authentication for now. We want users to present us with a X-Token header (from a valid allowed src IP address) before they may proceed with their request. To do this, we will filter requests using middleware. Thankfully, again, Laravel comes with a command to stub us some empty middleware. Run php artisan make:middleware ApiToken and copy it to your projects Middleware folder. Next we should register the middleware in our service provider. I do this by adding a method and calling it in boot() . See the complete middleware here /** * Include the middleware needed * * @param $router */ public function add_middleware($router) { // Authenticate checks that the token is valid // from an allowed IP address $router->middleware('api.auth', ApiToken::class); }","title":"middleware"},{"location":"development/package_development/#views","text":"Although almost all of our interfacing with this package will be via the json api endpoints, we need to add a few routes that will give an administrator the ability to generate API tokens, as well as view logs etc. As mentioned, this will be for an administrator, so we will re-use the ACL features provided by the eveseat/web package to ensure that only admins an access our api-admin routes. Views live in resources/views and are bootstrapped to the api namespace in the service provider. See the service provider here for an example. Note how we are re-using views that exist in the web namespace. All we have to do is extend one of the grids like here and start without our blade template.","title":"views"},{"location":"development/package_development/#views-sidebar-menu","text":"Integrating with the sidebar is also really easy. All you have to do is create a config file, bootstrap it in the service provider and viola. The config file itself has a set structure for the web package to interpret and can be seen here . return [ 'api' => [ 'permission' => 'Superuser', 'name' => 'Api Tokens', 'icon' => 'fa-exchange', 'route_segment' => 'api-admin', 'entries' => [ [ // Manage API Tokens 'name' => 'Manage', 'icon' => 'fa-key', 'route' => 'api-admin.list' ] ] ] ]; The format is generally an array, whereby the first key is the name of your package ( api in this case). Thereafter you can specify the main entry, and any sub entries you want to add. The route key should refer to the named route. The sidebar loader will resolve the route itself for you. If you have any permissions requirements for your package, the permission key can be used together with a required SeAT permission to render the view.","title":"views - sidebar menu"},{"location":"development/package_development/#views-character-submenus","text":"Integrating with the character sub menus is also really easy. Just like the sidebar, all you have to do is create a config file, bootstrap it in the service provider and viola. The namespace should be named package.character.menu in your service provider. A sample config file can be seen below: // file: package.character.menu.php return [ [ 'name' => 'Research', 'permission' => 'character.research', 'highlight_view' => 'research', 'route' => 'character.view.research' ] ];","title":"views - character submenus"},{"location":"development/package_development/#views-corporation-submenus","text":"Integrating with the corporation sub menus is also really easy. Just like the sidebar and character menus, all you have to do is create a config file, bootstrap it in the service provider and viola. The namespace should be named package.corporation.menu in your service provider. A sample config file can be seen below: // file: package.corporation.menu.php return [ [ 'name' => 'Research', 'permission' => 'corporation.research', 'highlight_view' => 'research', 'route' => 'corporation.view.research' ] ];","title":"views - corporation submenus"},{"location":"development/package_development/#views-bootstrapping-menu-items","text":"In the above items, we refer to the files needing to be bootstrapped via the service provider. All this really means is that we have to tell the Laravel application where to find configuration information for a namespace. So, if we wanted to add a sidebar item, we would add the following line to the register() method of the service provider: // Include this packages menu items $this->mergeConfigFrom(__DIR__ . '/Config/package.sidebar.php', 'package.sidebar'); The first argument is the file with the sidebar definitions, the second is the namespace.","title":"views - bootstrapping menu items"},{"location":"development/package_development/#database","text":"For our API package, we have a database requirement. We need to store api tokens and the ip address that is allowed to use them. We are also going to store an access log (based on the config setting). We create migrations and models just like you would for a base Laravel 5.1 application. The only thing to remember is that your migrations for your package must be published (and specified in your service provider).","title":"database"},{"location":"email/gmail/","text":"introduction SeAT requires email to be setup to allow for things like password reminders and notifications to be sent. This guide will attempt to describe how to go about setting up your email using gmail as an SMTP. the config As with anything Laravel, the config for your email setup will live in your installs .env file. To use gmail as an SMTP service, set the MAIL_DRIVER option in your .env configuration file to smtp . Next, specify the SMTP details: // File: .env MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=587 MAIL_USERNAME=username@gmail.com MAIL_PASSWORD=gmailpassword MAIL_ENCRYPTION=tls MAIL_FROM_ADDRESS=username@gmail.com Done! To test, you can send yourself a password reset email.","title":"Gmail Setup"},{"location":"email/gmail/#introduction","text":"SeAT requires email to be setup to allow for things like password reminders and notifications to be sent. This guide will attempt to describe how to go about setting up your email using gmail as an SMTP.","title":"introduction"},{"location":"email/gmail/#the-config","text":"As with anything Laravel, the config for your email setup will live in your installs .env file. To use gmail as an SMTP service, set the MAIL_DRIVER option in your .env configuration file to smtp . Next, specify the SMTP details: // File: .env MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=587 MAIL_USERNAME=username@gmail.com MAIL_PASSWORD=gmailpassword MAIL_ENCRYPTION=tls MAIL_FROM_ADDRESS=username@gmail.com Done! To test, you can send yourself a password reset email.","title":"the config"},{"location":"email/mailgun/","text":"introduction SeAT requires email to be setup to allow for things like password reminders and notifications to be sent. This guide will attempt to describe how to go about setting up your email using the mailgun service. Though mailgun is a commercial service, you get to send 10k emails for free per month. It also provides epic stats for you to track emails with etc. the config As with anything Laravel, the config for mailgun will live in your installs .env file. To use the Mailgun driver, first set the MAIL_DRIVER option in your .env configuration file to mailgun . Next, we will add two options to specify details about our mailgun account. // File: .env MAILGUN_DOMAIN=whateveritis MAILGUN_SECRET=anotherthing To find out the values you need to populate, login to your mailgun account and browse to the domains section. Pick the applicable domain name. The screen you will see should looks something similar to this: The big title ( sandbox1XXXXXXX in my case) is the domain name, and the field titled API Key is the MAILGUN_SECRET . Done! To test, you can send yourself a password reset email.","title":"Mailgun Setup"},{"location":"email/mailgun/#introduction","text":"SeAT requires email to be setup to allow for things like password reminders and notifications to be sent. This guide will attempt to describe how to go about setting up your email using the mailgun service. Though mailgun is a commercial service, you get to send 10k emails for free per month. It also provides epic stats for you to track emails with etc.","title":"introduction"},{"location":"email/mailgun/#the-config","text":"As with anything Laravel, the config for mailgun will live in your installs .env file. To use the Mailgun driver, first set the MAIL_DRIVER option in your .env configuration file to mailgun . Next, we will add two options to specify details about our mailgun account. // File: .env MAILGUN_DOMAIN=whateveritis MAILGUN_SECRET=anotherthing To find out the values you need to populate, login to your mailgun account and browse to the domains section. Pick the applicable domain name. The screen you will see should looks something similar to this: The big title ( sandbox1XXXXXXX in my case) is the domain name, and the field titled API Key is the MAILGUN_SECRET . Done! To test, you can send yourself a password reset email.","title":"the config"},{"location":"eve_xml_api_updater/job_queue_flow/","text":"The current flow of things when a job enters the system can be seen below: An editable draw.io xml to import can be found here: eveapi.xml","title":"Job Queue Flow"},{"location":"installation_guides/centos6/","text":"This guide attempts to explain how to manually install SeAT onto a CentOS 6.x Server. A small amount of Linux experience is preferred when it comes to this guide, all though it is not entirely mandatory. This guide assumes you want all of the available SeAT components installed (which is the default). getting started We are going to assume you have root access to a fresh CentOS 6.x Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation & configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MySQL databases and or websites), then please keep that in mind while following this guide. Packages are installed using the yum package manager as the root user. table of contents Repositories Database PHP & Apache Redis Composer and Git SeAT - Download SeAT - Permissions SELinux SeAT - Setup Supervisor Crontab Webserver - Apache i. Virtual Host Setup repositories Due to the nature of CentOS 6.x packaging and the limitations in getting 'bleeding edge' software with it, we need to add some extra software repositories in order to get SeAT running. These repositories are known as the Fedora EPEL , Remi and Ghettoforge repositories. Adding these repositories will allow us to get access to PHP 7 and Supervisor 3 which is a requirement for SeAT. To install / configure the required repositories, run the following commands: epel # Download and install EPEL EPEL=epel-release-latest-6.noarch.rpm && curl -O https://dl.fedoraproject.org/pub/epel/$EPEL && yum localinstall -y $EPEL && rm -f $EPEL # Import EPEL signing keys rpm --import http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6 remi # Download and install Remi REMI=remi-release-6.rpm && curl -O http://rpms.remirepo.net/enterprise/$REMI && yum localinstall -y $REMI && rm -f $REMI # Import Remi signing keys rpm --import http://rpms.remirepo.net/RPM-GPG-KEY-remi ghettoforge # Download and install GhettoForge GF=gf-release-6-10.gf.el6.noarch.rpm && curl -O http://mirror.symnds.com/distributions/gf/el/6/gf/x86_64/$GF && yum localinstall -y $GF && rm -f $GF # Import the GhettoForge signing keys rpm --import http://mirror.symnds.com/distributions/gf/RPM-GPG-KEY-gf.el6 Next, we will quickly install yum-utils and enable the remi-php70 and gf-plus repositories in order to gain access to PHP 7.0 and Supervisor 3 yum install yum-utils -y yum-config-manager --enable remi,remi-php70,gf-plus database SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users etc. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required. Lets install the database server first: yum install mysql mysql-server -y With the database server installed, lets start it and configure it to automatically start up the next time out server boots up: /etc/init.d/mysqld start chkconfig mysqld on Next, we are going to secure the database server by removing anonymous access and setting a root password. NOTE The database root password should not be confused with the operating systems root passwords. They are both completely different. They should also not be the same password. To secure the database, run: mysql_secure_installation This will ask you a series of questions, below is how these should be answered: [...] Enter current password for root (enter for none): BY DEFAULT IT IS NONE, PRESS ENTER OK, successfully used password, moving on... [...] Set root password? [Y/n] y New password: SET A STRONG PASSWORD HERE Re-enter new password: SET A STRONG PASSWORD HERE Password updated successfully! Reloading privilege tables.. ... Success! [...] Remove anonymous users? [Y/n] y ... Success! [...] Disallow root login remotely? [Y/n] y ... Success! [...] Remove test database and access to it? [Y/n] y [...] Reload privilege tables now? [Y/n] y ... Success! [...] That concludes the installation of the database server and securing it. Next, we need to create an actual database for SeAT to use on the server. For that we need to use the MySQL command line client and enter a few commands to create the database and the user that will be accessing it. Let get to it. Fire up the MySQL client by running: mysql -uroot -p This will prompt you for a password. Use the password you configured for the root account when we ran mysql_secure_installation . This will most probably be the last time you need to use this password :) If the password was correct, you should see a prompt similar to the one below: [...] mysql> Lets run the command to create the SeAT database: create database seat; The output should be similar to the below: mysql> create database seat; Query OK, 1 row affected (0.00 sec) Next, we create the user that SeAT itself will use to connect and use the seat database: GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Of course, you need to replace s_p3rs3c3r3tp455w0rd with your own. Successfully running this should present you with output similar to the below: mysql> GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Query OK, 0 rows affected (0.00 sec) In the example above, we have effectively declared that SeAT will be using the database as seat:s_p3rs3c3r3tp455w0rd@localhost/seat . NOTE Remember the password for the seat database user as we will need it later to configure SeAT. php & apache SeAT is written in PHP, and therefore we need to install the PHP interpreter. We also need to install a web server that will allow us to server the web front end that comes with SeAT. So, install the required packages with: yum install -y httpd php php-mysql php-cli php-mcrypt php-process php-mbstring php-intl php-dom php-gd You may be asked if you want to accept some GPG keys for package verification here. Just say [Y]. Successful installation should end with something like the below: Installed: httpd.x86_64 0:2.2.15-47.el6.centos php.x86_64 0:5.5.30-1.el6.remi php-cli.x86_64 0:5.5.30-1.el6.remi php-intl.x86_64 0:5.5.30-1.el6.remi php-mbstring.x86_64 0:5.5.30-1.el6.remi php-mcrypt.x86_64 0:5.5.30-1.el6.remi php-mysqlnd.x86_64 0:5.5.30-1.el6.remi php-process.x86_64 0:5.5.30-1.el6.remi Dependency Installed: apr.x86_64 0:1.3.9-5.el6_2 apr-util.x86_64 0:1.3.9-3.el6_0.1 apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1 httpd-tools.x86_64 0:2.2.15-47.el6.centos libicu-last.x86_64 0:50.1.2-11.el6.remi libmcrypt.x86_64 0:2.5.8-9.el6 libtool-ltdl.x86_64 0:2.2.6-15.5.el6 libzip-last.x86_64 0:1.0.1-1.el6.remi mailcap.noarch 0:2.1.31-2.el6 php-common.x86_64 0:5.5.30-1.el6.remi php-pdo.x86_64 0:5.5.30-1.el6.remi php-pecl-jsonc.x86_64 0:1.3.9-1.el6.remi.5.5 php-pecl-zip.x86_64 0:1.13.1-1.el6.remi.5.5 Now, we can start apache and configure it automatically start the next time the server boots up: /etc/init.d/httpd start chkconfig httpd on redis SeAT makes use of Redis as a cache and message broker for the Queue backend. Installing it is really easy. Do it with: yum install -y redis Next, start it and configure it to autostart next time the server boots up: /etc/init.d/redis start chkconfig redis on composer and git SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r Successful installation should output something like: [root@seat ~]# curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r #!/usr/bin/env php All settings correct for using Composer Downloading... Composer successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer As all of the source code is hosted on Github which is a Git based source control system, we need to install git itself. Do this with: yum install git -y seat download Finally, we get to install SeAT itself. The first thing we need to do is to decide where to save SeAT itself. This directory should have enough space for the cached XML files to live on, as well as a few log files should you need to debug problems. The recommended location is /var/www/seat/ . To save SeAT in this directory, first change to it: cd /var/www Next, we will download SeAT using composer and save it to the seat directory. NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully. seat permissions SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. That together with the fact that the web content will be hosted by apache means that we need to configure the files permissions to allow SeAT do do its thing. First, lets ensure that apache owns everything in /var/www/seat which is the folder we just downloaded SeAT to: chown -R apache:apache /var/www/seat Next, we will allow Apache to write to the seat/storage/ directory so that it may manipulate the files in there as needed: chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use! selinux Many people hate SELinux, primarily due to a misunderstanding of what it does and how it works. SeAT can run perfectly fine with SELinux enabled, and I actually encourage you to leave it enabled. There is however one small settings change required to make everything work as expected. First, we have to allow apache to make network connections. This is so that we may connect to the EVEAPI, as well as the MySQL database and Redis. We also have to allow Apache to write to disk. So, configure this with: setsebool -P httpd_can_network_connect 1 setsebool -P httpd_unified 1 Next, we have to ensure that the files and folders in /var/www/seat is correctly labelled in order to prevent SELinux from blocking perfectly normal behaviour. Check this with: restorecon -Rv /var/www/seat Thats it. Pretty painless eh? :) seat setup Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email supervisor SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Lets install supervisor, start it and configure it to start automatically the next time the server boots: yum install supervisor -y /etc/init.d/supervisord start chkconfig supervisord on We now have to configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisord.d/ called seat.ini Note that the number of workers that we want to start is set by the numprocs settings: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=apache Save your file and reload supervisord so that it is aware of the changes that we have made: /etc/init.d/supervisord restart Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors. crontab So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". We will add the cronjob as the apache user as this is the user that has had all its permissions configured earlier. Open up the crontab for apache with: crontab -u apache -e Next, paste the following line at the bottom of the file (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1 webserver - apache In order to get the SeAT fronted running, we need to configure Apache to serve our SeAT installs public/ folder. This is the only folder that should be internet facing. That small index.php is the gateway into the application. The Apache configuration itself will depend on how your server is set up. Generally, virtual hosting is the way to go, and this is what I will be showing here. If you are not going to use virtual hosting, the easiest to get going will probably to symlink /var/www/seat/public/ to /var/www/html/seat and configuring apache to AllowOverride All in the <Directory \"/var/www/html\"> section. This should have SeAT available at http://your-host-name-or-ip/seat after you restart apache. virtual host setup Getting the virtual host setup is as simple as creating a new configuration file (I usually call it the sites-domain.conf ), and modifying it to match your setup. Everywhere you see seat.local as the hostname in the below examples it needs to be substituted to your actual domain. Lets prepare some directories. We create the directory /var/www/html/seat.local with: mkdir /var/www/html/seat.local Next we symlink the SeAT public directory there with: ln -s /var/www/seat/public /var/www/html/seat.local/seat Next, we have to configure Apache itself to know about the directories and stuff SeAT needs. We need to create that sites-domain.conf file I mentioned. This file should live in /etc/httpd/conf.d , so lets change directories there: cd /etc/httpd/conf.d Now, create the conf file. In my case, the domain is seat.local , so I will call it seat.local.conf . Add the following contents to that file: <VirtualHost *:80> ServerAdmin webmaster@your.domain DocumentRoot \"/var/www/html/seat.local\" ServerName seat.local ServerAlias www.seat.local ErrorLog \"logs/seat.local-error_log\" CustomLog \"logs/seat.local-access_log\" common <Directory \"/var/www/html/seat.local\"> AllowOverride All Order allow,deny Allow from all </Directory> </VirtualHost> With our config file created, we need to restart apache to read the new file: apachectl restart That should be it from a configuration perspective. We can confirm that everything is configured correctly by running: [root@seat conf.d]# apachectl -t -D DUMP_VHOSTS httpd: Could not reliably determine the server's fully qualified domain name, using seat.localdomain for ServerName VirtualHost configuration: wildcard NameVirtualHosts and _default_ servers: *:80 seat.local (/etc/httpd/conf.d/seat.local.conf:1) Syntax OK Thats it! SeAT should now be available at http://your-domain-or-ip/seat","title":"CentOS 6.x"},{"location":"installation_guides/centos6/#getting-started","text":"We are going to assume you have root access to a fresh CentOS 6.x Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation & configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MySQL databases and or websites), then please keep that in mind while following this guide. Packages are installed using the yum package manager as the root user.","title":"getting started"},{"location":"installation_guides/centos6/#table-of-contents","text":"Repositories Database PHP & Apache Redis Composer and Git SeAT - Download SeAT - Permissions SELinux SeAT - Setup Supervisor Crontab Webserver - Apache i. Virtual Host Setup","title":"table of contents"},{"location":"installation_guides/centos6/#repositories","text":"Due to the nature of CentOS 6.x packaging and the limitations in getting 'bleeding edge' software with it, we need to add some extra software repositories in order to get SeAT running. These repositories are known as the Fedora EPEL , Remi and Ghettoforge repositories. Adding these repositories will allow us to get access to PHP 7 and Supervisor 3 which is a requirement for SeAT. To install / configure the required repositories, run the following commands:","title":"repositories"},{"location":"installation_guides/centos6/#epel","text":"# Download and install EPEL EPEL=epel-release-latest-6.noarch.rpm && curl -O https://dl.fedoraproject.org/pub/epel/$EPEL && yum localinstall -y $EPEL && rm -f $EPEL # Import EPEL signing keys rpm --import http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6","title":"epel"},{"location":"installation_guides/centos6/#remi","text":"# Download and install Remi REMI=remi-release-6.rpm && curl -O http://rpms.remirepo.net/enterprise/$REMI && yum localinstall -y $REMI && rm -f $REMI # Import Remi signing keys rpm --import http://rpms.remirepo.net/RPM-GPG-KEY-remi","title":"remi"},{"location":"installation_guides/centos6/#ghettoforge","text":"# Download and install GhettoForge GF=gf-release-6-10.gf.el6.noarch.rpm && curl -O http://mirror.symnds.com/distributions/gf/el/6/gf/x86_64/$GF && yum localinstall -y $GF && rm -f $GF # Import the GhettoForge signing keys rpm --import http://mirror.symnds.com/distributions/gf/RPM-GPG-KEY-gf.el6 Next, we will quickly install yum-utils and enable the remi-php70 and gf-plus repositories in order to gain access to PHP 7.0 and Supervisor 3 yum install yum-utils -y yum-config-manager --enable remi,remi-php70,gf-plus","title":"ghettoforge"},{"location":"installation_guides/centos6/#database","text":"SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users etc. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required. Lets install the database server first: yum install mysql mysql-server -y With the database server installed, lets start it and configure it to automatically start up the next time out server boots up: /etc/init.d/mysqld start chkconfig mysqld on Next, we are going to secure the database server by removing anonymous access and setting a root password. NOTE The database root password should not be confused with the operating systems root passwords. They are both completely different. They should also not be the same password. To secure the database, run: mysql_secure_installation This will ask you a series of questions, below is how these should be answered: [...] Enter current password for root (enter for none): BY DEFAULT IT IS NONE, PRESS ENTER OK, successfully used password, moving on... [...] Set root password? [Y/n] y New password: SET A STRONG PASSWORD HERE Re-enter new password: SET A STRONG PASSWORD HERE Password updated successfully! Reloading privilege tables.. ... Success! [...] Remove anonymous users? [Y/n] y ... Success! [...] Disallow root login remotely? [Y/n] y ... Success! [...] Remove test database and access to it? [Y/n] y [...] Reload privilege tables now? [Y/n] y ... Success! [...] That concludes the installation of the database server and securing it. Next, we need to create an actual database for SeAT to use on the server. For that we need to use the MySQL command line client and enter a few commands to create the database and the user that will be accessing it. Let get to it. Fire up the MySQL client by running: mysql -uroot -p This will prompt you for a password. Use the password you configured for the root account when we ran mysql_secure_installation . This will most probably be the last time you need to use this password :) If the password was correct, you should see a prompt similar to the one below: [...] mysql> Lets run the command to create the SeAT database: create database seat; The output should be similar to the below: mysql> create database seat; Query OK, 1 row affected (0.00 sec) Next, we create the user that SeAT itself will use to connect and use the seat database: GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Of course, you need to replace s_p3rs3c3r3tp455w0rd with your own. Successfully running this should present you with output similar to the below: mysql> GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Query OK, 0 rows affected (0.00 sec) In the example above, we have effectively declared that SeAT will be using the database as seat:s_p3rs3c3r3tp455w0rd@localhost/seat . NOTE Remember the password for the seat database user as we will need it later to configure SeAT.","title":"database"},{"location":"installation_guides/centos6/#php-apache","text":"SeAT is written in PHP, and therefore we need to install the PHP interpreter. We also need to install a web server that will allow us to server the web front end that comes with SeAT. So, install the required packages with: yum install -y httpd php php-mysql php-cli php-mcrypt php-process php-mbstring php-intl php-dom php-gd You may be asked if you want to accept some GPG keys for package verification here. Just say [Y]. Successful installation should end with something like the below: Installed: httpd.x86_64 0:2.2.15-47.el6.centos php.x86_64 0:5.5.30-1.el6.remi php-cli.x86_64 0:5.5.30-1.el6.remi php-intl.x86_64 0:5.5.30-1.el6.remi php-mbstring.x86_64 0:5.5.30-1.el6.remi php-mcrypt.x86_64 0:5.5.30-1.el6.remi php-mysqlnd.x86_64 0:5.5.30-1.el6.remi php-process.x86_64 0:5.5.30-1.el6.remi Dependency Installed: apr.x86_64 0:1.3.9-5.el6_2 apr-util.x86_64 0:1.3.9-3.el6_0.1 apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1 httpd-tools.x86_64 0:2.2.15-47.el6.centos libicu-last.x86_64 0:50.1.2-11.el6.remi libmcrypt.x86_64 0:2.5.8-9.el6 libtool-ltdl.x86_64 0:2.2.6-15.5.el6 libzip-last.x86_64 0:1.0.1-1.el6.remi mailcap.noarch 0:2.1.31-2.el6 php-common.x86_64 0:5.5.30-1.el6.remi php-pdo.x86_64 0:5.5.30-1.el6.remi php-pecl-jsonc.x86_64 0:1.3.9-1.el6.remi.5.5 php-pecl-zip.x86_64 0:1.13.1-1.el6.remi.5.5 Now, we can start apache and configure it automatically start the next time the server boots up: /etc/init.d/httpd start chkconfig httpd on","title":"php &amp; apache"},{"location":"installation_guides/centos6/#redis","text":"SeAT makes use of Redis as a cache and message broker for the Queue backend. Installing it is really easy. Do it with: yum install -y redis Next, start it and configure it to autostart next time the server boots up: /etc/init.d/redis start chkconfig redis on","title":"redis"},{"location":"installation_guides/centos6/#composer-and-git","text":"SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r Successful installation should output something like: [root@seat ~]# curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r #!/usr/bin/env php All settings correct for using Composer Downloading... Composer successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer As all of the source code is hosted on Github which is a Git based source control system, we need to install git itself. Do this with: yum install git -y","title":"composer and git"},{"location":"installation_guides/centos6/#seat-download","text":"Finally, we get to install SeAT itself. The first thing we need to do is to decide where to save SeAT itself. This directory should have enough space for the cached XML files to live on, as well as a few log files should you need to debug problems. The recommended location is /var/www/seat/ . To save SeAT in this directory, first change to it: cd /var/www Next, we will download SeAT using composer and save it to the seat directory. NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully.","title":"seat download"},{"location":"installation_guides/centos6/#seat-permissions","text":"SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. That together with the fact that the web content will be hosted by apache means that we need to configure the files permissions to allow SeAT do do its thing. First, lets ensure that apache owns everything in /var/www/seat which is the folder we just downloaded SeAT to: chown -R apache:apache /var/www/seat Next, we will allow Apache to write to the seat/storage/ directory so that it may manipulate the files in there as needed: chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use!","title":"seat permissions"},{"location":"installation_guides/centos6/#selinux","text":"Many people hate SELinux, primarily due to a misunderstanding of what it does and how it works. SeAT can run perfectly fine with SELinux enabled, and I actually encourage you to leave it enabled. There is however one small settings change required to make everything work as expected. First, we have to allow apache to make network connections. This is so that we may connect to the EVEAPI, as well as the MySQL database and Redis. We also have to allow Apache to write to disk. So, configure this with: setsebool -P httpd_can_network_connect 1 setsebool -P httpd_unified 1 Next, we have to ensure that the files and folders in /var/www/seat is correctly labelled in order to prevent SELinux from blocking perfectly normal behaviour. Check this with: restorecon -Rv /var/www/seat Thats it. Pretty painless eh? :)","title":"selinux"},{"location":"installation_guides/centos6/#seat-setup","text":"Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email","title":"seat setup"},{"location":"installation_guides/centos6/#supervisor","text":"SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Lets install supervisor, start it and configure it to start automatically the next time the server boots: yum install supervisor -y /etc/init.d/supervisord start chkconfig supervisord on We now have to configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisord.d/ called seat.ini Note that the number of workers that we want to start is set by the numprocs settings: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=apache Save your file and reload supervisord so that it is aware of the changes that we have made: /etc/init.d/supervisord restart Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors.","title":"supervisor"},{"location":"installation_guides/centos6/#crontab","text":"So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". We will add the cronjob as the apache user as this is the user that has had all its permissions configured earlier. Open up the crontab for apache with: crontab -u apache -e Next, paste the following line at the bottom of the file (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1","title":"crontab"},{"location":"installation_guides/centos6/#webserver-apache","text":"In order to get the SeAT fronted running, we need to configure Apache to serve our SeAT installs public/ folder. This is the only folder that should be internet facing. That small index.php is the gateway into the application. The Apache configuration itself will depend on how your server is set up. Generally, virtual hosting is the way to go, and this is what I will be showing here. If you are not going to use virtual hosting, the easiest to get going will probably to symlink /var/www/seat/public/ to /var/www/html/seat and configuring apache to AllowOverride All in the <Directory \"/var/www/html\"> section. This should have SeAT available at http://your-host-name-or-ip/seat after you restart apache.","title":"webserver - apache"},{"location":"installation_guides/centos6/#virtual-host-setup","text":"Getting the virtual host setup is as simple as creating a new configuration file (I usually call it the sites-domain.conf ), and modifying it to match your setup. Everywhere you see seat.local as the hostname in the below examples it needs to be substituted to your actual domain. Lets prepare some directories. We create the directory /var/www/html/seat.local with: mkdir /var/www/html/seat.local Next we symlink the SeAT public directory there with: ln -s /var/www/seat/public /var/www/html/seat.local/seat Next, we have to configure Apache itself to know about the directories and stuff SeAT needs. We need to create that sites-domain.conf file I mentioned. This file should live in /etc/httpd/conf.d , so lets change directories there: cd /etc/httpd/conf.d Now, create the conf file. In my case, the domain is seat.local , so I will call it seat.local.conf . Add the following contents to that file: <VirtualHost *:80> ServerAdmin webmaster@your.domain DocumentRoot \"/var/www/html/seat.local\" ServerName seat.local ServerAlias www.seat.local ErrorLog \"logs/seat.local-error_log\" CustomLog \"logs/seat.local-access_log\" common <Directory \"/var/www/html/seat.local\"> AllowOverride All Order allow,deny Allow from all </Directory> </VirtualHost> With our config file created, we need to restart apache to read the new file: apachectl restart That should be it from a configuration perspective. We can confirm that everything is configured correctly by running: [root@seat conf.d]# apachectl -t -D DUMP_VHOSTS httpd: Could not reliably determine the server's fully qualified domain name, using seat.localdomain for ServerName VirtualHost configuration: wildcard NameVirtualHosts and _default_ servers: *:80 seat.local (/etc/httpd/conf.d/seat.local.conf:1) Syntax OK Thats it! SeAT should now be available at http://your-domain-or-ip/seat","title":"virtual host setup"},{"location":"installation_guides/centos7/","text":"This guide attempts to explain how to manually install SeAT onto a CentOS 7.x Server. A small amount of Linux experience is preferred when it comes to this guide, all though it is not entirely mandatory. This guide assumes you want all of the available SeAT components installed (which is the default). getting started We are going to assume you have root access to a fresh CentOS 7.x Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation & configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MariaDB databases and or websites), then please keep that in mind while following this guide. Packages are installed using the yum package manager as the root user. table of contents Repositories Database PHP & Apache Redis Composer and Git SeAT - Download SeAT - Permissions SELinux SeAT - Setup Supervisor Crontab Webserver - Apache i. Virtual Host Setup repositories Due to the nature of CentOS 7.x packaging and the limitations in getting 'bleeding edge' software with it, we need to add some extra software repositories in order to get SeAT running. These repositories are known as the Fedora EPEL and Remi repositories. Adding these repositories will allow us to get access to PHP 7 which is a requirement for SeAT. To install / configure the required repositories, run the following commands: epel # Download and install Epel EPEL=epel-release-latest-7.noarch.rpm && curl -O https://dl.fedoraproject.org/pub/epel/$EPEL && yum localinstall -y $EPEL && rm -f $EPEL # Import signing key rpm --import \"http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7\" remi # Download and install Epel REMI=remi-release-7.rpm && curl -O http://rpms.remirepo.net/enterprise/$REMI && yum localinstall -y $REMI && rm -f $REMI # Import signing key rpm --import http://rpms.remirepo.net/RPM-GPG-KEY-remi Next, we will quickly install yum-utils and enable the remi-php70 repository in order to gain access to PHP 7.0. yum install yum-utils -y yum-config-manager --enable remi,remi-php70 database SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users etc. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required. Lets install the database server first: yum install -y mariadb-server You should see output similar to the following: [... snip ...] Installed: mariadb-server.x86_64 1:5.5.44-1.el7_1 [... snip ...] With the database server installed, lets start it and configure it to automatically start up the next time out server boots up: systemctl enable mariadb.service Next, start the DB server with systemctl start mariadb.service Next, we are going to secure the database server by removing anonymous access and setting a root password. NOTE The database root password should not be confused with the operating systems root passwords. They are both completely different. They should also not be the same password. To secure the database, run: mysql_secure_installation This will ask you a series of questions, below is how these should be answered: [...] Enter current password for root (enter for none): BY DEFAULT IT IS NONE, PRESS ENTER OK, successfully used password, moving on... [...] Set root password? [Y/n] y New password: SET A STRONG PASSWORD HERE Re-enter new password: SET A STRONG PASSWORD HERE Password updated successfully! Reloading privilege tables.. ... Success! [...] Remove anonymous users? [Y/n] y ... Success! [...] Disallow root login remotely? [Y/n] y ... Success! [...] Remove test database and access to it? [Y/n] y [...] Reload privilege tables now? [Y/n] y ... Success! [...] That concludes the installation of the database server and securing it. Next, we need to create an actual database for SeAT to use on the server. For that we need to use the MySQL command line client and enter a few commands to create the database and the user that will be accessing it. Let get to it. Fire up the MySQL client by running: mysql -uroot -p This will prompt you for a password. Use the password you configured for the root account when we ran mysql_secure_installation . This will most probably be the last time you need to use this password :) If the password was correct, you should see a prompt similar to the one below: [...] MariaDB [(none)]> Lets run the command to create the SeAT database: create database seat; The output should be similar to the below: MariaDB [(none)]> create database seat; Query OK, 1 row affected (0.00 sec) Next, we create the user that SeAT itself will use to connect and use the seat database: GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Of course, you need to replace s_p3rs3c3r3tp455w0rd with your own. Successfully running this should present you with output similar to the below: MariaDB [(none)]> GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Query OK, 0 rows affected (0.00 sec) In the example above, we have effectively declared that SeAT will be using the database as seat:s_p3rs3c3r3tp455w0rd@localhost/seat . NOTE Remember the password for the seat database user as we will need it later to configure SeAT. php & apache SeAT is written in PHP, and therefore we need to install the PHP interpreter. We also need to install a web server that will allow us to server the web front end that comes with SeAT. So, install the required packages with: yum install -y httpd php php-mysql php-cli php-mcrypt php-process php-mbstring php-intl php-dom php-gd You may be asked if you want to accept some GPG keys for package verification here. Just say [Y]. Next, we can start apache and configure it automatically start the next time the server boots up: systemctl enable httpd.service Next, we start Apache systemctl start httpd.service redis SeAT makes use of Redis as a cache and message broker for the Queue backend. Installing it is really easy. Do it with: yum install -y redis Next, start it and configure it to autostart next time the server boots up: systemctl enable redis.service systemctl start redis.service composer and git SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r Successful installation should output something like: [root@seat ~]# curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r #!/usr/bin/env php All settings correct for using Composer Downloading... Composer successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer As all of the source code is hosted on Github which is a Git based source control system, we need to install git itself. Do this with: yum install -y git seat download Finally, we get to install SeAT itself. The first thing we need to do is to decide where to save SeAT itself. This directory should have enough space for the cached XML files to live on, as well as a few log files should you need to debug problems. The recommended location is /var/www/seat/ . To save SeAT in this directory, first change to it: cd /var/www Next, we will download SeAT using composer and save it to the seat directory. NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully. seat permissions SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. That together with the fact that the web content will be hosted by apache means that we need to configure the files permissions to allow SeAT do do its thing. First, lets ensure that apache owns everything in /var/www/seat which is the folder we just downloaded SeAT to: chown -R apache:apache /var/www/seat Next, we will allow Apache to write to the seat/storage/ directory so that it may manipulate the files in there as needed: chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use! selinux Many people hate SELinux, primarily due to a misunderstanding of what it does and how it works. SeAT can run perfectly fine with SELinux enabled, and I actually encourage you to leave it enabled. There is however one small settings change required to make everything work as expected. First, we have to allow apache to make network connections. This is so that we may connect to the EVEAPI, as well as the MySQL database and Redis. We also have to allow Apache to write to disk. So, configure this with: setsebool -P httpd_can_network_connect 1 setsebool -P httpd_unified 1 Next, we have to ensure that the files and folders in /var/www/seat is correctly labelled in order to prevent SELinux from blocking perfectly normal behaviour. Check this with: restorecon -Rv /var/www/seat Thats it. Pretty painless eh? :) seat setup Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email supervisor SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Lets install supervisor, start it and configure it to start automatically the next time the server boots: yum install supervisor -y systemctl enable supervisord.service We now have to configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisord.d/ called seat.ini Note that the number of workers that we want to start is set by the numprocs settings: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=apache Save your file and start supervisord so that it is aware of the changes that we have made: systemctl start supervisord.service Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors. crontab So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". We will add the cronjob as the apache user as this is the user that has had all its permissions configured earlier. Open up the crontab for apache with: crontab -u apache -e Next, paste the following line at the bottom of the file (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1 webserver - apache In order to get the SeAT fronted running, we need to configure Apache to serve our SeAT installs public/ folder. This is the only folder that should be internet facing. That small index.php is the gateway into the application. The Apache configuration itself will depend on how your server is set up. Generally, virtual hosting is the way to go, and this is what I will be showing here. If you are not going to use virtual hosting, the easiest to get going will probably to symlink /var/www/seat/public/ to /var/www/html/seat and configuring apache to AllowOverride All in the <Directory \"/var/www/html\"> section. This should have SeAT available at http://your-host-name-or-ip/seat after you restart apache. virtual host setup Getting the virtual host setup is as simple as creating a new configuration file (I usually call it the sites-domain.conf ), and modifying it to match your setup. Everywhere you see seat.local as the hostname in the below examples it needs to be substituted to your actual domain. We symlink the SeAT public directory with: ln -s /var/www/seat/public /var/www/html/seat.local Next, we have to configure Apache itself to know about the directories and stuff SeAT needs. We need to create that sites-domain.conf file I mentioned. This file should live in /etc/httpd/conf.d , so lets change directories there: cd /etc/httpd/conf.d Now, create the conf file. In my case, the domain is seat.local , so I will call it seat.local.conf . Add the following contents to that file: <VirtualHost *:80> ServerAdmin webmaster@your.domain DocumentRoot \"/var/www/html/seat.local\" ServerName seat.local ServerAlias www.seat.local ErrorLog \"logs/seat.local-error_log\" CustomLog \"logs/seat.local-access_log\" common <Directory \"/var/www/html/seat.local\"> AllowOverride All Order allow,deny Allow from all </Directory> </VirtualHost> With our config file created, we need to restart apache to read the new file: apachectl restart That should be it from a configuration perspective. We can confirm that everything is configured correctly by running: Thats it! SeAT should now be available at http://your-domain-or-ip/","title":"CentOS 7.x"},{"location":"installation_guides/centos7/#getting-started","text":"We are going to assume you have root access to a fresh CentOS 7.x Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation & configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MariaDB databases and or websites), then please keep that in mind while following this guide. Packages are installed using the yum package manager as the root user.","title":"getting started"},{"location":"installation_guides/centos7/#table-of-contents","text":"Repositories Database PHP & Apache Redis Composer and Git SeAT - Download SeAT - Permissions SELinux SeAT - Setup Supervisor Crontab Webserver - Apache i. Virtual Host Setup","title":"table of contents"},{"location":"installation_guides/centos7/#repositories","text":"Due to the nature of CentOS 7.x packaging and the limitations in getting 'bleeding edge' software with it, we need to add some extra software repositories in order to get SeAT running. These repositories are known as the Fedora EPEL and Remi repositories. Adding these repositories will allow us to get access to PHP 7 which is a requirement for SeAT. To install / configure the required repositories, run the following commands:","title":"repositories"},{"location":"installation_guides/centos7/#epel","text":"# Download and install Epel EPEL=epel-release-latest-7.noarch.rpm && curl -O https://dl.fedoraproject.org/pub/epel/$EPEL && yum localinstall -y $EPEL && rm -f $EPEL # Import signing key rpm --import \"http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7\"","title":"epel"},{"location":"installation_guides/centos7/#remi","text":"# Download and install Epel REMI=remi-release-7.rpm && curl -O http://rpms.remirepo.net/enterprise/$REMI && yum localinstall -y $REMI && rm -f $REMI # Import signing key rpm --import http://rpms.remirepo.net/RPM-GPG-KEY-remi Next, we will quickly install yum-utils and enable the remi-php70 repository in order to gain access to PHP 7.0. yum install yum-utils -y yum-config-manager --enable remi,remi-php70","title":"remi"},{"location":"installation_guides/centos7/#database","text":"SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users etc. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required. Lets install the database server first: yum install -y mariadb-server You should see output similar to the following: [... snip ...] Installed: mariadb-server.x86_64 1:5.5.44-1.el7_1 [... snip ...] With the database server installed, lets start it and configure it to automatically start up the next time out server boots up: systemctl enable mariadb.service Next, start the DB server with systemctl start mariadb.service Next, we are going to secure the database server by removing anonymous access and setting a root password. NOTE The database root password should not be confused with the operating systems root passwords. They are both completely different. They should also not be the same password. To secure the database, run: mysql_secure_installation This will ask you a series of questions, below is how these should be answered: [...] Enter current password for root (enter for none): BY DEFAULT IT IS NONE, PRESS ENTER OK, successfully used password, moving on... [...] Set root password? [Y/n] y New password: SET A STRONG PASSWORD HERE Re-enter new password: SET A STRONG PASSWORD HERE Password updated successfully! Reloading privilege tables.. ... Success! [...] Remove anonymous users? [Y/n] y ... Success! [...] Disallow root login remotely? [Y/n] y ... Success! [...] Remove test database and access to it? [Y/n] y [...] Reload privilege tables now? [Y/n] y ... Success! [...] That concludes the installation of the database server and securing it. Next, we need to create an actual database for SeAT to use on the server. For that we need to use the MySQL command line client and enter a few commands to create the database and the user that will be accessing it. Let get to it. Fire up the MySQL client by running: mysql -uroot -p This will prompt you for a password. Use the password you configured for the root account when we ran mysql_secure_installation . This will most probably be the last time you need to use this password :) If the password was correct, you should see a prompt similar to the one below: [...] MariaDB [(none)]> Lets run the command to create the SeAT database: create database seat; The output should be similar to the below: MariaDB [(none)]> create database seat; Query OK, 1 row affected (0.00 sec) Next, we create the user that SeAT itself will use to connect and use the seat database: GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Of course, you need to replace s_p3rs3c3r3tp455w0rd with your own. Successfully running this should present you with output similar to the below: MariaDB [(none)]> GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Query OK, 0 rows affected (0.00 sec) In the example above, we have effectively declared that SeAT will be using the database as seat:s_p3rs3c3r3tp455w0rd@localhost/seat . NOTE Remember the password for the seat database user as we will need it later to configure SeAT.","title":"database"},{"location":"installation_guides/centos7/#php-apache","text":"SeAT is written in PHP, and therefore we need to install the PHP interpreter. We also need to install a web server that will allow us to server the web front end that comes with SeAT. So, install the required packages with: yum install -y httpd php php-mysql php-cli php-mcrypt php-process php-mbstring php-intl php-dom php-gd You may be asked if you want to accept some GPG keys for package verification here. Just say [Y]. Next, we can start apache and configure it automatically start the next time the server boots up: systemctl enable httpd.service Next, we start Apache systemctl start httpd.service","title":"php &amp; apache"},{"location":"installation_guides/centos7/#redis","text":"SeAT makes use of Redis as a cache and message broker for the Queue backend. Installing it is really easy. Do it with: yum install -y redis Next, start it and configure it to autostart next time the server boots up: systemctl enable redis.service systemctl start redis.service","title":"redis"},{"location":"installation_guides/centos7/#composer-and-git","text":"SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r Successful installation should output something like: [root@seat ~]# curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r #!/usr/bin/env php All settings correct for using Composer Downloading... Composer successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer As all of the source code is hosted on Github which is a Git based source control system, we need to install git itself. Do this with: yum install -y git","title":"composer and git"},{"location":"installation_guides/centos7/#seat-download","text":"Finally, we get to install SeAT itself. The first thing we need to do is to decide where to save SeAT itself. This directory should have enough space for the cached XML files to live on, as well as a few log files should you need to debug problems. The recommended location is /var/www/seat/ . To save SeAT in this directory, first change to it: cd /var/www Next, we will download SeAT using composer and save it to the seat directory. NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully.","title":"seat download"},{"location":"installation_guides/centos7/#seat-permissions","text":"SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. That together with the fact that the web content will be hosted by apache means that we need to configure the files permissions to allow SeAT do do its thing. First, lets ensure that apache owns everything in /var/www/seat which is the folder we just downloaded SeAT to: chown -R apache:apache /var/www/seat Next, we will allow Apache to write to the seat/storage/ directory so that it may manipulate the files in there as needed: chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use!","title":"seat permissions"},{"location":"installation_guides/centos7/#selinux","text":"Many people hate SELinux, primarily due to a misunderstanding of what it does and how it works. SeAT can run perfectly fine with SELinux enabled, and I actually encourage you to leave it enabled. There is however one small settings change required to make everything work as expected. First, we have to allow apache to make network connections. This is so that we may connect to the EVEAPI, as well as the MySQL database and Redis. We also have to allow Apache to write to disk. So, configure this with: setsebool -P httpd_can_network_connect 1 setsebool -P httpd_unified 1 Next, we have to ensure that the files and folders in /var/www/seat is correctly labelled in order to prevent SELinux from blocking perfectly normal behaviour. Check this with: restorecon -Rv /var/www/seat Thats it. Pretty painless eh? :)","title":"selinux"},{"location":"installation_guides/centos7/#seat-setup","text":"Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email","title":"seat setup"},{"location":"installation_guides/centos7/#supervisor","text":"SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Lets install supervisor, start it and configure it to start automatically the next time the server boots: yum install supervisor -y systemctl enable supervisord.service We now have to configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisord.d/ called seat.ini Note that the number of workers that we want to start is set by the numprocs settings: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=apache Save your file and start supervisord so that it is aware of the changes that we have made: systemctl start supervisord.service Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors.","title":"supervisor"},{"location":"installation_guides/centos7/#crontab","text":"So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". We will add the cronjob as the apache user as this is the user that has had all its permissions configured earlier. Open up the crontab for apache with: crontab -u apache -e Next, paste the following line at the bottom of the file (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1","title":"crontab"},{"location":"installation_guides/centos7/#webserver-apache","text":"In order to get the SeAT fronted running, we need to configure Apache to serve our SeAT installs public/ folder. This is the only folder that should be internet facing. That small index.php is the gateway into the application. The Apache configuration itself will depend on how your server is set up. Generally, virtual hosting is the way to go, and this is what I will be showing here. If you are not going to use virtual hosting, the easiest to get going will probably to symlink /var/www/seat/public/ to /var/www/html/seat and configuring apache to AllowOverride All in the <Directory \"/var/www/html\"> section. This should have SeAT available at http://your-host-name-or-ip/seat after you restart apache.","title":"webserver - apache"},{"location":"installation_guides/centos7/#virtual-host-setup","text":"Getting the virtual host setup is as simple as creating a new configuration file (I usually call it the sites-domain.conf ), and modifying it to match your setup. Everywhere you see seat.local as the hostname in the below examples it needs to be substituted to your actual domain. We symlink the SeAT public directory with: ln -s /var/www/seat/public /var/www/html/seat.local Next, we have to configure Apache itself to know about the directories and stuff SeAT needs. We need to create that sites-domain.conf file I mentioned. This file should live in /etc/httpd/conf.d , so lets change directories there: cd /etc/httpd/conf.d Now, create the conf file. In my case, the domain is seat.local , so I will call it seat.local.conf . Add the following contents to that file: <VirtualHost *:80> ServerAdmin webmaster@your.domain DocumentRoot \"/var/www/html/seat.local\" ServerName seat.local ServerAlias www.seat.local ErrorLog \"logs/seat.local-error_log\" CustomLog \"logs/seat.local-access_log\" common <Directory \"/var/www/html/seat.local\"> AllowOverride All Order allow,deny Allow from all </Directory> </VirtualHost> With our config file created, we need to restart apache to read the new file: apachectl restart That should be it from a configuration perspective. We can confirm that everything is configured correctly by running: Thats it! SeAT should now be available at http://your-domain-or-ip/","title":"virtual host setup"},{"location":"installation_guides/developer_installation/","text":"Getting a development installation up and running is now even easier than before. Simply download the seat tool (if you havent already), and run seat install:development ! installation curl -fsSL https://git.io/vXb0u -o /usr/local/bin/seat chmod +x /usr/local/bin/seat seat install:development This command also accepts an optional path specification for the installation. For example: $ seat install:development --destination ~/code/seat-dev Using /usr/bin/git for git Using /usr/bin/unzip for unzip Using /usr/local/bin/composer for composer Using /usr/local/bin/php for php Cloning Main SeAT repository to ~/code/seat-dev... manual development setup If you dont want to use the seat tool to configure a development project for you, then you can refer to the following page for more information on a reccomended development environment setup for SeAT: General Development .","title":"Development Project"},{"location":"installation_guides/developer_installation/#installation","text":"curl -fsSL https://git.io/vXb0u -o /usr/local/bin/seat chmod +x /usr/local/bin/seat seat install:development This command also accepts an optional path specification for the installation. For example: $ seat install:development --destination ~/code/seat-dev Using /usr/bin/git for git Using /usr/bin/unzip for unzip Using /usr/local/bin/composer for composer Using /usr/local/bin/php for php Cloning Main SeAT repository to ~/code/seat-dev...","title":"installation"},{"location":"installation_guides/developer_installation/#manual-development-setup","text":"If you dont want to use the seat tool to configure a development project for you, then you can refer to the following page for more information on a reccomended development environment setup for SeAT: General Development .","title":"manual development setup"},{"location":"installation_guides/generic_installation/","text":"If you are reading this, it means that you want to install SeAT on a Linux distribution that does not have a dedicated guide. SeAT should be able to run fine on just about any distribution. This guide is going to assume a very confident level of Linux expertise too and is only recommended for advanced users. table of contents Software Software - PHP Composer SeAT - Download SeAT - Permissions SeAT - Setup Supervisor Crontab Webserver software SeAT needs 3 major components. A MySQL (or MariaDB) database, Redis and supervisord . Using your operating systems package manager (or from source if you wish!), install the services. PHP needs to be at least version 7 and supervisor at least version 3. The following list gives a breakdown of the OS level dependencies needed by SeAT: mysqld redis supervisord git unzip software - php There are also a few PHP 7 dependencies needed that should be installed. You can confirm if you are missing any by running php -m and comparing it to the following list: mcrypt intl gd PDO pdo_mysql curl mbstring dom bz2 composer SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r seat download SeAT is downloaded using the previously installed composer tool. Decide where you want to host SeAT (like /var/www/seat ) and download it: NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully. seat permissions SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. Ensure that the user your webserver will run as can write to this location. Example permissions configuration is: chown -R apache:apache /var/www/seat chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use! seat setup Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email supervisor SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisord.d/ called seat.ini Note that the number of workers that we want to start is set by the numprocs settings: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=apache Save your file and start supervisord so that it is aware of the changes that we have made: systemctl start supervisord.service Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors. crontab So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". Add the cronjob as the webserver user as this is the user that has had all its permissions configured earlier. Add the following line to the webserver users crontab (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1 webserver Lastly, configure a webserver to server the public/ directory from the folder that was downloaded when the composer create-project command was run. Thats it! SeAT should now be available at http://your-domain-or-ip/","title":"Generic Installation"},{"location":"installation_guides/generic_installation/#table-of-contents","text":"Software Software - PHP Composer SeAT - Download SeAT - Permissions SeAT - Setup Supervisor Crontab Webserver","title":"table of contents"},{"location":"installation_guides/generic_installation/#software","text":"SeAT needs 3 major components. A MySQL (or MariaDB) database, Redis and supervisord . Using your operating systems package manager (or from source if you wish!), install the services. PHP needs to be at least version 7 and supervisor at least version 3. The following list gives a breakdown of the OS level dependencies needed by SeAT: mysqld redis supervisord git unzip","title":"software"},{"location":"installation_guides/generic_installation/#software-php","text":"There are also a few PHP 7 dependencies needed that should be installed. You can confirm if you are missing any by running php -m and comparing it to the following list: mcrypt intl gd PDO pdo_mysql curl mbstring dom bz2","title":"software - php"},{"location":"installation_guides/generic_installation/#composer","text":"SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r","title":"composer"},{"location":"installation_guides/generic_installation/#seat-download","text":"SeAT is downloaded using the previously installed composer tool. Decide where you want to host SeAT (like /var/www/seat ) and download it: NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully.","title":"seat download"},{"location":"installation_guides/generic_installation/#seat-permissions","text":"SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. Ensure that the user your webserver will run as can write to this location. Example permissions configuration is: chown -R apache:apache /var/www/seat chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use!","title":"seat permissions"},{"location":"installation_guides/generic_installation/#seat-setup","text":"Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email","title":"seat setup"},{"location":"installation_guides/generic_installation/#supervisor","text":"SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisord.d/ called seat.ini Note that the number of workers that we want to start is set by the numprocs settings: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=apache Save your file and start supervisord so that it is aware of the changes that we have made: systemctl start supervisord.service Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors.","title":"supervisor"},{"location":"installation_guides/generic_installation/#crontab","text":"So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". Add the cronjob as the webserver user as this is the user that has had all its permissions configured earlier. Add the following line to the webserver users crontab (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1","title":"crontab"},{"location":"installation_guides/generic_installation/#webserver","text":"Lastly, configure a webserver to server the public/ directory from the folder that was downloaded when the composer create-project command was run. Thats it! SeAT should now be available at http://your-domain-or-ip/","title":"webserver"},{"location":"installation_guides/getting_started/","text":"Before you rush ahead and install SeAT, it would be a good idea to review what you need first. Once you have done this, head over to the quick install guide to start the actual installation. If you want to install SeAT manually, some operating system specific guides are available. If you want to install on an operating system that is not listed, then follow the generic installation guide. summary SeAT is a self hosted web application. This means that you will need your own server (and optional domain) to host SeAT. SeAT needs PHP7 , a MySQL (or MariaDB ) database, a Redis cache, Supervisor and an internet connection in order to be fully functional. All of these can be installed and configured separately, or, if you are running a supported operating system, you can use the seat tool to perform the installation for you. requirements Next, lets cover requirements. hardware As far as hardware goes, there isn't really a hard and fast rule on what is needed. The more resources you make available, the faster API updates will occur. However, there are some minimum recommended specifications. Memory : 2GB of RAM. Less can work, it will just be slow. Hard Drive Space : 10GB (used mostly by the database and the EVE API caching) software Software specifications are also based on a minimum version requirement. These are: Linux. Almost any distribution that can run PHP and a Web server should be fine. There are no plans to support windows yet. Sorry. PHP Version 7 Supervisor Version 3 MySQL Version 5.5 (or the MariaDB equivalent) A Web server such as Apache or Nginx seat tool Since SeAT v2.0, a seat tool has been made available to help with installation of both production and development environments, upgrades as well as generic diagnostics of an existing installation. To get the seat too, simply download it to a location that will be in your PATH such as /usr/local/bin . To download the seat tool, run the following commands: curl -fsSL https://git.io/vXb0u -o /usr/local/bin/seat chmod +x /usr/local/bin/seat hash -r You should now be able to run it by simply running the command seat : $ seat SeAT Installer a604b43 Usage: command [options] [arguments] Options: -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Available commands: help Displays help for a command list Lists commands diagnose diagnose:seat Diagnose a SeAT Instance install install:development Install a SeAT Development Instance install:production Install a SeAT Production Instance update update:seat Update a SeAT Installation update:self Update this SeAT Installer","title":"Getting Started"},{"location":"installation_guides/getting_started/#summary","text":"SeAT is a self hosted web application. This means that you will need your own server (and optional domain) to host SeAT. SeAT needs PHP7 , a MySQL (or MariaDB ) database, a Redis cache, Supervisor and an internet connection in order to be fully functional. All of these can be installed and configured separately, or, if you are running a supported operating system, you can use the seat tool to perform the installation for you.","title":"summary"},{"location":"installation_guides/getting_started/#requirements","text":"Next, lets cover requirements.","title":"requirements"},{"location":"installation_guides/getting_started/#hardware","text":"As far as hardware goes, there isn't really a hard and fast rule on what is needed. The more resources you make available, the faster API updates will occur. However, there are some minimum recommended specifications. Memory : 2GB of RAM. Less can work, it will just be slow. Hard Drive Space : 10GB (used mostly by the database and the EVE API caching)","title":"hardware"},{"location":"installation_guides/getting_started/#software","text":"Software specifications are also based on a minimum version requirement. These are: Linux. Almost any distribution that can run PHP and a Web server should be fine. There are no plans to support windows yet. Sorry. PHP Version 7 Supervisor Version 3 MySQL Version 5.5 (or the MariaDB equivalent) A Web server such as Apache or Nginx","title":"software"},{"location":"installation_guides/getting_started/#seat-tool","text":"Since SeAT v2.0, a seat tool has been made available to help with installation of both production and development environments, upgrades as well as generic diagnostics of an existing installation. To get the seat too, simply download it to a location that will be in your PATH such as /usr/local/bin . To download the seat tool, run the following commands: curl -fsSL https://git.io/vXb0u -o /usr/local/bin/seat chmod +x /usr/local/bin/seat hash -r You should now be able to run it by simply running the command seat : $ seat SeAT Installer a604b43 Usage: command [options] [arguments] Options: -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Available commands: help Displays help for a command list Lists commands diagnose diagnose:seat Diagnose a SeAT Instance install install:development Install a SeAT Development Instance install:production Install a SeAT Production Instance update update:seat Update a SeAT Installation update:self Update this SeAT Installer","title":"seat tool"},{"location":"installation_guides/quick_install/","text":"The fastest way to get started with SeAT, is to start the installer with: bash <(curl -fsSL https://git.io/v15KU) This will ask you to choose your operating system in order to prepare the seat tool for use. Example usage: $ bash <(curl -fsSL https://git.io/v15KU) * SeAT Installer Operating System Selection 1) CentOS 6 3) Ubuntu 14.04 5) Quit 2) CentOS 7 4) Ubuntu 16.04 * Please select the target operating system:","title":"Quick Install"},{"location":"installation_guides/ubuntu16x/","text":"This guide attempts to explain how to manually install SeAT onto an Ubuntu 16.x Server. A small amount of Linux experience is preferred when it comes to this guide, all though it is not entirely mandatory. This guide assumes you want all of the available SeAT components installed (which is the default). getting started We are going to assume you have root access to a fresh Ubuntu 16x Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation & configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MySQL databases and or websites), then please keep that in mind while following this guide. Packages are installed using the aptitude package manager as the root user. table of contents Database PHP & Apache Redis Composer and Git SeAT - Download SeAT - Permissions SeAT - Setup Supervisor Crontab Webserver - Apache i. Virtual Host Setup database SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users etc. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required. Lets install the database server first: apt-get install mysql-server expect -y Next, we are going to secure the database server by removing anonymous access and setting a root password. NOTE The database root password should not be confused with the operating systems root passwords. They are both completely different. They should also not be the same password. To secure the database, run: mysql_secure_installation This will ask you a series of questions, below is how these should be answered: [...] Enter current password for root (enter for none): BY DEFAULT IT IS NONE, PRESS ENTER OK, successfully used password, moving on... [...] Set root password? [Y/n] y New password: SET A STRONG PASSWORD HERE Re-enter new password: SET A STRONG PASSWORD HERE Password updated successfully! Reloading privilege tables.. ... Success! [...] Remove anonymous users? [Y/n] y ... Success! [...] Disallow root login remotely? [Y/n] y ... Success! [...] Remove test database and access to it? [Y/n] y [...] Reload privilege tables now? [Y/n] y ... Success! [...] That concludes the installation of the database server and securing it. Next, we need to create an actual database for SeAT to use on the server. For that we need to use the MySQL command line client and enter a few commands to create the database and the user that will be accessing it. Let get to it. Fire up the MySQL client by running: mysql -uroot -p This will prompt you for a password. Use the password you configured for the root account when we ran mysql_secure_installation . This will most probably be the last time you need to use this password :) If the password was correct, you should see a prompt similar to the one below: [...] mysql> Lets run the command to create the SeAT database: create database seat; The output should be similar to the below: mysql> create database seat; Query OK, 1 row affected (0.00 sec) Next, we create the user that SeAT itself will use to connect and use the seat database: GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Of course, you need to replace s_p3rs3c3r3tp455w0rd with your own. Successfully running this should present you with output similar to the below: mysql> GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Query OK, 0 rows affected (0.00 sec) In the example above, we have effectively declared that SeAT will be using the database as seat:s_p3rs3c3r3tp455w0rd@localhost/seat . NOTE Remember the password for the seat database user as we will need it later to configure SeAT. php & apache SeAT is written in PHP, and therefore we need to install the PHP interpreter. We also need to install a web server that will allow us to serve the web front end that comes with SeAT. Install the required packages with: apt-get install apache2 php php-cli php-mcrypt php-intl php-mysql php-curl php-gd php-mbstring php-bz2 php-dom -y redis SeAT makes use of Redis as a cache and message broker for the Queue backend. Installing it is really easy. Do it with: apt-get install redis-server -y composer and git SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r Successful installation should output something like: [root@seat ~]# curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r #!/usr/bin/env php All settings correct for using Composer Downloading... Composer successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer As all of the source code is hosted on Github which is a Git based source control system, we need to install git itself. Do this with: apt-get install git -y seat download Finally, we get to install SeAT itself. The first thing we need to do is to decide where to save SeAT itself. This directory should have enough space for the cached XML files to live on, as well as a few log files should you need to debug problems. The recommended location is /var/www/seat/ . To save SeAT in this directory, first change to it: cd /var/www Next, we will download SeAT using composer and save it to the seat directory. NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully. seat permissions SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. That together with the fact that the web content will be hosted by apache means that we need to configure the files permissions to allow SeAT do do its thing. First, lets ensure that www-data owns everything in /var/www/seat which is the folder we just downloaded SeAT to: chown -R www-data:www-data /var/www/seat Next, we will allow Apache to write to the seat/storage/ directory so that it may manipulate the files in there as needed: chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use! seat setup Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email supervisor SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Lets install supervisor: apt-get install supervisor -y We now have to configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisor/conf.d/ called seat.conf (Note that the number of workers that we want to start is set by the numprocs setting): [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=www-data Save your file and reload supervisord so that it is aware of the changes that we have made: supervisorctl reload Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors. crontab So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". We will add the cronjob as the www-data user as this is the user that has had all its permissions configured earlier. Open up the crontab for www-data with: crontab -u www-data -e Next, paste the following line at the bottom of the file (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1 webserver - apache In order to get the SeAT fronted running, we need to configure Apache to serve our SeAT installs public/ folder. This is the only folder that should be internet facing. That small index.php is the gateway into the application. The Apache configuration itself will depend on how your server is set up. Generally, virtual hosting is the way to go, and this is what I will be showing here. virtual host setup Getting the virtual host setup is as simple as creating a new configuration file (I usually call it the sites-domain.conf ), and modifying it to match your setup. Everywhere you see seat.local as the hostname in the below examples it needs to be substituted to your actual domain. Next, we have to configure Apache itself to know about the directories and stuff SeAT needs. We need to create that sites-domain.conf file I mentioned. This file should live in /etc/apache2/sites-available/ , so lets change directories there: /etc/apache2/sites-available/ Now, create the conf file. In my case, the domain is seat.local , so I will call it seat.local.conf . Add the following contents to that file: <VirtualHost *:80> ServerAdmin webmaster@seat.local DocumentRoot \"/var/www/seat/public\" ServerName seat.local ServerAlias www.seat.local ErrorLog /var/log/apache2/seat.local-error.log CustomLog /var/log/apache2/seat.local-access.log combined <Directory \"/var/www/seat/public\"> AllowOverride All Order allow,deny Allow from all </Directory> </VirtualHost> Now, we need to enable our virtual host with this command sudo a2ensite seat.local Considering we need to use mod_rewrite to get our URL's to display correctly, we can quickly enable that by running the below: a2enmod rewrite Finally, restart apache. apachectl restart That should be it from a configuration perspective. We can confirm that everything is configured correctly by running: [root@seat conf.d]# apachectl -t -D DUMP_VHOSTS httpd: Could not reliably determine the server's fully qualified domain name, using seat.localdomain for ServerName VirtualHost configuration: wildcard NameVirtualHosts and _default_ servers: *:80 seat.local (/etc/httpd/conf.d/seat.local.conf:1) Syntax OK Thats it! SeAT should now be available at http://your-domain-or-ip/","title":"Ubuntu 16.x"},{"location":"installation_guides/ubuntu16x/#getting-started","text":"We are going to assume you have root access to a fresh Ubuntu 16x Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation & configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MySQL databases and or websites), then please keep that in mind while following this guide. Packages are installed using the aptitude package manager as the root user.","title":"getting started"},{"location":"installation_guides/ubuntu16x/#table-of-contents","text":"Database PHP & Apache Redis Composer and Git SeAT - Download SeAT - Permissions SeAT - Setup Supervisor Crontab Webserver - Apache i. Virtual Host Setup","title":"table of contents"},{"location":"installation_guides/ubuntu16x/#database","text":"SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users etc. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required. Lets install the database server first: apt-get install mysql-server expect -y Next, we are going to secure the database server by removing anonymous access and setting a root password. NOTE The database root password should not be confused with the operating systems root passwords. They are both completely different. They should also not be the same password. To secure the database, run: mysql_secure_installation This will ask you a series of questions, below is how these should be answered: [...] Enter current password for root (enter for none): BY DEFAULT IT IS NONE, PRESS ENTER OK, successfully used password, moving on... [...] Set root password? [Y/n] y New password: SET A STRONG PASSWORD HERE Re-enter new password: SET A STRONG PASSWORD HERE Password updated successfully! Reloading privilege tables.. ... Success! [...] Remove anonymous users? [Y/n] y ... Success! [...] Disallow root login remotely? [Y/n] y ... Success! [...] Remove test database and access to it? [Y/n] y [...] Reload privilege tables now? [Y/n] y ... Success! [...] That concludes the installation of the database server and securing it. Next, we need to create an actual database for SeAT to use on the server. For that we need to use the MySQL command line client and enter a few commands to create the database and the user that will be accessing it. Let get to it. Fire up the MySQL client by running: mysql -uroot -p This will prompt you for a password. Use the password you configured for the root account when we ran mysql_secure_installation . This will most probably be the last time you need to use this password :) If the password was correct, you should see a prompt similar to the one below: [...] mysql> Lets run the command to create the SeAT database: create database seat; The output should be similar to the below: mysql> create database seat; Query OK, 1 row affected (0.00 sec) Next, we create the user that SeAT itself will use to connect and use the seat database: GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Of course, you need to replace s_p3rs3c3r3tp455w0rd with your own. Successfully running this should present you with output similar to the below: mysql> GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd'; Query OK, 0 rows affected (0.00 sec) In the example above, we have effectively declared that SeAT will be using the database as seat:s_p3rs3c3r3tp455w0rd@localhost/seat . NOTE Remember the password for the seat database user as we will need it later to configure SeAT.","title":"database"},{"location":"installation_guides/ubuntu16x/#php-apache","text":"SeAT is written in PHP, and therefore we need to install the PHP interpreter. We also need to install a web server that will allow us to serve the web front end that comes with SeAT. Install the required packages with: apt-get install apache2 php php-cli php-mcrypt php-intl php-mysql php-curl php-gd php-mbstring php-bz2 php-dom -y","title":"php &amp; apache"},{"location":"installation_guides/ubuntu16x/#redis","text":"SeAT makes use of Redis as a cache and message broker for the Queue backend. Installing it is really easy. Do it with: apt-get install redis-server -y","title":"redis"},{"location":"installation_guides/ubuntu16x/#composer-and-git","text":"SeAT makes use of the de-facto PHP dependency manager called Composer . Composer is required to both install and update SeAT at a later stage. It is for this reason that it is recommended that you install composer globally on your server so that you can access it by simply typing composer . Lets set that up by downloading Composer and saving it to /usr/local/bin : curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r Successful installation should output something like: [root@seat ~]# curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && hash -r #!/usr/bin/env php All settings correct for using Composer Downloading... Composer successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer As all of the source code is hosted on Github which is a Git based source control system, we need to install git itself. Do this with: apt-get install git -y","title":"composer and git"},{"location":"installation_guides/ubuntu16x/#seat-download","text":"Finally, we get to install SeAT itself. The first thing we need to do is to decide where to save SeAT itself. This directory should have enough space for the cached XML files to live on, as well as a few log files should you need to debug problems. The recommended location is /var/www/seat/ . To save SeAT in this directory, first change to it: cd /var/www Next, we will download SeAT using composer and save it to the seat directory. NOTE This can take some time, Composer does a ton of magic here :+1: (like recursively resolving all dependencies :O) composer create-project eveseat/seat seat --no-dev Successful installation should end with something like: Writing lock file Generating autoload files > Illuminate\\Foundation\\ComposerScripts::postUpdate > php artisan optimize Generating optimized class loader Compiling common classes > php artisan key:generate Application key [base64:WFfzkuIpUGpkDNu0SRtwhPphpM66UvzuZpEML/6dEVQ=] set successfully.","title":"seat download"},{"location":"installation_guides/ubuntu16x/#seat-permissions","text":"SeAT writes logfiles/cachefiles and other temporary data to the seat/storage/ directory. That together with the fact that the web content will be hosted by apache means that we need to configure the files permissions to allow SeAT do do its thing. First, lets ensure that www-data owns everything in /var/www/seat which is the folder we just downloaded SeAT to: chown -R www-data:www-data /var/www/seat Next, we will allow Apache to write to the seat/storage/ directory so that it may manipulate the files in there as needed: chmod -R guo+w /var/www/seat/storage/ SeAT is now downloaded and almost ready for use!","title":"seat permissions"},{"location":"installation_guides/ubuntu16x/#seat-setup","text":"Next, we need to configure SeAT to know where the database server lives. Do this by editing /var/www/seat/.env and setting the appropriate values: DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=seat DB_USERNAME=seat DB_PASSWORD=s_p3rs3c3r3tp455w0rd DB_DEBUG=false Moving on, we should publish the internal databse migrations, css & javasript, and other goodies with: php artisan vendor:publish --force Next, run the database migrations to get the SeAT database ready for use: php artisan migrate Next, we need to run the seeders to populate som default data for SeAT to use: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Next, the latest static data export must be downloaded and imported with: php artisan eve:update-sde -n And finally, the SeAT admin user needs to have a password set. There is no default SeAT admin password. php artisan seat:admin:reset One last thing, an email address is needed for the admin user too. php artisan seat:admin:email","title":"seat setup"},{"location":"installation_guides/ubuntu16x/#supervisor","text":"SeAT makes use of workers to actually process the update jobs that get scheduled. Think if the architecture as someone coming and dumping mail at the postoffice, and its up to say 4 workers to dig through the mail and sort it. Those 4 workers need a manager to ensure that they keep working. supervisord is a excellent candidate for the manager job. Lets install supervisor: apt-get install supervisor -y We now have to configure the actual workers that supervisord will manage. We do this by adding a new configuration file to /etc/supervisor/conf.d/ called seat.conf (Note that the number of workers that we want to start is set by the numprocs setting): [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=www-data Save your file and reload supervisord so that it is aware of the changes that we have made: supervisorctl reload Lastly, check that everything is OK and the workers have started up: [root@seat seat]# supervisorctl status seat:seat-8000 RUNNING pid 5083, uptime 0:00:28 seat:seat-8001 RUNNING pid 5082, uptime 0:00:28 seat:seat-8002 RUNNING pid 5085, uptime 0:00:28 seat:seat-8003 RUNNING pid 5084, uptime 0:00:28 If you do not have output such as in the above block, check the log files for any possible errors.","title":"supervisor"},{"location":"installation_guides/ubuntu16x/#crontab","text":"So far, we have SeAT workers running meaning that it is ready to process jobs that enter the Queue. We now need a way to add jobs to that Queue for processing by the workers. SeAT has a build in schedule for when what should run at which interval. With the cronjob, we are simply telling SeAT to check every minute \"is there anything we should be doing?\". We will add the cronjob as the www-data user as this is the user that has had all its permissions configured earlier. Open up the crontab for www-data with: crontab -u www-data -e Next, paste the following line at the bottom of the file (remember to check the path if you chose one other that the one in this guide): * * * * * /usr/bin/php /var/www/seat/artisan schedule:run 1>> /dev/null 2>&1","title":"crontab"},{"location":"installation_guides/ubuntu16x/#webserver-apache","text":"In order to get the SeAT fronted running, we need to configure Apache to serve our SeAT installs public/ folder. This is the only folder that should be internet facing. That small index.php is the gateway into the application. The Apache configuration itself will depend on how your server is set up. Generally, virtual hosting is the way to go, and this is what I will be showing here.","title":"webserver - apache"},{"location":"installation_guides/ubuntu16x/#virtual-host-setup","text":"Getting the virtual host setup is as simple as creating a new configuration file (I usually call it the sites-domain.conf ), and modifying it to match your setup. Everywhere you see seat.local as the hostname in the below examples it needs to be substituted to your actual domain. Next, we have to configure Apache itself to know about the directories and stuff SeAT needs. We need to create that sites-domain.conf file I mentioned. This file should live in /etc/apache2/sites-available/ , so lets change directories there: /etc/apache2/sites-available/ Now, create the conf file. In my case, the domain is seat.local , so I will call it seat.local.conf . Add the following contents to that file: <VirtualHost *:80> ServerAdmin webmaster@seat.local DocumentRoot \"/var/www/seat/public\" ServerName seat.local ServerAlias www.seat.local ErrorLog /var/log/apache2/seat.local-error.log CustomLog /var/log/apache2/seat.local-access.log combined <Directory \"/var/www/seat/public\"> AllowOverride All Order allow,deny Allow from all </Directory> </VirtualHost> Now, we need to enable our virtual host with this command sudo a2ensite seat.local Considering we need to use mod_rewrite to get our URL's to display correctly, we can quickly enable that by running the below: a2enmod rewrite Finally, restart apache. apachectl restart That should be it from a configuration perspective. We can confirm that everything is configured correctly by running: [root@seat conf.d]# apachectl -t -D DUMP_VHOSTS httpd: Could not reliably determine the server's fully qualified domain name, using seat.localdomain for ServerName VirtualHost configuration: wildcard NameVirtualHosts and _default_ servers: *:80 seat.local (/etc/httpd/conf.d/seat.local.conf:1) Syntax OK Thats it! SeAT should now be available at http://your-domain-or-ip/","title":"virtual host setup"},{"location":"seat_api/characters/","text":"Character All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie . Available Methods Assets Bookmarks Contacts Channels Character Info Industry Killmails Market Orders Contracts Character Sheet Skills Skill In Training Skill Queue Wallet Journal Wallet Transactions Employment History Implants Jump Clones Account Info Mail Notifications Planetary Interaction Standings Research Calendar Events Character Assets Type Detail HTTP Verb GET Endpoint /api/v1/character/assets/{character_id} Description Get a characters assets list. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/assets/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"anchorable\": 0, \"anchored\": 0, \"basePrice\": null, \"capacity\": 115, \"categoryID\": 6, \"characterID\": 123456, \"created_at\": \"2015-11-21 15:17:48\", \"description\": \"The Impairor-class rookie ship has been mass-produced by the Amarr Empire for decades. It is the most common spacevessel sighted within the Amarrian boundaries, and is used both as a basic trade vessel and as a small-scale slave transport. \", \"fittableNonSingleton\": 0, \"flag\": 4, \"groupID\": 237, \"groupName\": \"Rookie ship\", \"iconID\": 0, \"itemID\": 1012596637277, \"locID\": 61000423, \"location\": \"NLO-3Z VI - NLO ne proletalo\", \"locationID\": 61000423, \"marketGroupID\": 1816, \"mass\": 1148000, \"portionSize\": 1, \"published\": 1, \"quantity\": 1, \"raceID\": 4, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": 20063, \"typeID\": 596, \"typeName\": \"Impairor\", \"updated_at\": \"2015-11-21 15:17:48\", \"useBasePrice\": 0, \"volume\": 28100 } ] Character Bookmarks Type Detail HTTP Verb GET Endpoint /api/v1/character/bookmarks/{character_id} Description Get a characters bookmarks. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/bookmarks/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"bookmarkID\": 123456, \"characterID\": 123456, \"created\": \"2012-12-28 22:22:29\", \"created_at\": \"2015-12-18 20:59:33\", \"creatorID\": 123456, \"folderID\": 0, \"folderName\": \"\", \"id\": 5, \"itemID\": 0, \"locationID\": 123456, \"mapID\": 123456, \"mapName\": \"Oh - Asteroid Belt 4\", \"memo\": \"Thing\", \"note\": \"\", \"typeID\": 5, \"updated_at\": \"2015-12-18 21:10:48\", \"x\": 571196991137.98, \"y\": 26236744140.097, \"z\": -723589323955.36 } ] Character Channels Type Detail HTTP Verb GET Endpoint /api/v1/character/channels/{character_id} Description Get a characters chat channels. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/channels/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"channelID\": -123456, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:23:23\", \"info\": { \"channelID\": -123456, \"comparisonKey\": \"abc-chan\", \"created_at\": \"2015-11-21 14:23:23\", \"displayName\": \"ABC Chan\", \"hasPassword\": 0, \"motd\": \"Some MoTD\", \"ownerID\": 123456, \"ownerName\": \"ABC\", \"updated_at\": \"2015-12-18 21:41:40\" }, \"members\": [ { \"accessorID\": 123456, \"accessorName\": \"ABC\", \"channelID\": -123456, \"created_at\": \"2015-11-21 14:23:23\", \"id\": 5, \"reason\": null, \"role\": \"allowed\", \"untilWhen\": null, \"updated_at\": \"2015-11-21 14:23:23\" } ], \"updated_at\": \"2015-11-21 14:23:23\" } ] Character Contacts Type Detail HTTP Verb GET Endpoint /api/v1/character/contacts/{character_id} Description Get a characters contacts list. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/contacts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"contactID\": 123, \"contactName\": \"Bob\", \"contactTypeID\": 16159, \"created_at\": \"2015-11-21 15:17:55\", \"inWatchlist\": 0, \"labelMask\": 0, \"standing\": -10, \"updated_at\": \"2015-11-21 15:17:55\" } ] Character Info Type Detail HTTP Verb GET Endpoint /api/v1/character/info/{character_id} Description Get information about the character. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/info/123456 Accept:application/json X-Token:123456 Sample Response: { \"accountBalance\": \"9349819.63\", \"alliance\": null, \"allianceDate\": null, \"allianceID\": null, \"ancestry\": \"Cyber Knights\", \"ancestryID\": 37, \"bloodline\": \"Khanid\", \"bloodlineID\": 13, \"characterID\": 123456, \"characterName\": \"Bob\", \"corporation\": \"Bob's Corp\", \"corporationDate\": \"2013-08-19 13:34:00\", \"corporationID\": 123456, \"corporationName\": \"Bob's Corp\", \"created_at\": \"2015-11-21 14:14:50\", \"keyID\": 1111223, \"lastKnownLocation\": \"CO-7BI\", \"nextTrainingEnds\": null, \"race\": \"Amarr\", \"securityStatus\": \"0.0000000000000\", \"shipName\": \"Bob's Sarum Magnate\", \"shipTypeID\": 29248, \"shipTypeName\": \"Magnate\", \"skillPoints\": 1219086, \"updated_at\": \"2015-11-21 15:17:42\" } Character Industry Type Detail HTTP Verb GET Endpoint /api/v1/character/industry/{character_id} Description Get a list of the characters industry jobs. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/industry/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"activityID\": 1, \"activityName\": \"Manufacturing\", \"blueprintID\": 1004842307489, \"blueprintLocationID\": 60013072, \"blueprintTypeID\": 2517, \"blueprintTypeName\": \"Nova Rocket Blueprint\", \"characterID\": 123456, \"completedCharacterID\": 0, \"completedDate\": \"0001-01-01 00:00:00\", \"cost\": 0, \"created_at\": \"2015-11-21 14:37:35\", \"description\": \"Manufacturing\", \"endDate\": \"2012-12-06 15:42:50\", \"facilityID\": 60013072, \"facilityName\": \"WY-9LL VIII - Moon 3 - Dominations Testing Facilities\", \"iconNo\": \"18_02\", \"id\": 23, \"installerID\": 123456, \"installerName\": \"Bob\", \"jobID\": 159368411, \"licensedRuns\": 0, \"outputLocationID\": 60013072, \"pauseDate\": \"0001-01-01 00:00:00\", \"probability\": 0, \"productTypeID\": 2516, \"productTypeName\": \"Nova Rocket\", \"published\": 1, \"runs\": 100, \"solarSystemID\": 30004621, \"solarSystemName\": \"WY-9LL\", \"startDate\": \"2012-12-06 09:02:50\", \"stationID\": 60013072, \"status\": 1, \"successfulRuns\": 0, \"teamID\": 0, \"timeInSeconds\": 24000, \"updated_at\": \"2015-11-25 13:59:31\" } ] Character Killmails Type Detail HTTP Verb GET Endpoint /api/v1/character/killmails/{character_id} Description Get a list of the characters killmails. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/killmails/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allianceID\": 123456, \"allianceName\": \"Bob Alliance\", \"basePrice\": null, \"capacity\": 0, \"celestialIndex\": null, \"characterID\": 123456, \"characterName\": \"Bob\", \"constellationID\": 20000124, \"corporationID\": 123456, \"corporationName\": \"Bob's Corp\", \"created_at\": \"2015-11-25 14:17:51\", \"damageTaken\": 464, \"description\": \"Standard capsule.\", \"factionID\": 0, \"factionName\": \"\", \"groupID\": 5, \"iconID\": 73, \"itemID\": 30000848, \"itemName\": \"M-OEE8\", \"killID\": 50337764, \"killTime\": \"2015-11-24 17:15:10\", \"marketGroupID\": null, \"mass\": 32000, \"moonID\": 0, \"orbitID\": null, \"orbitIndex\": null, \"ownerID\": 123456, \"portionSize\": 1, \"published\": 0, \"raceID\": 16, \"radius\": 4145289179056, \"regionID\": 10000010, \"security\": -0.218329, \"shipTypeID\": 670, \"solarSystemID\": null, \"soundID\": 20080, \"typeID\": 5, \"typeName\": \"Capsule\", \"updated_at\": \"2015-11-25 14:17:51\", \"victimID\": 1209964167, \"volume\": 1000, \"x\": -1.4759869943375e+17, \"y\": 7.9788702592936e+16, \"z\": 2.0063317959704e+17 } ] Character Market Orders Type Detail HTTP Verb GET Endpoint /api/v1/character/market-orders/{character_id} Description Get a list of the characters market orders. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/market-orders/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 1000, \"anchorable\": 1, \"anchored\": 0, \"basePrice\": null, \"bid\": 0, \"capacity\": 0, \"categoryID\": 22, \"charID\": 123456, \"created_at\": \"2015-11-21 14:56:54\", \"description\": \"A Medium deployable self powered unit that prevents warping within its area of effect. \", \"duration\": 90, \"escrow\": \"0.00\", \"fittableNonSingleton\": 0, \"groupID\": 361, \"groupName\": \"Mobile Warp Disruptor\", \"iconID\": 0, \"id\": 643, \"issued\": \"2015-08-28 09:33:49\", \"marketGroupID\": 405, \"mass\": 0, \"minVolume\": 1, \"orderID\": 4239146614, \"orderState\": 0, \"portionSize\": 1, \"price\": \"6428570.71\", \"published\": 1, \"raceID\": null, \"range\": 32767, \"soundID\": null, \"stationID\": 60015138, \"stationName\": \"Dihra V - 24th Imperial Crusade Logistic Support\", \"typeID\": 12199, \"typeName\": \"Mobile Medium Warp Disruptor I\", \"updated_at\": \"2015-11-21 14:56:54\", \"useBasePrice\": 0, \"volEntered\": 1, \"volRemaining\": 1, \"volume\": 195 } ] Character Contracts Type Detail HTTP Verb GET Endpoint /api/v1/character/contracts/{character_id} Description Get a list of the characters contracts. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/contracts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"acceptorID\": 123456, \"assigneeID\": 123456, \"availability\": \"Private\", \"buyout\": \"0.00\", \"characterID\": 123456, \"collateral\": \"0.00\", \"contractID\": 98201250, \"created_at\": \"2015-11-21 14:56:12\", \"dateAccepted\": \"2015-10-23 11:53:20\", \"dateCompleted\": \"2015-10-23 11:53:20\", \"dateExpired\": \"2015-11-06 11:52:59\", \"dateIssued\": \"2015-10-23 11:52:59\", \"endStationID\": 61000655, \"endlocation\": \"2D-0SO XI - Tax Evasion No More\", \"forCorp\": 0, \"issuerCorpID\": 123456, \"issuerID\": 123456, \"numDays\": 0, \"price\": \"0.00\", \"reward\": \"0.00\", \"startStationID\": 61000655, \"startlocation\": \"2D-0SO XI - Tax Evasion No More\", \"status\": \"Completed\", \"title\": \"\", \"type\": \"ItemExchange\", \"updated_at\": \"2015-11-21 14:56:12\", \"volume\": 112000 } ] Character Sheet Type Detail HTTP Verb GET Endpoint /api/v1/character/sheet/{character_id} Description Get a characters character sheet. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/sheet/123456 Accept:application/json X-Token:123456 Sample Response: { \"DoB\": \"2006-11-16 05:36:00\", \"allianceID\": 123456, \"allianceName\": \"Bob's Alliance\", \"ancestry\": \"Artists\", \"ancestryID\": 16, \"balance\": \"101524292.93\", \"bloodLine\": \"Intaki\", \"bloodLineID\": 8, \"characterID\": 123456, \"charisma\": 17, \"cloneJumpDate\": \"2015-09-21 06:21:39\", \"cloneName\": \"Clone Grade Alpha\", \"cloneSkillPoints\": 0, \"cloneTypeID\": 164, \"corporationID\": 123456, \"corporationName\": \"Bob's Corporation\", \"created_at\": \"2015-11-21 14:56:03\", \"factionID\": 0, \"factionName\": \"\", \"freeRespecs\": 0, \"freeSkillPoints\": 0, \"gender\": \"Male\", \"homeStationID\": 123456, \"intelligence\": 23, \"jumpActivation\": \"2015-11-24 08:09:00\", \"jumpFatigue\": \"2015-11-24 09:00:32\", \"jumpLastUpdate\": \"2015-11-24 08:03:17\", \"lastRespecDate\": \"2012-12-13 22:50:46\", \"lastTimedRespec\": \"2012-12-13 22:50:46\", \"memory\": 19, \"name\": \"Sso\", \"perception\": 23, \"race\": \"Gallente\", \"remoteStationDate\": \"2014-12-15 08:11:21\", \"updated_at\": \"2015-11-25 14:17:38\", \"willpower\": 17 } Character Skills Type Detail HTTP Verb GET Endpoint /api/v1/character/skills/{character_id} Description Get a characters skills. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/skills/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"anchorable\": 0, \"anchored\": 0, \"basePrice\": \"2000000.0000\", \"capacity\": 0, \"categoryID\": 16, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:56:03\", \"description\": \"Grants the Wing Commander the ability to pass on their bonuses to an additional Squadron per skill level, up to a maximum of 5 Squadrons. \\r\\n\\r\\n<font color=\\\"0xffF67828\\\"><b>This skill cannot be trained on Trial Accounts.</b></font> \", \"fittableNonSingleton\": 0, \"groupID\": 258, \"groupName\": \"Leadership\", \"iconID\": null, \"id\": 28834, \"level\": 2, \"marketGroupID\": 370, \"mass\": 0, \"portionSize\": 1, \"published\": 1, \"raceID\": 4, \"skillpoints\": 11314, \"soundID\": null, \"typeID\": 11574, \"typeName\": \"Wing Command\", \"updated_at\": \"2015-11-21 14:56:03\", \"useBasePrice\": 1, \"volume\": 0.01 } ] Character Skill In Training Type Detail HTTP Verb GET Endpoint /api/v1/character/skill-in-training/{character_id} Description Get a the current skill in training for a character. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/skill-in-training/123456 Accept:application/json X-Token:123456 Sample Response: { \"basePrice\": \"4000000.0000\", \"capacity\": 0, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:57:04\", \"currentTQTime\": \"2015-11-24 12:28:36\", \"description\": \"Skill for the operation of Electronic Attack Frigates. \\r\\n\\r\\n<font color=\\\"0xffF67828\\\"><b>This skill cannot be trained on Trial Accounts.</b></font>\", \"groupID\": 257, \"iconID\": 33, \"marketGroupID\": 377, \"mass\": 0, \"portionSize\": 1, \"published\": 1, \"raceID\": null, \"skillInTraining\": 1, \"soundID\": null, \"trainingDestinationSP\": 181020, \"trainingEndTime\": \"2015-11-25 15:25:33\", \"trainingStartSP\": 33911, \"trainingStartTime\": \"2015-11-22 16:21:32\", \"trainingToLevel\": 4, \"trainingTypeID\": 28615, \"typeID\": 28615, \"typeName\": \"Electronic Attack Ships\", \"updated_at\": \"2015-11-24 12:28:36\", \"volume\": 0.01 } Character Skill Queue Type Detail HTTP Verb GET Endpoint /api/v1/character/skill-queue/{character_id} Description Get a the current queue for a character. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/skill-queue/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"basePrice\": \"20000000.0000\", \"capacity\": 0, \"characterID\": 123456, \"created_at\": \"2015-11-24 12:28:38\", \"description\": \"Skill for operation of Interdictors.\\r\\n\\r\\n<font color=\\\"0xffF67828\\\"><b>This skill cannot be trained on Trial Accounts.</b></font>\", \"endSP\": 1280000, \"endTime\": \"2016-06-28 01:02:56\", \"groupID\": 257, \"iconID\": 33, \"level\": 5, \"marketGroupID\": 377, \"mass\": 0, \"portionSize\": 1, \"published\": 1, \"queuePosition\": 11, \"raceID\": null, \"soundID\": null, \"startSP\": 226275, \"startTime\": \"2016-06-06 20:00:11\", \"typeID\": 12098, \"typeName\": \"Interdictors\", \"updated_at\": \"2015-11-24 12:28:38\", \"volume\": 0.01 } ] Character Wallet Journal Type Detail HTTP Verb GET Endpoint /api/v1/character/wallet-journal/{character_id} Description Get a characters wallet journal. Returns the last 1000 entries. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/wallet-journal/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"amount\": \"10249.55\", \"argID1\": 123456, \"argName1\": \"YI-8ZM\", \"balance\": \"34081939.17\", \"characterID\": 123456, \"created_at\": \"2015-11-27 12:22:24\", \"date\": \"2015-10-13 09:54:13\", \"hash\": \"3e2d590ad1113863ec687bc5f22b1159\", \"owner1TypeID\": 2, \"owner2TypeID\": 1378, \"ownerID1\": 123456, \"ownerID2\": 123456, \"ownerName1\": \"CONCORD\", \"ownerName2\": \"Bob\", \"reason\": \"23441:1,\", \"refID\": 11765665857, \"refTypeID\": 85, \"refTypeName\": \"Bounty Prizes\", \"taxAmount\": \"0.00\", \"taxReceiverID\": 0, \"updated_at\": \"2015-11-27 12:22:24\" } ] Character Wallet Transactions Type Detail HTTP Verb GET Endpoint /api/v1/character/wallet-transactions/{character_id} Description Get a characters wallet transactions. Returns the last 1000 entries. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/wallet-transactions/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"clientID\": 123456, \"clientName\": \"Bob\", \"clientTypeID\": 1383, \"created_at\": \"2015-11-21 14:57:20\", \"hash\": \"c9d87c8dea4023f96e8305026340b196\", \"journalTransactionID\": 11766105679, \"price\": \"1249500.00\", \"quantity\": 1, \"stationID\": 61000802, \"stationName\": \"3V8-LJ IV - DOKDO-SUPREMACY\", \"transactionDateTime\": \"2015-10-13 13:49:33\", \"transactionFor\": \"personal\", \"transactionID\": 4094239844, \"transactionType\": \"buy\", \"typeID\": 3244, \"typeName\": \"Warp Disruptor II\", \"updated_at\": \"2015-11-21 14:57:20\" } ] Character Employment History Type Detail HTTP Verb GET Endpoint /api/v1/character/employment-history/{character_id} Description Get a characters employment history. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/employment-history/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"corporationID\": 1000169, \"corporationName\": \"Center for Advanced Studies\", \"created_at\": \"2015-11-21 14:17:39\", \"recordID\": 3207893, \"startDate\": \"2006-11-16 05:36:00\", \"updated_at\": \"2015-11-21 14:17:39\" } ] Character Implants Type Detail HTTP Verb GET Endpoint /api/v1/character/implants/{character_id} Description Get a characters implants. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/implants/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"2015-11-25 14:17:38\", \"id\": 7984, \"typeID\": 10221, \"typeName\": \"Cybernetic Subprocessor - Standard\", \"updated_at\": \"2015-11-25 14:17:38\" } ] Character Jump Clones Type Detail HTTP Verb GET Endpoint /api/v1/character/jump-clones/{character_id} Description Get a characters jump clones. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/jump-clones/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"basePrice\": null, \"capacity\": 0, \"characterID\": 123456, \"cloneName\": \"\", \"created_at\": \"2015-11-25 14:17:38\", \"description\": \"\", \"groupID\": 23, \"iconID\": 34, \"jumpCloneID\": 23063005, \"locID\": 61000802, \"location\": \"3V8-LJ IV - DOKDO-SUPREMACY\", \"locationID\": 61000802, \"marketGroupID\": null, \"mass\": 0, \"portionSize\": 1, \"published\": 0, \"raceID\": null, \"soundID\": null, \"typeID\": 164, \"typeName\": \"Clone Grade Alpha\", \"updated_at\": \"2015-11-25 14:17:38\", \"volume\": 1 } ] Character Account Info Type Detail HTTP Verb GET Endpoint /api/v1/character/account-info/{character_id} Description Get a characters account information. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/account-info/123456 Accept:application/json X-Token:123456 Sample Response: { \"createDate\": \"2013-11-29 07:18:00\", \"created_at\": \"2015-11-21 14:17:37\", \"keyID\": 123456, \"logonCount\": 2639, \"logonMinutes\": 242426, \"paidUntil\": \"2015-12-19 12:49:41\", \"updated_at\": \"2015-11-25 14:17:26\" } Character Mail Type Detail HTTP Verb GET Endpoint /api/v1/character/mail/{character_id} Description Get a characters mail. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/mail/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"body\": \"Stuff\", \"characterID\": 123456, \"created_at\": \"2015-11-21 14:20:40\", \"id\": 8115, \"messageID\": 123456, \"senderID\": 123456, \"senderName\": \"Bob\", \"sentDate\": \"2015-10-21 06:24:00\", \"title\": \"Stuff\", \"toCharacterIDs\": \"\", \"toCorpOrAllianceID\": 123456, \"toListID\": 0, \"updated_at\": \"2015-11-21 14:20:40\" } ] Character Notifications Type Detail HTTP Verb GET Endpoint /api/v1/character/notifications/{character_id} Description Get a characters notifications. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/notifications/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"-0001-11-30 00:00:00\", \"desc\": \"Mercenary Invitation Accepted\", \"id\": 128, \"notificationID\": 537637998, \"read\": 0, \"senderID\": 123456, \"senderName\": \"Bob\", \"sentDate\": \"2015-11-18 08:34:00\", \"text\": \"applicationText: blah\", \"typeID\": 128, \"updated_at\": \"-0001-11-30 00:00:00\" } ] Character Planetary Interaction Type Detail HTTP Verb GET Endpoint /api/v1/character/pi/{character_id} Description Get a characters planetary colonies. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/pi/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"created_at\": \"2015-11-21 14:21:01\", \"lastUpdate\": \"2013-06-08 19:58:45\", \"numberOfPins\": 4, \"ownerID\": 123456, \"ownerName\": \"Bob\", \"planetID\": 40318582, \"planetName\": \"Ommare IX\", \"planetTypeID\": 13, \"planetTypeName\": \"Planet (Gas)\", \"solarSystemID\": 30005027, \"solarSystemName\": \"Ommare\", \"updated_at\": \"2015-11-21 14:21:01\", \"upgradeLevel\": 3 } ] Character Standings Type Detail HTTP Verb GET Endpoint /api/v1/character/standings/{character_id} Description Get a characters standings. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/standings/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"2015-11-21 14:57:08\", \"fromID\": 500020, \"fromName\": \"Serpentis\", \"id\": 10459, \"standing\": -9.41, \"type\": \"factions\", \"updated_at\": \"2015-11-21 14:57:08\" } ] Character Research Type Detail HTTP Verb GET Endpoint /api/v1/character/research/{character_id} Description Get a characters research. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/research/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"agentID\": 3013751, \"basePrice\": \"10000000.0000\", \"capacity\": 0, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:57:02\", \"description\": \"Skill and knowledge of Plasma physics and its use in the development of advanced technology. \\r\\n\\r\\nUsed primarily in the research of particle blaster weaponry as well as plasma based missiles and smartbombs. \\r\\n\\r\\nAllows Plasma Physics research to be performed with the help of a research agent. 1% reduction in manufacturing time for all items requiring Plasma Physics per level.\\r\\n\\r\\nNeeded for all research and manufacturing operations on related blueprints.\", \"groupID\": 270, \"iconID\": 33, \"id\": 47, \"itemID\": 3013751, \"itemName\": \"Charie Porelotta\", \"marketGroupID\": 375, \"mass\": 0, \"pointsPerDay\": 61.25, \"portionSize\": 1, \"published\": 1, \"raceID\": 4, \"remainderPoints\": 77302.81, \"researchStartDate\": \"2013-12-13 00:19:43\", \"skillTypeID\": 11441, \"soundID\": null, \"typeID\": 11441, \"typeName\": \"Plasma Physics\", \"updated_at\": \"2015-11-24 12:28:33\", \"volume\": 0.01 } ] Character Calendar Events Type Detail HTTP Verb GET Endpoint /api/v1/character/calendar/{character_id} Description Get a characters upcoming calendar events. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/calendar/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"2015-11-23 19:01:42\", \"duration\": 60, \"eventDate\": \"2015-11-24 17:00:00\", \"eventID\": 1254322, \"eventText\": \"To be tested:\\r\\nNew visual damage effects\\r\\n\\r\\nPlease refer to <a href=\\\"http://community.eveonline.com/news/news-channels/eve-online-news/check-out-the-new-visual-damage-effects-join-the-mass-test-november-24/\\\">this news item</a> for more info about this test.\\r\\n\\r\\nEasily connect to Singularity by using the <a href=\\\"https://forums.eveonline.com/default.aspx?g=posts&m=6140581\\\">new EVE Launcher (beta)</a>!\\r\\n\\r\\nAll participants will receive a reward of two million free skill points on Singularity.\", \"eventTitle\": \"Mass test on Singularity\", \"id\": 377, \"importance\": 0, \"ownerID\": 1, \"ownerName\": \"EVE System\", \"ownerTypeID\": 0, \"response\": \"Undecided\", \"updated_at\": \"2015-11-23 19:01:42\" } ]","title":"Characters"},{"location":"seat_api/characters/#character","text":"All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie .","title":"Character"},{"location":"seat_api/characters/#available-methods","text":"Assets Bookmarks Contacts Channels Character Info Industry Killmails Market Orders Contracts Character Sheet Skills Skill In Training Skill Queue Wallet Journal Wallet Transactions Employment History Implants Jump Clones Account Info Mail Notifications Planetary Interaction Standings Research Calendar Events","title":"Available Methods"},{"location":"seat_api/characters/#character-assets","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/assets/{character_id} Description Get a characters assets list. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/assets/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"anchorable\": 0, \"anchored\": 0, \"basePrice\": null, \"capacity\": 115, \"categoryID\": 6, \"characterID\": 123456, \"created_at\": \"2015-11-21 15:17:48\", \"description\": \"The Impairor-class rookie ship has been mass-produced by the Amarr Empire for decades. It is the most common spacevessel sighted within the Amarrian boundaries, and is used both as a basic trade vessel and as a small-scale slave transport. \", \"fittableNonSingleton\": 0, \"flag\": 4, \"groupID\": 237, \"groupName\": \"Rookie ship\", \"iconID\": 0, \"itemID\": 1012596637277, \"locID\": 61000423, \"location\": \"NLO-3Z VI - NLO ne proletalo\", \"locationID\": 61000423, \"marketGroupID\": 1816, \"mass\": 1148000, \"portionSize\": 1, \"published\": 1, \"quantity\": 1, \"raceID\": 4, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": 20063, \"typeID\": 596, \"typeName\": \"Impairor\", \"updated_at\": \"2015-11-21 15:17:48\", \"useBasePrice\": 0, \"volume\": 28100 } ]","title":"Character Assets"},{"location":"seat_api/characters/#character-bookmarks","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/bookmarks/{character_id} Description Get a characters bookmarks. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/bookmarks/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"bookmarkID\": 123456, \"characterID\": 123456, \"created\": \"2012-12-28 22:22:29\", \"created_at\": \"2015-12-18 20:59:33\", \"creatorID\": 123456, \"folderID\": 0, \"folderName\": \"\", \"id\": 5, \"itemID\": 0, \"locationID\": 123456, \"mapID\": 123456, \"mapName\": \"Oh - Asteroid Belt 4\", \"memo\": \"Thing\", \"note\": \"\", \"typeID\": 5, \"updated_at\": \"2015-12-18 21:10:48\", \"x\": 571196991137.98, \"y\": 26236744140.097, \"z\": -723589323955.36 } ]","title":"Character Bookmarks"},{"location":"seat_api/characters/#character-channels","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/channels/{character_id} Description Get a characters chat channels. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/channels/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"channelID\": -123456, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:23:23\", \"info\": { \"channelID\": -123456, \"comparisonKey\": \"abc-chan\", \"created_at\": \"2015-11-21 14:23:23\", \"displayName\": \"ABC Chan\", \"hasPassword\": 0, \"motd\": \"Some MoTD\", \"ownerID\": 123456, \"ownerName\": \"ABC\", \"updated_at\": \"2015-12-18 21:41:40\" }, \"members\": [ { \"accessorID\": 123456, \"accessorName\": \"ABC\", \"channelID\": -123456, \"created_at\": \"2015-11-21 14:23:23\", \"id\": 5, \"reason\": null, \"role\": \"allowed\", \"untilWhen\": null, \"updated_at\": \"2015-11-21 14:23:23\" } ], \"updated_at\": \"2015-11-21 14:23:23\" } ]","title":"Character Channels"},{"location":"seat_api/characters/#character-contacts","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/contacts/{character_id} Description Get a characters contacts list. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/contacts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"contactID\": 123, \"contactName\": \"Bob\", \"contactTypeID\": 16159, \"created_at\": \"2015-11-21 15:17:55\", \"inWatchlist\": 0, \"labelMask\": 0, \"standing\": -10, \"updated_at\": \"2015-11-21 15:17:55\" } ]","title":"Character Contacts"},{"location":"seat_api/characters/#character-info","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/info/{character_id} Description Get information about the character. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/info/123456 Accept:application/json X-Token:123456 Sample Response: { \"accountBalance\": \"9349819.63\", \"alliance\": null, \"allianceDate\": null, \"allianceID\": null, \"ancestry\": \"Cyber Knights\", \"ancestryID\": 37, \"bloodline\": \"Khanid\", \"bloodlineID\": 13, \"characterID\": 123456, \"characterName\": \"Bob\", \"corporation\": \"Bob's Corp\", \"corporationDate\": \"2013-08-19 13:34:00\", \"corporationID\": 123456, \"corporationName\": \"Bob's Corp\", \"created_at\": \"2015-11-21 14:14:50\", \"keyID\": 1111223, \"lastKnownLocation\": \"CO-7BI\", \"nextTrainingEnds\": null, \"race\": \"Amarr\", \"securityStatus\": \"0.0000000000000\", \"shipName\": \"Bob's Sarum Magnate\", \"shipTypeID\": 29248, \"shipTypeName\": \"Magnate\", \"skillPoints\": 1219086, \"updated_at\": \"2015-11-21 15:17:42\" }","title":"Character Info"},{"location":"seat_api/characters/#character-industry","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/industry/{character_id} Description Get a list of the characters industry jobs. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/industry/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"activityID\": 1, \"activityName\": \"Manufacturing\", \"blueprintID\": 1004842307489, \"blueprintLocationID\": 60013072, \"blueprintTypeID\": 2517, \"blueprintTypeName\": \"Nova Rocket Blueprint\", \"characterID\": 123456, \"completedCharacterID\": 0, \"completedDate\": \"0001-01-01 00:00:00\", \"cost\": 0, \"created_at\": \"2015-11-21 14:37:35\", \"description\": \"Manufacturing\", \"endDate\": \"2012-12-06 15:42:50\", \"facilityID\": 60013072, \"facilityName\": \"WY-9LL VIII - Moon 3 - Dominations Testing Facilities\", \"iconNo\": \"18_02\", \"id\": 23, \"installerID\": 123456, \"installerName\": \"Bob\", \"jobID\": 159368411, \"licensedRuns\": 0, \"outputLocationID\": 60013072, \"pauseDate\": \"0001-01-01 00:00:00\", \"probability\": 0, \"productTypeID\": 2516, \"productTypeName\": \"Nova Rocket\", \"published\": 1, \"runs\": 100, \"solarSystemID\": 30004621, \"solarSystemName\": \"WY-9LL\", \"startDate\": \"2012-12-06 09:02:50\", \"stationID\": 60013072, \"status\": 1, \"successfulRuns\": 0, \"teamID\": 0, \"timeInSeconds\": 24000, \"updated_at\": \"2015-11-25 13:59:31\" } ]","title":"Character Industry"},{"location":"seat_api/characters/#character-killmails","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/killmails/{character_id} Description Get a list of the characters killmails. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/killmails/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allianceID\": 123456, \"allianceName\": \"Bob Alliance\", \"basePrice\": null, \"capacity\": 0, \"celestialIndex\": null, \"characterID\": 123456, \"characterName\": \"Bob\", \"constellationID\": 20000124, \"corporationID\": 123456, \"corporationName\": \"Bob's Corp\", \"created_at\": \"2015-11-25 14:17:51\", \"damageTaken\": 464, \"description\": \"Standard capsule.\", \"factionID\": 0, \"factionName\": \"\", \"groupID\": 5, \"iconID\": 73, \"itemID\": 30000848, \"itemName\": \"M-OEE8\", \"killID\": 50337764, \"killTime\": \"2015-11-24 17:15:10\", \"marketGroupID\": null, \"mass\": 32000, \"moonID\": 0, \"orbitID\": null, \"orbitIndex\": null, \"ownerID\": 123456, \"portionSize\": 1, \"published\": 0, \"raceID\": 16, \"radius\": 4145289179056, \"regionID\": 10000010, \"security\": -0.218329, \"shipTypeID\": 670, \"solarSystemID\": null, \"soundID\": 20080, \"typeID\": 5, \"typeName\": \"Capsule\", \"updated_at\": \"2015-11-25 14:17:51\", \"victimID\": 1209964167, \"volume\": 1000, \"x\": -1.4759869943375e+17, \"y\": 7.9788702592936e+16, \"z\": 2.0063317959704e+17 } ]","title":"Character Killmails"},{"location":"seat_api/characters/#character-market-orders","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/market-orders/{character_id} Description Get a list of the characters market orders. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/market-orders/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 1000, \"anchorable\": 1, \"anchored\": 0, \"basePrice\": null, \"bid\": 0, \"capacity\": 0, \"categoryID\": 22, \"charID\": 123456, \"created_at\": \"2015-11-21 14:56:54\", \"description\": \"A Medium deployable self powered unit that prevents warping within its area of effect. \", \"duration\": 90, \"escrow\": \"0.00\", \"fittableNonSingleton\": 0, \"groupID\": 361, \"groupName\": \"Mobile Warp Disruptor\", \"iconID\": 0, \"id\": 643, \"issued\": \"2015-08-28 09:33:49\", \"marketGroupID\": 405, \"mass\": 0, \"minVolume\": 1, \"orderID\": 4239146614, \"orderState\": 0, \"portionSize\": 1, \"price\": \"6428570.71\", \"published\": 1, \"raceID\": null, \"range\": 32767, \"soundID\": null, \"stationID\": 60015138, \"stationName\": \"Dihra V - 24th Imperial Crusade Logistic Support\", \"typeID\": 12199, \"typeName\": \"Mobile Medium Warp Disruptor I\", \"updated_at\": \"2015-11-21 14:56:54\", \"useBasePrice\": 0, \"volEntered\": 1, \"volRemaining\": 1, \"volume\": 195 } ]","title":"Character Market Orders"},{"location":"seat_api/characters/#character-contracts","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/contracts/{character_id} Description Get a list of the characters contracts. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/contracts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"acceptorID\": 123456, \"assigneeID\": 123456, \"availability\": \"Private\", \"buyout\": \"0.00\", \"characterID\": 123456, \"collateral\": \"0.00\", \"contractID\": 98201250, \"created_at\": \"2015-11-21 14:56:12\", \"dateAccepted\": \"2015-10-23 11:53:20\", \"dateCompleted\": \"2015-10-23 11:53:20\", \"dateExpired\": \"2015-11-06 11:52:59\", \"dateIssued\": \"2015-10-23 11:52:59\", \"endStationID\": 61000655, \"endlocation\": \"2D-0SO XI - Tax Evasion No More\", \"forCorp\": 0, \"issuerCorpID\": 123456, \"issuerID\": 123456, \"numDays\": 0, \"price\": \"0.00\", \"reward\": \"0.00\", \"startStationID\": 61000655, \"startlocation\": \"2D-0SO XI - Tax Evasion No More\", \"status\": \"Completed\", \"title\": \"\", \"type\": \"ItemExchange\", \"updated_at\": \"2015-11-21 14:56:12\", \"volume\": 112000 } ]","title":"Character Contracts"},{"location":"seat_api/characters/#character-sheet","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/sheet/{character_id} Description Get a characters character sheet. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/sheet/123456 Accept:application/json X-Token:123456 Sample Response: { \"DoB\": \"2006-11-16 05:36:00\", \"allianceID\": 123456, \"allianceName\": \"Bob's Alliance\", \"ancestry\": \"Artists\", \"ancestryID\": 16, \"balance\": \"101524292.93\", \"bloodLine\": \"Intaki\", \"bloodLineID\": 8, \"characterID\": 123456, \"charisma\": 17, \"cloneJumpDate\": \"2015-09-21 06:21:39\", \"cloneName\": \"Clone Grade Alpha\", \"cloneSkillPoints\": 0, \"cloneTypeID\": 164, \"corporationID\": 123456, \"corporationName\": \"Bob's Corporation\", \"created_at\": \"2015-11-21 14:56:03\", \"factionID\": 0, \"factionName\": \"\", \"freeRespecs\": 0, \"freeSkillPoints\": 0, \"gender\": \"Male\", \"homeStationID\": 123456, \"intelligence\": 23, \"jumpActivation\": \"2015-11-24 08:09:00\", \"jumpFatigue\": \"2015-11-24 09:00:32\", \"jumpLastUpdate\": \"2015-11-24 08:03:17\", \"lastRespecDate\": \"2012-12-13 22:50:46\", \"lastTimedRespec\": \"2012-12-13 22:50:46\", \"memory\": 19, \"name\": \"Sso\", \"perception\": 23, \"race\": \"Gallente\", \"remoteStationDate\": \"2014-12-15 08:11:21\", \"updated_at\": \"2015-11-25 14:17:38\", \"willpower\": 17 }","title":"Character Sheet"},{"location":"seat_api/characters/#character-skills","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/skills/{character_id} Description Get a characters skills. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/skills/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"anchorable\": 0, \"anchored\": 0, \"basePrice\": \"2000000.0000\", \"capacity\": 0, \"categoryID\": 16, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:56:03\", \"description\": \"Grants the Wing Commander the ability to pass on their bonuses to an additional Squadron per skill level, up to a maximum of 5 Squadrons. \\r\\n\\r\\n<font color=\\\"0xffF67828\\\"><b>This skill cannot be trained on Trial Accounts.</b></font> \", \"fittableNonSingleton\": 0, \"groupID\": 258, \"groupName\": \"Leadership\", \"iconID\": null, \"id\": 28834, \"level\": 2, \"marketGroupID\": 370, \"mass\": 0, \"portionSize\": 1, \"published\": 1, \"raceID\": 4, \"skillpoints\": 11314, \"soundID\": null, \"typeID\": 11574, \"typeName\": \"Wing Command\", \"updated_at\": \"2015-11-21 14:56:03\", \"useBasePrice\": 1, \"volume\": 0.01 } ]","title":"Character Skills"},{"location":"seat_api/characters/#character-skill-in-training","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/skill-in-training/{character_id} Description Get a the current skill in training for a character. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/skill-in-training/123456 Accept:application/json X-Token:123456 Sample Response: { \"basePrice\": \"4000000.0000\", \"capacity\": 0, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:57:04\", \"currentTQTime\": \"2015-11-24 12:28:36\", \"description\": \"Skill for the operation of Electronic Attack Frigates. \\r\\n\\r\\n<font color=\\\"0xffF67828\\\"><b>This skill cannot be trained on Trial Accounts.</b></font>\", \"groupID\": 257, \"iconID\": 33, \"marketGroupID\": 377, \"mass\": 0, \"portionSize\": 1, \"published\": 1, \"raceID\": null, \"skillInTraining\": 1, \"soundID\": null, \"trainingDestinationSP\": 181020, \"trainingEndTime\": \"2015-11-25 15:25:33\", \"trainingStartSP\": 33911, \"trainingStartTime\": \"2015-11-22 16:21:32\", \"trainingToLevel\": 4, \"trainingTypeID\": 28615, \"typeID\": 28615, \"typeName\": \"Electronic Attack Ships\", \"updated_at\": \"2015-11-24 12:28:36\", \"volume\": 0.01 }","title":"Character Skill In Training"},{"location":"seat_api/characters/#character-skill-queue","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/skill-queue/{character_id} Description Get a the current queue for a character. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/skill-queue/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"basePrice\": \"20000000.0000\", \"capacity\": 0, \"characterID\": 123456, \"created_at\": \"2015-11-24 12:28:38\", \"description\": \"Skill for operation of Interdictors.\\r\\n\\r\\n<font color=\\\"0xffF67828\\\"><b>This skill cannot be trained on Trial Accounts.</b></font>\", \"endSP\": 1280000, \"endTime\": \"2016-06-28 01:02:56\", \"groupID\": 257, \"iconID\": 33, \"level\": 5, \"marketGroupID\": 377, \"mass\": 0, \"portionSize\": 1, \"published\": 1, \"queuePosition\": 11, \"raceID\": null, \"soundID\": null, \"startSP\": 226275, \"startTime\": \"2016-06-06 20:00:11\", \"typeID\": 12098, \"typeName\": \"Interdictors\", \"updated_at\": \"2015-11-24 12:28:38\", \"volume\": 0.01 } ]","title":"Character Skill Queue"},{"location":"seat_api/characters/#character-wallet-journal","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/wallet-journal/{character_id} Description Get a characters wallet journal. Returns the last 1000 entries. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/wallet-journal/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"amount\": \"10249.55\", \"argID1\": 123456, \"argName1\": \"YI-8ZM\", \"balance\": \"34081939.17\", \"characterID\": 123456, \"created_at\": \"2015-11-27 12:22:24\", \"date\": \"2015-10-13 09:54:13\", \"hash\": \"3e2d590ad1113863ec687bc5f22b1159\", \"owner1TypeID\": 2, \"owner2TypeID\": 1378, \"ownerID1\": 123456, \"ownerID2\": 123456, \"ownerName1\": \"CONCORD\", \"ownerName2\": \"Bob\", \"reason\": \"23441:1,\", \"refID\": 11765665857, \"refTypeID\": 85, \"refTypeName\": \"Bounty Prizes\", \"taxAmount\": \"0.00\", \"taxReceiverID\": 0, \"updated_at\": \"2015-11-27 12:22:24\" } ]","title":"Character Wallet Journal"},{"location":"seat_api/characters/#character-wallet-transactions","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/wallet-transactions/{character_id} Description Get a characters wallet transactions. Returns the last 1000 entries. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/wallet-transactions/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"clientID\": 123456, \"clientName\": \"Bob\", \"clientTypeID\": 1383, \"created_at\": \"2015-11-21 14:57:20\", \"hash\": \"c9d87c8dea4023f96e8305026340b196\", \"journalTransactionID\": 11766105679, \"price\": \"1249500.00\", \"quantity\": 1, \"stationID\": 61000802, \"stationName\": \"3V8-LJ IV - DOKDO-SUPREMACY\", \"transactionDateTime\": \"2015-10-13 13:49:33\", \"transactionFor\": \"personal\", \"transactionID\": 4094239844, \"transactionType\": \"buy\", \"typeID\": 3244, \"typeName\": \"Warp Disruptor II\", \"updated_at\": \"2015-11-21 14:57:20\" } ]","title":"Character Wallet Transactions"},{"location":"seat_api/characters/#character-employment-history","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/employment-history/{character_id} Description Get a characters employment history. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/employment-history/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"corporationID\": 1000169, \"corporationName\": \"Center for Advanced Studies\", \"created_at\": \"2015-11-21 14:17:39\", \"recordID\": 3207893, \"startDate\": \"2006-11-16 05:36:00\", \"updated_at\": \"2015-11-21 14:17:39\" } ]","title":"Character Employment History"},{"location":"seat_api/characters/#character-implants","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/implants/{character_id} Description Get a characters implants. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/implants/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"2015-11-25 14:17:38\", \"id\": 7984, \"typeID\": 10221, \"typeName\": \"Cybernetic Subprocessor - Standard\", \"updated_at\": \"2015-11-25 14:17:38\" } ]","title":"Character Implants"},{"location":"seat_api/characters/#character-jump-clones","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/jump-clones/{character_id} Description Get a characters jump clones. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/jump-clones/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"basePrice\": null, \"capacity\": 0, \"characterID\": 123456, \"cloneName\": \"\", \"created_at\": \"2015-11-25 14:17:38\", \"description\": \"\", \"groupID\": 23, \"iconID\": 34, \"jumpCloneID\": 23063005, \"locID\": 61000802, \"location\": \"3V8-LJ IV - DOKDO-SUPREMACY\", \"locationID\": 61000802, \"marketGroupID\": null, \"mass\": 0, \"portionSize\": 1, \"published\": 0, \"raceID\": null, \"soundID\": null, \"typeID\": 164, \"typeName\": \"Clone Grade Alpha\", \"updated_at\": \"2015-11-25 14:17:38\", \"volume\": 1 } ]","title":"Character Jump Clones"},{"location":"seat_api/characters/#character-account-info","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/account-info/{character_id} Description Get a characters account information. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/account-info/123456 Accept:application/json X-Token:123456 Sample Response: { \"createDate\": \"2013-11-29 07:18:00\", \"created_at\": \"2015-11-21 14:17:37\", \"keyID\": 123456, \"logonCount\": 2639, \"logonMinutes\": 242426, \"paidUntil\": \"2015-12-19 12:49:41\", \"updated_at\": \"2015-11-25 14:17:26\" }","title":"Character Account Info"},{"location":"seat_api/characters/#character-mail","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/mail/{character_id} Description Get a characters mail. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/mail/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"body\": \"Stuff\", \"characterID\": 123456, \"created_at\": \"2015-11-21 14:20:40\", \"id\": 8115, \"messageID\": 123456, \"senderID\": 123456, \"senderName\": \"Bob\", \"sentDate\": \"2015-10-21 06:24:00\", \"title\": \"Stuff\", \"toCharacterIDs\": \"\", \"toCorpOrAllianceID\": 123456, \"toListID\": 0, \"updated_at\": \"2015-11-21 14:20:40\" } ]","title":"Character Mail"},{"location":"seat_api/characters/#character-notifications","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/notifications/{character_id} Description Get a characters notifications. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/notifications/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"-0001-11-30 00:00:00\", \"desc\": \"Mercenary Invitation Accepted\", \"id\": 128, \"notificationID\": 537637998, \"read\": 0, \"senderID\": 123456, \"senderName\": \"Bob\", \"sentDate\": \"2015-11-18 08:34:00\", \"text\": \"applicationText: blah\", \"typeID\": 128, \"updated_at\": \"-0001-11-30 00:00:00\" } ]","title":"Character Notifications"},{"location":"seat_api/characters/#character-planetary-interaction","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/pi/{character_id} Description Get a characters planetary colonies. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/pi/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"created_at\": \"2015-11-21 14:21:01\", \"lastUpdate\": \"2013-06-08 19:58:45\", \"numberOfPins\": 4, \"ownerID\": 123456, \"ownerName\": \"Bob\", \"planetID\": 40318582, \"planetName\": \"Ommare IX\", \"planetTypeID\": 13, \"planetTypeName\": \"Planet (Gas)\", \"solarSystemID\": 30005027, \"solarSystemName\": \"Ommare\", \"updated_at\": \"2015-11-21 14:21:01\", \"upgradeLevel\": 3 } ]","title":"Character Planetary Interaction"},{"location":"seat_api/characters/#character-standings","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/standings/{character_id} Description Get a characters standings. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/standings/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"2015-11-21 14:57:08\", \"fromID\": 500020, \"fromName\": \"Serpentis\", \"id\": 10459, \"standing\": -9.41, \"type\": \"factions\", \"updated_at\": \"2015-11-21 14:57:08\" } ]","title":"Character Standings"},{"location":"seat_api/characters/#character-research","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/research/{character_id} Description Get a characters research. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/research/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"agentID\": 3013751, \"basePrice\": \"10000000.0000\", \"capacity\": 0, \"characterID\": 123456, \"created_at\": \"2015-11-21 14:57:02\", \"description\": \"Skill and knowledge of Plasma physics and its use in the development of advanced technology. \\r\\n\\r\\nUsed primarily in the research of particle blaster weaponry as well as plasma based missiles and smartbombs. \\r\\n\\r\\nAllows Plasma Physics research to be performed with the help of a research agent. 1% reduction in manufacturing time for all items requiring Plasma Physics per level.\\r\\n\\r\\nNeeded for all research and manufacturing operations on related blueprints.\", \"groupID\": 270, \"iconID\": 33, \"id\": 47, \"itemID\": 3013751, \"itemName\": \"Charie Porelotta\", \"marketGroupID\": 375, \"mass\": 0, \"pointsPerDay\": 61.25, \"portionSize\": 1, \"published\": 1, \"raceID\": 4, \"remainderPoints\": 77302.81, \"researchStartDate\": \"2013-12-13 00:19:43\", \"skillTypeID\": 11441, \"soundID\": null, \"typeID\": 11441, \"typeName\": \"Plasma Physics\", \"updated_at\": \"2015-11-24 12:28:33\", \"volume\": 0.01 } ]","title":"Character Research"},{"location":"seat_api/characters/#character-calendar-events","text":"Type Detail HTTP Verb GET Endpoint /api/v1/character/calendar/{character_id} Description Get a characters upcoming calendar events. Parameters character_id - The characterID for the query Sample Request: http get http://localhost:8000/api/v1/character/calendar/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"created_at\": \"2015-11-23 19:01:42\", \"duration\": 60, \"eventDate\": \"2015-11-24 17:00:00\", \"eventID\": 1254322, \"eventText\": \"To be tested:\\r\\nNew visual damage effects\\r\\n\\r\\nPlease refer to <a href=\\\"http://community.eveonline.com/news/news-channels/eve-online-news/check-out-the-new-visual-damage-effects-join-the-mass-test-november-24/\\\">this news item</a> for more info about this test.\\r\\n\\r\\nEasily connect to Singularity by using the <a href=\\\"https://forums.eveonline.com/default.aspx?g=posts&m=6140581\\\">new EVE Launcher (beta)</a>!\\r\\n\\r\\nAll participants will receive a reward of two million free skill points on Singularity.\", \"eventTitle\": \"Mass test on Singularity\", \"id\": 377, \"importance\": 0, \"ownerID\": 1, \"ownerName\": \"EVE System\", \"ownerTypeID\": 0, \"response\": \"Undecided\", \"updated_at\": \"2015-11-23 19:01:42\" } ]","title":"Character Calendar Events"},{"location":"seat_api/corporations/","text":"Corporation All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie . Available Methods All Assets Assets by Location Assets Contents Bookmarks Contacts Contracts Customs Offices Divisions Industry Killmails Market Orders Member Security Member Security Logs Member Security Titles Member Tracking Sheet Standings Starbases Wallet Divisions Wallet Journal Wallet Transactions All Corporations Type Detail HTTP Verb GET Endpoint /api/v1/corporation/all Description Get corporations known to SeAT. Sample Request: http get http://localhost:8000/api/v1/corporation/all Accept:application/json X-Token:123456 Sample Response: [ { \"allianceID\": 0, \"allianceName\": null, \"ceoID\": 123456, \"ceoName\": \"ABC\", \"color1\": 683, \"color2\": 674, \"color3\": 673, \"corporationID\": 123456, \"corporationName\": \"ABC Inc.\", \"created_at\": \"2015-11-22 11:20:24\", \"description\": \"Wut.\", \"factionID\": 0, \"graphicID\": 0, \"memberCount\": 9, \"memberLimit\": 40, \"shape1\": 415, \"shape2\": 550, \"shape3\": 513, \"shares\": 1000, \"stationID\": 60014761, \"stationName\": \"Aedald VIII - Moon 5 - Republic Military School\", \"taxRate\": \"0.00\", \"ticker\": \"ABC.\", \"updated_at\": \"2015-11-22 11:20:24\", \"url\": \"\" } ] Corporation Assets Type Detail HTTP Verb GET Endpoint /api/v1/corporation/assets/{corporation_id} Description Get a corporations assets list. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/assets/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"anchorable\": 0, \"anchored\": 0, \"basePrice\": null, \"capacity\": 0, \"categoryID\": 3, \"corporationID\": 123456, \"created_at\": \"2015-11-24 16:31:54\", \"description\": \"\", \"fittableNonSingleton\": 0, \"flag\": 83, \"groupID\": 16, \"groupName\": \"Station Services\", \"iconID\": null, \"itemID\": 228127261, \"location\": \"Half VII - Moon 1 - CONCORD Bureau\", \"locationID\": 66012455, \"marketGroupID\": null, \"mass\": 0, \"portionSize\": 1, \"published\": 0, \"quantity\": 1, \"raceID\": null, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": null, \"typeID\": 27, \"typeName\": \"Office\", \"updated_at\": \"2015-11-24 16:31:54\", \"useBasePrice\": 0, \"volume\": 1 } ] Corporation Assets by Location Type Detail HTTP Verb GET Endpoint /api/v1/corporation/assets-by-location/{corporation_id} Description Get a corporations assets list grouped by locationID. This endpoint only returns assets that are in space. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/assets-by-location/123456 Accept:application/json X-Token:123456 Sample Response: { \"123456\": [ { \"basePrice\": \"200000000.0000\", \"capacity\": 70000, \"corporationID\": 123456, \"created_at\": \"2015-12-24 10:51:58\", \"description\": \"The Dread Guristas Control Tower is a special enhanced version of the Caldari control tower utilizing the latest in cutting edge design techniques.\\r\\n\\r\\nRacial Bonuses:\\r\\n25% bonus to Missile Battery Rate of Fire\\r\\n50% bonus to Missile Velocity\\r\\n-75% bonus to Electronic Warfare Battery Target Cycling Speed\", \"flag\": 0, \"groupID\": 365, \"iconID\": null, \"itemID\": 123456, \"itemName\": \"Dread Guristas Control Tower Medium\", \"locationID\": 123456, \"mapID\": 123456, \"mapName\": \"ABC\", \"marketGroupID\": 478, \"mass\": 200000000, \"portionSize\": 1, \"published\": 1, \"quantity\": 1, \"raceID\": 1, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": null, \"typeID\": 27597, \"typeName\": \"Dread Guristas Control Tower Medium\", \"updated_at\": \"2015-12-24 10:51:58\", \"volume\": 4000, \"x\": -123456, \"y\": 123456, \"z\": -123456 }, { \"basePrice\": \"50000000.0000\", \"capacity\": 20000000, \"corporationID\": 123456, \"created_at\": \"2015-12-24 10:51:58\", \"description\": \"This structure contains equipment needed to compress various ore and ice materials for easy transportation across the universe.\\r\\n\\r\\nThis array does not have a particular restriction on security level and may be anchored in Empire sovereign space.\", \"flag\": 0, \"groupID\": 1282, \"iconID\": null, \"itemID\": 123456, \"itemName\": \"Compression Array\", \"locationID\": 123456, \"mapID\": 123456, \"mapName\": \"ABC\", \"marketGroupID\": 1921, \"mass\": 50000000, \"portionSize\": 1, \"published\": 1, \"quantity\": 1, \"raceID\": null, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": null, \"typeID\": 12239, \"typeName\": \"Compression Array\", \"updated_at\": \"2015-12-24 10:51:58\", \"volume\": 6000, \"x\": -123456, \"y\": 123456, \"z\": -123456 } ] } Corporation Assets Contents Type Detail HTTP Verb GET Endpoint /api/v1/corporation/assets-contents/{corporation_id}/{parent_asset_id?}/{$parent_item_id?} Description Get a corporations assets contents. Supplying the parent_asset_id and or parent_item_id will filter the response down to only those assets. Parameters corporation_id - The corporationID for the query parent_asset_id - (optional, required if used with parent_item_id) The parent asset ID for the query parent_item_id - (optional) The parent item ID in the asset id for the query Sample Request: http get http://localhost:8000/api/v1/corporation/assets-contents/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"basePrice\": \"1000.0000\", \"capacity\": 0, \"corporationID\": 123456, \"created_at\": \"2015-12-28 10:06:21\", \"description\": \"An unstable compound of strontium molecules encased in the crystal structure of water. When fed to a Control Tower's force field generator, these clathrates bond with the molecules already in place in the field to create a nigh-invulnerable barrier of energy. A necessary ingredient for Control Towers to go into reinforced mode.\\r\\n\\r\\nMay be obtained by reprocessing the following ice ores:\\r\\n\\r\\n<color='0xFF33FFFF'>1.0</color> security status solar system or lower:\\r\\n<a href=showinfo:16264>Blue Ice</a>\\r\\n<a href=showinfo:16262>Clear Icicle</a>\\r\\n<a href=showinfo:16263>Glacial Mass</a>\\r\\n<a href=showinfo:16265>White Glaze</a>\\r\\n\\r\\n<color='0xFFFF6600'>0.3</color> security status solar system or lower:\\r\\n<a href=showinfo:16266>Glare Crust</a>\\r\\n\\r\\n<color='0xFFE53300'>0.1</color> security status solar system or lower:\\r\\n<a href=showinfo:16267>Dark Glitter</a>\\r\\n\\r\\n<color='0xFFFF0000'>0.0</color> security status solar system or lower:\\r\\n<a href=showinfo:17978>Enriched Clear Icicle</a>\\r\\n<a href=showinfo:16268>Gelidus</a>\\r\\n<a href=showinfo:16269>Krystallos</a>\\r\\n<a href=showinfo:17976>Pristine White Glaze</a>\\r\\n<a href=showinfo:17977>Smooth Glacial Mass</a>\\r\\n<a href=showinfo:17975>Thick Blue Ice</a>\", \"flag\": 122, \"graphicID\": 0, \"groupID\": 423, \"iconID\": 2696, \"itemID\": 123456, \"marketGroupID\": 1033, \"mass\": 0, \"parentAssetItemID\": 123456, \"parentItemID\": null, \"portionSize\": 1, \"published\": 1, \"quantity\": 4166, \"raceID\": null, \"rawQuantity\": 0, \"singleton\": 0, \"soundID\": null, \"typeID\": 16275, \"typeName\": \"Strontium Clathrates\", \"updated_at\": \"2015-12-28 10:06:21\", \"volume\": 3 }, { \"basePrice\": \"95.0000\", \"capacity\": 0, \"corporationID\": 123456, \"created_at\": \"2015-12-28 10:06:21\", \"description\": \"Frustrated with the inefficiencies involved in tracking multiple fuel types, Thukker logisticians pioneered the development of prepackaged fuel. In YC 111, after a successful trial period, they converted the Tribe's entire starbase network to use fuel blocks. Capsuleers were forced to wait for this innovation while CONCORD dithered over how to handle the transition period, but were finally granted clearance in YC113.\\r\\n\\r\\nThis is a block of fuel designed for Minmatar control towers. Forty blocks are sufficient to run a standard large tower for one hour, while medium and small towers require twenty and ten blocks respectively over the same period.\", \"flag\": 0, \"graphicID\": 0, \"groupID\": 1136, \"iconID\": 10836, \"itemID\": 123456, \"marketGroupID\": 1870, \"mass\": 0, \"parentAssetItemID\": 123456, \"parentItemID\": null, \"portionSize\": 40, \"published\": 1, \"quantity\": 2857, \"raceID\": null, \"rawQuantity\": 0, \"singleton\": 0, \"soundID\": null, \"typeID\": 4246, \"typeName\": \"Hydrogen Fuel Block\", \"updated_at\": \"2015-12-28 10:06:21\", \"volume\": 5 } ] Corporation Bookmarks Type Detail HTTP Verb GET Endpoint /api/v1/corporation/bookmarks/{corporation_id} Description Get a corporations bookmarks. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/bookmarks/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"bookmarkID\": 123456, \"corporationID\": 123456, \"created\": \"2014-10-10 21:23:16\", \"created_at\": \"2015-12-20 14:25:03\", \"creatorID\": 123456, \"folderID\": 123456, \"folderName\": \"123\", \"id\": 330, \"itemID\": 0, \"locationID\": 30002923, \"mapID\": 40185483, \"mapName\": \"Thing\", \"memo\": \"A Memo\", \"note\": \"\", \"typeID\": 5, \"updated_at\": \"2015-12-20 14:25:03\", \"x\": 26032436019.564, \"y\": -2848725274.3562, \"z\": 250866523571.45 } ] Corporation Contacts Type Detail HTTP Verb GET Endpoint /api/v1/corporation/contacts/{corporation_id} Description Get a corporations contacts list. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/contacts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"contactID\": 123456, \"contactName\": \"Bob\", \"contactTypeID\": 2, \"corporationID\": 123456, \"created_at\": \"2015-11-24 16:31:56\", \"labelMask\": 0, \"standing\": -5, \"updated_at\": \"2015-11-24 16:31:56\" } ] Corporation Contracts Type Detail HTTP Verb GET Endpoint /api/v1/corporation/contracts/{corporation_id} Description Get a corporations contracts list. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/contracts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"acceptorID\": 123456, \"assigneeID\": 123456, \"availability\": \"Private\", \"buyout\": \"0.00\", \"collateral\": \"0.00\", \"contractID\": 98168646, \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:19:05\", \"dateAccepted\": \"2015-10-28 22:57:33\", \"dateCompleted\": \"2015-10-28 22:57:33\", \"dateExpired\": \"2015-11-05 12:19:58\", \"dateIssued\": \"2015-10-22 12:19:58\", \"endStationID\": 61000393, \"endlocation\": \"UMI-KK VII - 2Dont relist in my Fing station\", \"forCorp\": 0, \"issuerCorpID\": 123456, \"issuerID\": 123456, \"numDays\": 0, \"price\": \"315000000.00\", \"reward\": \"0.00\", \"startStationID\": 61000393, \"startlocation\": \"UMI-KK VII - 2Dont relist in my Fing station\", \"status\": \"Completed\", \"title\": \"heavy missile cerb\", \"type\": \"ItemExchange\", \"updated_at\": \"2015-11-21 14:19:05\", \"volume\": 92000 } ] Corporation Customs Offices Type Detail HTTP Verb GET Endpoint /api/v1/corporation/pocos/{corporation_id} Description Get a corporations customs offices. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/pocos/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allowAlliance\": 0, \"allowStandings\": 0, \"corporationID\": 123456, \"created_at\": \"2015-12-28 06:55:25\", \"id\": 15, \"itemID\": 123456, \"planetName\": \"Customs Office (ABC IV)\", \"planetTypeID\": 2017, \"planetTypeName\": \"Planet (Storm)\", \"reinforceHour\": 0, \"solarSystemID\": 123456, \"solarSystemName\": \"ABC\", \"standingLevel\": -10, \"taxRateAlliance\": 0.04, \"taxRateCorp\": 0, \"taxRateStandingBad\": 0.5, \"taxRateStandingGood\": 0.06, \"taxRateStandingHigh\": 0.05, \"taxRateStandingHorrible\": 1, \"taxRateStandingNeutral\": 0.1, \"updated_at\": \"2015-12-28 06:55:25\" } ] Corporation Industry Type Detail HTTP Verb GET Endpoint /api/v1/corporation/industry/{corporation_id} Description Get a corporations industry jobs. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/industry/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"activityID\": 8, \"activityName\": \"Invention\", \"blueprintID\": 1019085176157, \"blueprintLocationID\": 2147483647, \"blueprintTypeID\": 31056, \"blueprintTypeName\": \"Medium Trimark Armor Pump I Blueprint\", \"completedCharacterID\": 0, \"completedDate\": \"0001-01-01 00:00:00\", \"corporationID\": 98149539, \"cost\": 28719, \"created_at\": \"2015-11-22 11:20:29\", \"description\": \"The process of creating a more advanced item based on an existing item\", \"endDate\": \"2015-11-21 05:23:02\", \"facilityID\": 2147483647, \"facilityName\": null, \"iconNo\": \"33_02\", \"installerID\": 123456, \"installerName\": \"Bob\", \"jobID\": 280518524, \"licensedRuns\": 60, \"outputLocationID\": 2147483647, \"pauseDate\": \"0001-01-01 00:00:00\", \"probability\": 1, \"productTypeID\": 31060, \"productTypeName\": \"Medium Trimark Armor Pump II Blueprint\", \"published\": 1, \"runs\": 3, \"solarSystemID\": 30002691, \"solarSystemName\": \"Crielere\", \"startDate\": \"2015-11-20 23:51:32\", \"stationID\": 2147483647, \"status\": 1, \"successfulRuns\": 0, \"teamID\": 0, \"timeInSeconds\": 19890, \"updated_at\": \"2015-11-23 19:15:33\" } ] Corporation Killmails Type Detail HTTP Verb GET Endpoint /api/v1/corporation/killmails/{corporation_id} Description Get a corporations killmails. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/killmails/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allianceID\": 123456, \"allianceName\": \"Bob Alliance\", \"basePrice\": null, \"capacity\": 430, \"celestialIndex\": null, \"characterID\": 123456, \"characterName\": \"Bob\", \"constellationID\": 20000124, \"corporationID\": 123456, \"corporationName\": \"Bob Corp\", \"created_at\": \"2015-11-27 13:54:58\", \"damageTaken\": 3956, \"description\": \"Released in YC 117 as the result of the first Republic Fleet joint research project to include engineers from all seven Minmatar tribes, the Svipul is a powerful symbol of inter-tribal unity for many Republic citizens.\\r\\n\\r\\nAlthough the contributions of engineers from the Nefantar and Starkmanir tribes were fairly minor, a large delegation from the Vo-Lakat Thukker caravan and donations from Republic loyalist capsuleers across the cluster were invaluable to the development of this incredibly adaptable warship.\", \"factionID\": 0, \"factionName\": \"\", \"groupID\": 5, \"iconID\": null, \"itemID\": 30000848, \"itemName\": \"M-OEE8\", \"killID\": 123456, \"killTime\": \"2015-11-25 11:13:53\", \"marketGroupID\": 1953, \"mass\": 1500000, \"moonID\": 0, \"orbitID\": null, \"orbitIndex\": null, \"ownerID\": 123456, \"portionSize\": 1, \"published\": 1, \"raceID\": 2, \"radius\": 4145289179056, \"regionID\": 10000010, \"security\": -0.218329, \"shipTypeID\": 34562, \"solarSystemID\": null, \"soundID\": 20074, \"typeID\": 5, \"typeName\": \"Svipul\", \"updated_at\": \"2015-11-27 13:54:58\", \"victimID\": 123456, \"volume\": 47000, \"x\": -1.4759869943375e+17, \"y\": 7.9788702592936e+16, \"z\": 2.0063317959704e+17 } ] Corporation Market Orders Type Detail HTTP Verb GET Endpoint /api/v1/corporation/market-orders/{corporation_id} Description Get a corporations market orders. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/market-orders/123456 Accept:application/json X-Token:123456 Sample Response: TBA Corporation Member Security Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-security/{corporation_id} Description Get a corporations member security roles. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-security/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"characterName\": \"Bob\", \"corporationID\": 123456, \"created_at\": \"2015-11-27 14:01:18\", \"roleID\": 1, \"roleName\": \"roleDirector\", \"roleType\": \"grantableRolesAtOther\", \"updated_at\": \"2015-11-27 14:01:18\" } ] Corporation Member Security Logs Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-security-logs/{corporation_id} Description Get a corporations member security roles change log. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-security-logs/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"changeTime\": \"2015-10-25 13:19:00\", \"characterID\": 123456, \"characterName\": \"Bob\", \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:19:43\", \"hash\": \"cce3b9e3e0da5756939cf06d5ab923bd\", \"issuerID\": 123456, \"issuerName\": \"Bob\", \"newRoles\": \"[{\\\"8192\\\":\\\"roleHangarCanTake1\\\"},{\\\"1048576\\\":\\\"roleHangarCanQuery1\\\"},{\\\"4398046511104\\\":\\\"roleContainerCanTake1\\\"}]\", \"oldRoles\": \"[]\", \"roleLocationType\": \"rolesAtBase\", \"updated_at\": \"2015-11-21 14:19:43\" } ] Corporation Member Security Titles Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-security-titles/{corporation_id} Description Get a corporations member security titles assignments. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-security-titles/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"characterName\": \"Bob\", \"corporationID\": 123456, \"created_at\": \"2015-11-27 14:01:18\", \"titleID\": 16384, \"titleName\": \"Member\", \"updated_at\": \"2015-11-27 14:01:18\" } ] Corporation Member Tracking Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-tracking/{corporation_id} Description Get a corporations member tracking data. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-tracking/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"base\": \"\", \"baseID\": 0, \"characterID\": 123456, \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:19:41\", \"enabled\": 1, \"grantableRoles\": \"0\", \"id\": 16, \"location\": \"M-OEE8 XI - VOTE THE JUDGE FOR C S M XI\", \"locationID\": 61000249, \"logoffDateTime\": \"2015-08-09 07:16:05\", \"logonDateTime\": \"2015-08-09 06:56:16\", \"name\": \"123456\", \"roles\": \"1044837312573210624\", \"shipType\": \"Unknown Type\", \"shipTypeID\": -1, \"startDateTime\": \"2015-01-23 19:58:00\", \"title\": \"\", \"updated_at\": \"2015-11-21 14:19:41\" } ] Corporation Sheet Type Detail HTTP Verb GET Endpoint /api/v1/corporation/sheet/{corporation_id} Description Get a corporations sheet. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/sheet/123456 Accept:application/json X-Token:123456 Sample Response: { \"allianceID\": 123456, \"allianceName\": \"Bob Alliance\", \"ceoID\": 91279102, \"ceoName\": \"Bob\", \"color1\": 674, \"color2\": 674, \"color3\": 680, \"corporationID\": 123456, \"corporationName\": \"Bob Corp\", \"created_at\": \"2015-11-21 14:19:14\", \"description\": \"\", \"factionID\": 0, \"graphicID\": 0, \"memberCount\": 71, \"memberLimit\": 2300, \"shape1\": 568, \"shape2\": 576, \"shape3\": 513, \"shares\": 1000, \"stationID\": 60003754, \"stationName\": \"Perimeter II - Moon 1 - Caldari Navy Assembly Plant\", \"taxRate\": \"0.00\", \"ticker\": \"BOB.\", \"updated_at\": \"2015-11-27 13:54:51\", \"url\": \"\" } Corporation Standings Type Detail HTTP Verb GET Endpoint /api/v1/corporation/standings/{corporation_id} Description Get a corporations standings. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/standings/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"corporationID\": 123456, \"created_at\": \"2015-11-25 14:27:33\", \"fromID\": 3018426, \"fromName\": \"Poreg Murchor\", \"id\": 3455, \"standing\": 2.15, \"type\": \"agents\", \"updated_at\": \"2015-11-25 14:27:33\" } ] Corporation Starbases Type Detail HTTP Verb GET Endpoint /api/v1/corporation/starbases/{corporation_id}/{starbase_id?} Description Get a corporations starbases. If a starbaseID is set, mode details such as silo levels is also returned. Parameters corporation_id - The corporationID for the query starbase_id - An optional starbaseID to get details for Sample Request: http get http://localhost:8000/api/v1/corporation/starbases/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allowAllianceMembers\": 1, \"allowCorporationMembers\": 1, \"baseFuelUsage\": 40, \"baseStrontUsage\": 400, \"fuelBaySize\": 140000, \"fuelBlocks\": 4370, \"inSovSystem\": 1, \"itemID\": 123456, \"mapName\": \"ABC\", \"mapSecurity\": -0.640046, \"moonID\": 123456, \"moonName\": \"ABC\", \"onAggression\": 0, \"onCorporationWar\": 1, \"onlineTimeStamp\": \"2015-12-20 21:47:33\", \"siloCapacityBonus\": null, \"solarSystemName\": \"ABC\", \"starbaseCharter\": 0, \"starbaseName\": \"Caldari Control Tower\", \"starbaseTypeID\": 16213, \"starbaseTypeName\": \"Caldari Control Tower\", \"state\": 4, \"stateTimeStamp\": \"2015-12-24 10:47:37\", \"strontBaySize\": 50000, \"strontium\": 0, \"updated_at\": \"2015-12-24 10:50:54\", \"useStandingsFrom\": 12345 } ] Corporation Wallet Divisions Type Detail HTTP Verb GET Endpoint /api/v1/corporation/wallet-divisions/{corporation_id} Description Get a corporations wallet divisions. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/wallet-divisions/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 10000, \"corporationID\": 87812345623749, \"created_at\": \"2015-11-21 14:19:14\", \"description\": \"Mercenary Wallet Division\", \"id\": 8, \"updated_at\": \"2015-11-21 14:19:14\" } ] Corporation Wallet Journal Type Detail HTTP Verb GET Endpoint /api/v1/corporation/wallet-journal/{corporation_id} Description Get a corporations wallet journal. Returns the last 1000 entries. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/wallet-journal/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 1000, \"amount\": \"1363368.75\", \"argID1\": 123456, \"argName1\": \"X-CFN6\", \"balance\": \"1.40\", \"corporationID\": 123456, \"created_at\": \"2015-11-27 12:22:24\", \"date\": \"2015-11-17 19:28:54\", \"hash\": \"5cc3cf718cb50be07bd7909ad13ed62e\", \"owner1TypeID\": 2, \"owner2TypeID\": 1375, \"ownerID1\": 123456, \"ownerID2\": 123456, \"ownerName1\": \"Bob\", \"ownerName2\": \"Bob\", \"reason\": \"24001:2,24014:1,24015:1,24016:1,24017:1,24018:1,24095:1,24149:5,24150:6,\", \"refID\": 11902387979, \"refTypeID\": 85, \"refTypeName\": \"Bounty Prizes\", \"updated_at\": \"2015-11-27 12:22:24\" } ] Corporation Wallet Transactions Type Detail HTTP Verb GET Endpoint /api/v1/corporation/wallet-transactions/{corporation_id} Description Get a corporations wallet transactions. Returns the last 1000 entries. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/wallet-transactions/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 1006, \"characterID\": 123456, \"characterName\": \"Bob\", \"clientID\": 123456, \"clientName\": \"Core Industry CRY\", \"clientTypeID\": 1376, \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:20:13\", \"hash\": \"cb72c321ce34cf8a2f232849caac9a29\", \"journalTransactionID\": 11799102551, \"price\": \"23250000.00\", \"quantity\": 1, \"stationID\": 60014890, \"stationName\": \"D7-ZAC VIII - Moon 1 - D7-ZAC CO2 Stronghold\", \"transactionDateTime\": \"2015-10-22 10:00:25\", \"transactionFor\": \"corporation\", \"transactionID\": 4103106946, \"transactionType\": \"buy\", \"typeID\": 31628, \"typeName\": \"Medium Warhead Calefaction Catalyst II\", \"updated_at\": \"2015-11-21 14:20:13\" } ]","title":"Corporations"},{"location":"seat_api/corporations/#corporation","text":"All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie .","title":"Corporation"},{"location":"seat_api/corporations/#available-methods","text":"All Assets Assets by Location Assets Contents Bookmarks Contacts Contracts Customs Offices Divisions Industry Killmails Market Orders Member Security Member Security Logs Member Security Titles Member Tracking Sheet Standings Starbases Wallet Divisions Wallet Journal Wallet Transactions","title":"Available Methods"},{"location":"seat_api/corporations/#all-corporations","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/all Description Get corporations known to SeAT. Sample Request: http get http://localhost:8000/api/v1/corporation/all Accept:application/json X-Token:123456 Sample Response: [ { \"allianceID\": 0, \"allianceName\": null, \"ceoID\": 123456, \"ceoName\": \"ABC\", \"color1\": 683, \"color2\": 674, \"color3\": 673, \"corporationID\": 123456, \"corporationName\": \"ABC Inc.\", \"created_at\": \"2015-11-22 11:20:24\", \"description\": \"Wut.\", \"factionID\": 0, \"graphicID\": 0, \"memberCount\": 9, \"memberLimit\": 40, \"shape1\": 415, \"shape2\": 550, \"shape3\": 513, \"shares\": 1000, \"stationID\": 60014761, \"stationName\": \"Aedald VIII - Moon 5 - Republic Military School\", \"taxRate\": \"0.00\", \"ticker\": \"ABC.\", \"updated_at\": \"2015-11-22 11:20:24\", \"url\": \"\" } ]","title":"All Corporations"},{"location":"seat_api/corporations/#corporation-assets","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/assets/{corporation_id} Description Get a corporations assets list. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/assets/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"anchorable\": 0, \"anchored\": 0, \"basePrice\": null, \"capacity\": 0, \"categoryID\": 3, \"corporationID\": 123456, \"created_at\": \"2015-11-24 16:31:54\", \"description\": \"\", \"fittableNonSingleton\": 0, \"flag\": 83, \"groupID\": 16, \"groupName\": \"Station Services\", \"iconID\": null, \"itemID\": 228127261, \"location\": \"Half VII - Moon 1 - CONCORD Bureau\", \"locationID\": 66012455, \"marketGroupID\": null, \"mass\": 0, \"portionSize\": 1, \"published\": 0, \"quantity\": 1, \"raceID\": null, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": null, \"typeID\": 27, \"typeName\": \"Office\", \"updated_at\": \"2015-11-24 16:31:54\", \"useBasePrice\": 0, \"volume\": 1 } ]","title":"Corporation Assets"},{"location":"seat_api/corporations/#corporation-assets-by-location","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/assets-by-location/{corporation_id} Description Get a corporations assets list grouped by locationID. This endpoint only returns assets that are in space. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/assets-by-location/123456 Accept:application/json X-Token:123456 Sample Response: { \"123456\": [ { \"basePrice\": \"200000000.0000\", \"capacity\": 70000, \"corporationID\": 123456, \"created_at\": \"2015-12-24 10:51:58\", \"description\": \"The Dread Guristas Control Tower is a special enhanced version of the Caldari control tower utilizing the latest in cutting edge design techniques.\\r\\n\\r\\nRacial Bonuses:\\r\\n25% bonus to Missile Battery Rate of Fire\\r\\n50% bonus to Missile Velocity\\r\\n-75% bonus to Electronic Warfare Battery Target Cycling Speed\", \"flag\": 0, \"groupID\": 365, \"iconID\": null, \"itemID\": 123456, \"itemName\": \"Dread Guristas Control Tower Medium\", \"locationID\": 123456, \"mapID\": 123456, \"mapName\": \"ABC\", \"marketGroupID\": 478, \"mass\": 200000000, \"portionSize\": 1, \"published\": 1, \"quantity\": 1, \"raceID\": 1, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": null, \"typeID\": 27597, \"typeName\": \"Dread Guristas Control Tower Medium\", \"updated_at\": \"2015-12-24 10:51:58\", \"volume\": 4000, \"x\": -123456, \"y\": 123456, \"z\": -123456 }, { \"basePrice\": \"50000000.0000\", \"capacity\": 20000000, \"corporationID\": 123456, \"created_at\": \"2015-12-24 10:51:58\", \"description\": \"This structure contains equipment needed to compress various ore and ice materials for easy transportation across the universe.\\r\\n\\r\\nThis array does not have a particular restriction on security level and may be anchored in Empire sovereign space.\", \"flag\": 0, \"groupID\": 1282, \"iconID\": null, \"itemID\": 123456, \"itemName\": \"Compression Array\", \"locationID\": 123456, \"mapID\": 123456, \"mapName\": \"ABC\", \"marketGroupID\": 1921, \"mass\": 50000000, \"portionSize\": 1, \"published\": 1, \"quantity\": 1, \"raceID\": null, \"rawQuantity\": -1, \"singleton\": 1, \"soundID\": null, \"typeID\": 12239, \"typeName\": \"Compression Array\", \"updated_at\": \"2015-12-24 10:51:58\", \"volume\": 6000, \"x\": -123456, \"y\": 123456, \"z\": -123456 } ] }","title":"Corporation Assets by Location"},{"location":"seat_api/corporations/#corporation-assets-contents","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/assets-contents/{corporation_id}/{parent_asset_id?}/{$parent_item_id?} Description Get a corporations assets contents. Supplying the parent_asset_id and or parent_item_id will filter the response down to only those assets. Parameters corporation_id - The corporationID for the query parent_asset_id - (optional, required if used with parent_item_id) The parent asset ID for the query parent_item_id - (optional) The parent item ID in the asset id for the query Sample Request: http get http://localhost:8000/api/v1/corporation/assets-contents/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"basePrice\": \"1000.0000\", \"capacity\": 0, \"corporationID\": 123456, \"created_at\": \"2015-12-28 10:06:21\", \"description\": \"An unstable compound of strontium molecules encased in the crystal structure of water. When fed to a Control Tower's force field generator, these clathrates bond with the molecules already in place in the field to create a nigh-invulnerable barrier of energy. A necessary ingredient for Control Towers to go into reinforced mode.\\r\\n\\r\\nMay be obtained by reprocessing the following ice ores:\\r\\n\\r\\n<color='0xFF33FFFF'>1.0</color> security status solar system or lower:\\r\\n<a href=showinfo:16264>Blue Ice</a>\\r\\n<a href=showinfo:16262>Clear Icicle</a>\\r\\n<a href=showinfo:16263>Glacial Mass</a>\\r\\n<a href=showinfo:16265>White Glaze</a>\\r\\n\\r\\n<color='0xFFFF6600'>0.3</color> security status solar system or lower:\\r\\n<a href=showinfo:16266>Glare Crust</a>\\r\\n\\r\\n<color='0xFFE53300'>0.1</color> security status solar system or lower:\\r\\n<a href=showinfo:16267>Dark Glitter</a>\\r\\n\\r\\n<color='0xFFFF0000'>0.0</color> security status solar system or lower:\\r\\n<a href=showinfo:17978>Enriched Clear Icicle</a>\\r\\n<a href=showinfo:16268>Gelidus</a>\\r\\n<a href=showinfo:16269>Krystallos</a>\\r\\n<a href=showinfo:17976>Pristine White Glaze</a>\\r\\n<a href=showinfo:17977>Smooth Glacial Mass</a>\\r\\n<a href=showinfo:17975>Thick Blue Ice</a>\", \"flag\": 122, \"graphicID\": 0, \"groupID\": 423, \"iconID\": 2696, \"itemID\": 123456, \"marketGroupID\": 1033, \"mass\": 0, \"parentAssetItemID\": 123456, \"parentItemID\": null, \"portionSize\": 1, \"published\": 1, \"quantity\": 4166, \"raceID\": null, \"rawQuantity\": 0, \"singleton\": 0, \"soundID\": null, \"typeID\": 16275, \"typeName\": \"Strontium Clathrates\", \"updated_at\": \"2015-12-28 10:06:21\", \"volume\": 3 }, { \"basePrice\": \"95.0000\", \"capacity\": 0, \"corporationID\": 123456, \"created_at\": \"2015-12-28 10:06:21\", \"description\": \"Frustrated with the inefficiencies involved in tracking multiple fuel types, Thukker logisticians pioneered the development of prepackaged fuel. In YC 111, after a successful trial period, they converted the Tribe's entire starbase network to use fuel blocks. Capsuleers were forced to wait for this innovation while CONCORD dithered over how to handle the transition period, but were finally granted clearance in YC113.\\r\\n\\r\\nThis is a block of fuel designed for Minmatar control towers. Forty blocks are sufficient to run a standard large tower for one hour, while medium and small towers require twenty and ten blocks respectively over the same period.\", \"flag\": 0, \"graphicID\": 0, \"groupID\": 1136, \"iconID\": 10836, \"itemID\": 123456, \"marketGroupID\": 1870, \"mass\": 0, \"parentAssetItemID\": 123456, \"parentItemID\": null, \"portionSize\": 40, \"published\": 1, \"quantity\": 2857, \"raceID\": null, \"rawQuantity\": 0, \"singleton\": 0, \"soundID\": null, \"typeID\": 4246, \"typeName\": \"Hydrogen Fuel Block\", \"updated_at\": \"2015-12-28 10:06:21\", \"volume\": 5 } ]","title":"Corporation Assets Contents"},{"location":"seat_api/corporations/#corporation-bookmarks","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/bookmarks/{corporation_id} Description Get a corporations bookmarks. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/bookmarks/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"bookmarkID\": 123456, \"corporationID\": 123456, \"created\": \"2014-10-10 21:23:16\", \"created_at\": \"2015-12-20 14:25:03\", \"creatorID\": 123456, \"folderID\": 123456, \"folderName\": \"123\", \"id\": 330, \"itemID\": 0, \"locationID\": 30002923, \"mapID\": 40185483, \"mapName\": \"Thing\", \"memo\": \"A Memo\", \"note\": \"\", \"typeID\": 5, \"updated_at\": \"2015-12-20 14:25:03\", \"x\": 26032436019.564, \"y\": -2848725274.3562, \"z\": 250866523571.45 } ]","title":"Corporation Bookmarks"},{"location":"seat_api/corporations/#corporation-contacts","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/contacts/{corporation_id} Description Get a corporations contacts list. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/contacts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"contactID\": 123456, \"contactName\": \"Bob\", \"contactTypeID\": 2, \"corporationID\": 123456, \"created_at\": \"2015-11-24 16:31:56\", \"labelMask\": 0, \"standing\": -5, \"updated_at\": \"2015-11-24 16:31:56\" } ]","title":"Corporation Contacts"},{"location":"seat_api/corporations/#corporation-contracts","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/contracts/{corporation_id} Description Get a corporations contracts list. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/contracts/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"acceptorID\": 123456, \"assigneeID\": 123456, \"availability\": \"Private\", \"buyout\": \"0.00\", \"collateral\": \"0.00\", \"contractID\": 98168646, \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:19:05\", \"dateAccepted\": \"2015-10-28 22:57:33\", \"dateCompleted\": \"2015-10-28 22:57:33\", \"dateExpired\": \"2015-11-05 12:19:58\", \"dateIssued\": \"2015-10-22 12:19:58\", \"endStationID\": 61000393, \"endlocation\": \"UMI-KK VII - 2Dont relist in my Fing station\", \"forCorp\": 0, \"issuerCorpID\": 123456, \"issuerID\": 123456, \"numDays\": 0, \"price\": \"315000000.00\", \"reward\": \"0.00\", \"startStationID\": 61000393, \"startlocation\": \"UMI-KK VII - 2Dont relist in my Fing station\", \"status\": \"Completed\", \"title\": \"heavy missile cerb\", \"type\": \"ItemExchange\", \"updated_at\": \"2015-11-21 14:19:05\", \"volume\": 92000 } ]","title":"Corporation Contracts"},{"location":"seat_api/corporations/#corporation-customs-offices","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/pocos/{corporation_id} Description Get a corporations customs offices. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/pocos/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allowAlliance\": 0, \"allowStandings\": 0, \"corporationID\": 123456, \"created_at\": \"2015-12-28 06:55:25\", \"id\": 15, \"itemID\": 123456, \"planetName\": \"Customs Office (ABC IV)\", \"planetTypeID\": 2017, \"planetTypeName\": \"Planet (Storm)\", \"reinforceHour\": 0, \"solarSystemID\": 123456, \"solarSystemName\": \"ABC\", \"standingLevel\": -10, \"taxRateAlliance\": 0.04, \"taxRateCorp\": 0, \"taxRateStandingBad\": 0.5, \"taxRateStandingGood\": 0.06, \"taxRateStandingHigh\": 0.05, \"taxRateStandingHorrible\": 1, \"taxRateStandingNeutral\": 0.1, \"updated_at\": \"2015-12-28 06:55:25\" } ]","title":"Corporation Customs Offices"},{"location":"seat_api/corporations/#corporation-industry","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/industry/{corporation_id} Description Get a corporations industry jobs. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/industry/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"activityID\": 8, \"activityName\": \"Invention\", \"blueprintID\": 1019085176157, \"blueprintLocationID\": 2147483647, \"blueprintTypeID\": 31056, \"blueprintTypeName\": \"Medium Trimark Armor Pump I Blueprint\", \"completedCharacterID\": 0, \"completedDate\": \"0001-01-01 00:00:00\", \"corporationID\": 98149539, \"cost\": 28719, \"created_at\": \"2015-11-22 11:20:29\", \"description\": \"The process of creating a more advanced item based on an existing item\", \"endDate\": \"2015-11-21 05:23:02\", \"facilityID\": 2147483647, \"facilityName\": null, \"iconNo\": \"33_02\", \"installerID\": 123456, \"installerName\": \"Bob\", \"jobID\": 280518524, \"licensedRuns\": 60, \"outputLocationID\": 2147483647, \"pauseDate\": \"0001-01-01 00:00:00\", \"probability\": 1, \"productTypeID\": 31060, \"productTypeName\": \"Medium Trimark Armor Pump II Blueprint\", \"published\": 1, \"runs\": 3, \"solarSystemID\": 30002691, \"solarSystemName\": \"Crielere\", \"startDate\": \"2015-11-20 23:51:32\", \"stationID\": 2147483647, \"status\": 1, \"successfulRuns\": 0, \"teamID\": 0, \"timeInSeconds\": 19890, \"updated_at\": \"2015-11-23 19:15:33\" } ]","title":"Corporation Industry"},{"location":"seat_api/corporations/#corporation-killmails","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/killmails/{corporation_id} Description Get a corporations killmails. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/killmails/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allianceID\": 123456, \"allianceName\": \"Bob Alliance\", \"basePrice\": null, \"capacity\": 430, \"celestialIndex\": null, \"characterID\": 123456, \"characterName\": \"Bob\", \"constellationID\": 20000124, \"corporationID\": 123456, \"corporationName\": \"Bob Corp\", \"created_at\": \"2015-11-27 13:54:58\", \"damageTaken\": 3956, \"description\": \"Released in YC 117 as the result of the first Republic Fleet joint research project to include engineers from all seven Minmatar tribes, the Svipul is a powerful symbol of inter-tribal unity for many Republic citizens.\\r\\n\\r\\nAlthough the contributions of engineers from the Nefantar and Starkmanir tribes were fairly minor, a large delegation from the Vo-Lakat Thukker caravan and donations from Republic loyalist capsuleers across the cluster were invaluable to the development of this incredibly adaptable warship.\", \"factionID\": 0, \"factionName\": \"\", \"groupID\": 5, \"iconID\": null, \"itemID\": 30000848, \"itemName\": \"M-OEE8\", \"killID\": 123456, \"killTime\": \"2015-11-25 11:13:53\", \"marketGroupID\": 1953, \"mass\": 1500000, \"moonID\": 0, \"orbitID\": null, \"orbitIndex\": null, \"ownerID\": 123456, \"portionSize\": 1, \"published\": 1, \"raceID\": 2, \"radius\": 4145289179056, \"regionID\": 10000010, \"security\": -0.218329, \"shipTypeID\": 34562, \"solarSystemID\": null, \"soundID\": 20074, \"typeID\": 5, \"typeName\": \"Svipul\", \"updated_at\": \"2015-11-27 13:54:58\", \"victimID\": 123456, \"volume\": 47000, \"x\": -1.4759869943375e+17, \"y\": 7.9788702592936e+16, \"z\": 2.0063317959704e+17 } ]","title":"Corporation Killmails"},{"location":"seat_api/corporations/#corporation-market-orders","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/market-orders/{corporation_id} Description Get a corporations market orders. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/market-orders/123456 Accept:application/json X-Token:123456 Sample Response: TBA","title":"Corporation Market Orders"},{"location":"seat_api/corporations/#corporation-member-security","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-security/{corporation_id} Description Get a corporations member security roles. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-security/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"characterName\": \"Bob\", \"corporationID\": 123456, \"created_at\": \"2015-11-27 14:01:18\", \"roleID\": 1, \"roleName\": \"roleDirector\", \"roleType\": \"grantableRolesAtOther\", \"updated_at\": \"2015-11-27 14:01:18\" } ]","title":"Corporation Member Security"},{"location":"seat_api/corporations/#corporation-member-security-logs","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-security-logs/{corporation_id} Description Get a corporations member security roles change log. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-security-logs/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"changeTime\": \"2015-10-25 13:19:00\", \"characterID\": 123456, \"characterName\": \"Bob\", \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:19:43\", \"hash\": \"cce3b9e3e0da5756939cf06d5ab923bd\", \"issuerID\": 123456, \"issuerName\": \"Bob\", \"newRoles\": \"[{\\\"8192\\\":\\\"roleHangarCanTake1\\\"},{\\\"1048576\\\":\\\"roleHangarCanQuery1\\\"},{\\\"4398046511104\\\":\\\"roleContainerCanTake1\\\"}]\", \"oldRoles\": \"[]\", \"roleLocationType\": \"rolesAtBase\", \"updated_at\": \"2015-11-21 14:19:43\" } ]","title":"Corporation Member Security Logs"},{"location":"seat_api/corporations/#corporation-member-security-titles","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-security-titles/{corporation_id} Description Get a corporations member security titles assignments. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-security-titles/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"characterID\": 123456, \"characterName\": \"Bob\", \"corporationID\": 123456, \"created_at\": \"2015-11-27 14:01:18\", \"titleID\": 16384, \"titleName\": \"Member\", \"updated_at\": \"2015-11-27 14:01:18\" } ]","title":"Corporation Member Security Titles"},{"location":"seat_api/corporations/#corporation-member-tracking","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/member-tracking/{corporation_id} Description Get a corporations member tracking data. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/member-tracking/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"base\": \"\", \"baseID\": 0, \"characterID\": 123456, \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:19:41\", \"enabled\": 1, \"grantableRoles\": \"0\", \"id\": 16, \"location\": \"M-OEE8 XI - VOTE THE JUDGE FOR C S M XI\", \"locationID\": 61000249, \"logoffDateTime\": \"2015-08-09 07:16:05\", \"logonDateTime\": \"2015-08-09 06:56:16\", \"name\": \"123456\", \"roles\": \"1044837312573210624\", \"shipType\": \"Unknown Type\", \"shipTypeID\": -1, \"startDateTime\": \"2015-01-23 19:58:00\", \"title\": \"\", \"updated_at\": \"2015-11-21 14:19:41\" } ]","title":"Corporation Member Tracking"},{"location":"seat_api/corporations/#corporation-sheet","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/sheet/{corporation_id} Description Get a corporations sheet. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/sheet/123456 Accept:application/json X-Token:123456 Sample Response: { \"allianceID\": 123456, \"allianceName\": \"Bob Alliance\", \"ceoID\": 91279102, \"ceoName\": \"Bob\", \"color1\": 674, \"color2\": 674, \"color3\": 680, \"corporationID\": 123456, \"corporationName\": \"Bob Corp\", \"created_at\": \"2015-11-21 14:19:14\", \"description\": \"\", \"factionID\": 0, \"graphicID\": 0, \"memberCount\": 71, \"memberLimit\": 2300, \"shape1\": 568, \"shape2\": 576, \"shape3\": 513, \"shares\": 1000, \"stationID\": 60003754, \"stationName\": \"Perimeter II - Moon 1 - Caldari Navy Assembly Plant\", \"taxRate\": \"0.00\", \"ticker\": \"BOB.\", \"updated_at\": \"2015-11-27 13:54:51\", \"url\": \"\" }","title":"Corporation Sheet"},{"location":"seat_api/corporations/#corporation-standings","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/standings/{corporation_id} Description Get a corporations standings. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/standings/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"corporationID\": 123456, \"created_at\": \"2015-11-25 14:27:33\", \"fromID\": 3018426, \"fromName\": \"Poreg Murchor\", \"id\": 3455, \"standing\": 2.15, \"type\": \"agents\", \"updated_at\": \"2015-11-25 14:27:33\" } ]","title":"Corporation Standings"},{"location":"seat_api/corporations/#corporation-starbases","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/starbases/{corporation_id}/{starbase_id?} Description Get a corporations starbases. If a starbaseID is set, mode details such as silo levels is also returned. Parameters corporation_id - The corporationID for the query starbase_id - An optional starbaseID to get details for Sample Request: http get http://localhost:8000/api/v1/corporation/starbases/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"allowAllianceMembers\": 1, \"allowCorporationMembers\": 1, \"baseFuelUsage\": 40, \"baseStrontUsage\": 400, \"fuelBaySize\": 140000, \"fuelBlocks\": 4370, \"inSovSystem\": 1, \"itemID\": 123456, \"mapName\": \"ABC\", \"mapSecurity\": -0.640046, \"moonID\": 123456, \"moonName\": \"ABC\", \"onAggression\": 0, \"onCorporationWar\": 1, \"onlineTimeStamp\": \"2015-12-20 21:47:33\", \"siloCapacityBonus\": null, \"solarSystemName\": \"ABC\", \"starbaseCharter\": 0, \"starbaseName\": \"Caldari Control Tower\", \"starbaseTypeID\": 16213, \"starbaseTypeName\": \"Caldari Control Tower\", \"state\": 4, \"stateTimeStamp\": \"2015-12-24 10:47:37\", \"strontBaySize\": 50000, \"strontium\": 0, \"updated_at\": \"2015-12-24 10:50:54\", \"useStandingsFrom\": 12345 } ]","title":"Corporation Starbases"},{"location":"seat_api/corporations/#corporation-wallet-divisions","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/wallet-divisions/{corporation_id} Description Get a corporations wallet divisions. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/wallet-divisions/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 10000, \"corporationID\": 87812345623749, \"created_at\": \"2015-11-21 14:19:14\", \"description\": \"Mercenary Wallet Division\", \"id\": 8, \"updated_at\": \"2015-11-21 14:19:14\" } ]","title":"Corporation Wallet Divisions"},{"location":"seat_api/corporations/#corporation-wallet-journal","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/wallet-journal/{corporation_id} Description Get a corporations wallet journal. Returns the last 1000 entries. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/wallet-journal/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 1000, \"amount\": \"1363368.75\", \"argID1\": 123456, \"argName1\": \"X-CFN6\", \"balance\": \"1.40\", \"corporationID\": 123456, \"created_at\": \"2015-11-27 12:22:24\", \"date\": \"2015-11-17 19:28:54\", \"hash\": \"5cc3cf718cb50be07bd7909ad13ed62e\", \"owner1TypeID\": 2, \"owner2TypeID\": 1375, \"ownerID1\": 123456, \"ownerID2\": 123456, \"ownerName1\": \"Bob\", \"ownerName2\": \"Bob\", \"reason\": \"24001:2,24014:1,24015:1,24016:1,24017:1,24018:1,24095:1,24149:5,24150:6,\", \"refID\": 11902387979, \"refTypeID\": 85, \"refTypeName\": \"Bounty Prizes\", \"updated_at\": \"2015-11-27 12:22:24\" } ]","title":"Corporation Wallet Journal"},{"location":"seat_api/corporations/#corporation-wallet-transactions","text":"Type Detail HTTP Verb GET Endpoint /api/v1/corporation/wallet-transactions/{corporation_id} Description Get a corporations wallet transactions. Returns the last 1000 entries. Parameters corporation_id - The corporationID for the query Sample Request: http get http://localhost:8000/api/v1/corporation/wallet-transactions/123456 Accept:application/json X-Token:123456 Sample Response: [ { \"accountKey\": 1006, \"characterID\": 123456, \"characterName\": \"Bob\", \"clientID\": 123456, \"clientName\": \"Core Industry CRY\", \"clientTypeID\": 1376, \"corporationID\": 123456, \"created_at\": \"2015-11-21 14:20:13\", \"hash\": \"cb72c321ce34cf8a2f232849caac9a29\", \"journalTransactionID\": 11799102551, \"price\": \"23250000.00\", \"quantity\": 1, \"stationID\": 60014890, \"stationName\": \"D7-ZAC VIII - Moon 1 - D7-ZAC CO2 Stronghold\", \"transactionDateTime\": \"2015-10-22 10:00:25\", \"transactionFor\": \"corporation\", \"transactionID\": 4103106946, \"transactionType\": \"buy\", \"typeID\": 31628, \"typeName\": \"Medium Warhead Calefaction Catalyst II\", \"updated_at\": \"2015-11-21 14:20:13\" } ]","title":"Corporation Wallet Transactions"},{"location":"seat_api/eve_api_keys/","text":"EVE API Keys All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie . Available Methods List All List Single Add an EVE API Key Edit an EVE API Key Delete an EVE API Key Transfer an EVE API Key List all EVE API Keys Type Detail HTTP Verb GET Endpoint /api/v1/key Description List all recorded EVE API Keys from the database. Sample Request: http get http://localhost:8000/api/v1/key Accept:application/json X-Token:123456 Sample Response: { \"created_at\": \"2015-11-21 14:12:40\", \"disabled_calls\": null, \"enabled\": 1, \"key_id\": 123445, \"last_error\": \"221:Illegal page request! Please verify the access granted by the key you are using!\", \"updated_at\": \"2015-11-21 14:14:11\", \"user_id\": 1, \"v_code\": \"IDT1wqjWtl9QGFGHPb5Zj0kle7EnQxWDiscH64aN44qhE07oOBTfCCLFmc3uj2Hf\" } Get a single EVE API Key Type Detail HTTP Verb GET Endpoint /api/v1/key/{key_id} Description Get details for a single EVE API Key. Parameters key_id - The keyID to retrieve Sample Request: http get http://localhost:8000/api/v1/key/123445 Accept:application/json X-Token:123456 Sample Response: { \"characters\": [ { \"characterID\": 123456, \"characterName\": \"ABC\", \"corporationID\": 123456, \"corporationName\": \"Garoun Investment Bank\", \"created_at\": \"2015-12-02 10:48:31\", \"id\": 452, \"keyID\": 123456, \"updated_at\": \"2015-12-02 10:48:31\" } ], \"created_at\": \"2015-12-29 13:37:47\", \"disabled_calls\": null, \"enabled\": 1, \"info\": { \"accessMask\": 1073741823, \"created_at\": \"2015-12-02 10:48:31\", \"expires\": null, \"keyID\": 123456, \"type\": \"Account\", \"updated_at\": \"2015-12-02 10:48:31\" }, \"key_id\": 123456, \"last_error\": null, \"updated_at\": \"2016-01-06 04:53:05\", \"user_id\": 10, \"v_code\": \"pTySpi19ChY18jKbQdSmDoA9zStDkbv5MYJDHm0aKtypa2IwjIDOXVNp9tfSFPfu\" } Add an EVE API Key Type Detail HTTP Verb POST Endpoint /api/v1/key Description Add an EVE API key to the database. Parameters key_id - The keyID to add v_code - The vCode to add user_id - (optional) - The SeAT owner of the key. Sample Request: http post http://localhost:8000/api/v1/key Accept:application/json X-Token:123456 \\ key_id=123 \\ v_code=JYKyPvIv75PN58UWcRcPHrtYKb4ySThFBk3n2qN4eaYGgCr1mrJbOwvQfHqNnf5k Sample Response: [ \"ok\" ] Edit an EVE API Key Type Detail HTTP Verb PUT Endpoint /api/v1/key/{key_id} Description Edit an EVE API key in the database. Parameters key_id - The keyID to update All other values are optional Sample Request: # sets an api key to enabled for the eveapi updater http put http://localhost:8000/api/v1/key/1234 Accept:application/json X-Token:123456 enabled=1 Sample Response: [ \"ok\" ] Delete an EVE API Key Type Detail HTTP Verb DELETE Endpoint /api/v1/key/{key_id} Description Delete an EVE API key from the database. Parameters key_id - The keyID to delete Sample Request: http delete http://localhost:8000/api/v1/key/1234 Accept:application/json X-Token:123456 Sample Response: [ \"ok\" ] Transfer an EVE API Key Type Detail HTTP Verb GET Endpoint /api/v1/key/transfer/{key_id}/{user_id} Description Transfer ownership of an EVE API Key. Parameters key_id - The keyID to transfer user_id - he SeAT User id to get key ownership Sample Request: http get http://localhost:8000/api/v1/key/transfer/123456/10 Accept:application/json X-Token:123456 Sample Response: [ \"ok\" ]","title":"EVE Api Keys"},{"location":"seat_api/eve_api_keys/#eve-api-keys","text":"All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie .","title":"EVE API Keys"},{"location":"seat_api/eve_api_keys/#available-methods","text":"List All List Single Add an EVE API Key Edit an EVE API Key Delete an EVE API Key Transfer an EVE API Key","title":"Available Methods"},{"location":"seat_api/eve_api_keys/#list-all-eve-api-keys","text":"Type Detail HTTP Verb GET Endpoint /api/v1/key Description List all recorded EVE API Keys from the database. Sample Request: http get http://localhost:8000/api/v1/key Accept:application/json X-Token:123456 Sample Response: { \"created_at\": \"2015-11-21 14:12:40\", \"disabled_calls\": null, \"enabled\": 1, \"key_id\": 123445, \"last_error\": \"221:Illegal page request! Please verify the access granted by the key you are using!\", \"updated_at\": \"2015-11-21 14:14:11\", \"user_id\": 1, \"v_code\": \"IDT1wqjWtl9QGFGHPb5Zj0kle7EnQxWDiscH64aN44qhE07oOBTfCCLFmc3uj2Hf\" }","title":"List all EVE API Keys"},{"location":"seat_api/eve_api_keys/#get-a-single-eve-api-key","text":"Type Detail HTTP Verb GET Endpoint /api/v1/key/{key_id} Description Get details for a single EVE API Key. Parameters key_id - The keyID to retrieve Sample Request: http get http://localhost:8000/api/v1/key/123445 Accept:application/json X-Token:123456 Sample Response: { \"characters\": [ { \"characterID\": 123456, \"characterName\": \"ABC\", \"corporationID\": 123456, \"corporationName\": \"Garoun Investment Bank\", \"created_at\": \"2015-12-02 10:48:31\", \"id\": 452, \"keyID\": 123456, \"updated_at\": \"2015-12-02 10:48:31\" } ], \"created_at\": \"2015-12-29 13:37:47\", \"disabled_calls\": null, \"enabled\": 1, \"info\": { \"accessMask\": 1073741823, \"created_at\": \"2015-12-02 10:48:31\", \"expires\": null, \"keyID\": 123456, \"type\": \"Account\", \"updated_at\": \"2015-12-02 10:48:31\" }, \"key_id\": 123456, \"last_error\": null, \"updated_at\": \"2016-01-06 04:53:05\", \"user_id\": 10, \"v_code\": \"pTySpi19ChY18jKbQdSmDoA9zStDkbv5MYJDHm0aKtypa2IwjIDOXVNp9tfSFPfu\" }","title":"Get a single EVE API Key"},{"location":"seat_api/eve_api_keys/#add-an-eve-api-key","text":"Type Detail HTTP Verb POST Endpoint /api/v1/key Description Add an EVE API key to the database. Parameters key_id - The keyID to add v_code - The vCode to add user_id - (optional) - The SeAT owner of the key. Sample Request: http post http://localhost:8000/api/v1/key Accept:application/json X-Token:123456 \\ key_id=123 \\ v_code=JYKyPvIv75PN58UWcRcPHrtYKb4ySThFBk3n2qN4eaYGgCr1mrJbOwvQfHqNnf5k Sample Response: [ \"ok\" ]","title":"Add an EVE API Key"},{"location":"seat_api/eve_api_keys/#edit-an-eve-api-key","text":"Type Detail HTTP Verb PUT Endpoint /api/v1/key/{key_id} Description Edit an EVE API key in the database. Parameters key_id - The keyID to update All other values are optional Sample Request: # sets an api key to enabled for the eveapi updater http put http://localhost:8000/api/v1/key/1234 Accept:application/json X-Token:123456 enabled=1 Sample Response: [ \"ok\" ]","title":"Edit an EVE API Key"},{"location":"seat_api/eve_api_keys/#delete-an-eve-api-key","text":"Type Detail HTTP Verb DELETE Endpoint /api/v1/key/{key_id} Description Delete an EVE API key from the database. Parameters key_id - The keyID to delete Sample Request: http delete http://localhost:8000/api/v1/key/1234 Accept:application/json X-Token:123456 Sample Response: [ \"ok\" ]","title":"Delete an EVE API Key"},{"location":"seat_api/eve_api_keys/#transfer-an-eve-api-key","text":"Type Detail HTTP Verb GET Endpoint /api/v1/key/transfer/{key_id}/{user_id} Description Transfer ownership of an EVE API Key. Parameters key_id - The keyID to transfer user_id - he SeAT User id to get key ownership Sample Request: http get http://localhost:8000/api/v1/key/transfer/123456/10 Accept:application/json X-Token:123456 Sample Response: [ \"ok\" ]","title":"Transfer an EVE API Key"},{"location":"seat_api/overview/","text":"introduction SeAT has a RESTful API. Endpoints are protected by a access token that is limited by IP address. For every IP address that wants to make API requests to SeAT, a unique token is required. API Tokens have no concept of ACL's. The API should primarily be used for integration with other systems. definitions Currently, all API endpoints live at <seat url>/api/<version> where <sear url> is the full url to your SeAT instance and <version> is the API version you wish to interact with. authentication Authentication to the SeAT API is done via a X-Token header. A token may be obtained by browsing to the API settings page in the SeAT WebUI and generating one. A sample request using curl with an authentication token can be seen below: $ curl -X GET -H \"X-Token:123456\" -H \"Accept: application/json\" http://localhost:8000/api/v1/key * Trying ::1... * Connected to localhost (::1) port 8000 (#0) > GET /api/v1/key HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.43.0 > Accept: application/json > X-Token:123456 > < HTTP/1.1 200 OK < Host: localhost:8000 < Connection: close < Cache-Control: no-cache < Date: Sat, 28 Nov 2015 22:27:12 GMT < Content-Type: application/json content-type Make sure you specify the Accepted content-type header as application/json . When using cURL , you can specify it with -H Example: $ curl -X POST https://seat.testsite.local/api/v1/key -H \"Accept: application/json\" -H \"X-Token: L3SxgdX4XUw6pVWVSCftgsh16eAbBF3D\" -d \"key_id=123&v_code=123\" {\"v_code\":[\"The v code must be 64 characters.\"]} If you don't do this, the API will respond with a redirect and not give you the expected content. errors All SeAT API responses will include the appropriate HTTP response codes. You should check this for error handling purposes. Some sample response codes could be: HTTP 200 OK - The request was successful. HTTP 404 Not Found - The requested endpoint could not be found. HTTP 422 Unprocessable Entity - Typically, input validation has failed. The response json should contain the errors. HTTP 500 Internal Server Error - Something bad has happened. Check the server and Laravel log files for more details.","title":"Overview"},{"location":"seat_api/overview/#introduction","text":"SeAT has a RESTful API. Endpoints are protected by a access token that is limited by IP address. For every IP address that wants to make API requests to SeAT, a unique token is required. API Tokens have no concept of ACL's. The API should primarily be used for integration with other systems.","title":"introduction"},{"location":"seat_api/overview/#definitions","text":"Currently, all API endpoints live at <seat url>/api/<version> where <sear url> is the full url to your SeAT instance and <version> is the API version you wish to interact with.","title":"definitions"},{"location":"seat_api/overview/#authentication","text":"Authentication to the SeAT API is done via a X-Token header. A token may be obtained by browsing to the API settings page in the SeAT WebUI and generating one. A sample request using curl with an authentication token can be seen below: $ curl -X GET -H \"X-Token:123456\" -H \"Accept: application/json\" http://localhost:8000/api/v1/key * Trying ::1... * Connected to localhost (::1) port 8000 (#0) > GET /api/v1/key HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.43.0 > Accept: application/json > X-Token:123456 > < HTTP/1.1 200 OK < Host: localhost:8000 < Connection: close < Cache-Control: no-cache < Date: Sat, 28 Nov 2015 22:27:12 GMT < Content-Type: application/json","title":"authentication"},{"location":"seat_api/overview/#content-type","text":"Make sure you specify the Accepted content-type header as application/json . When using cURL , you can specify it with -H Example: $ curl -X POST https://seat.testsite.local/api/v1/key -H \"Accept: application/json\" -H \"X-Token: L3SxgdX4XUw6pVWVSCftgsh16eAbBF3D\" -d \"key_id=123&v_code=123\" {\"v_code\":[\"The v code must be 64 characters.\"]} If you don't do this, the API will respond with a redirect and not give you the expected content.","title":"content-type"},{"location":"seat_api/overview/#errors","text":"All SeAT API responses will include the appropriate HTTP response codes. You should check this for error handling purposes. Some sample response codes could be: HTTP 200 OK - The request was successful. HTTP 404 Not Found - The requested endpoint could not be found. HTTP 422 Unprocessable Entity - Typically, input validation has failed. The response json should contain the errors. HTTP 500 Internal Server Error - Something bad has happened. Check the server and Laravel log files for more details.","title":"errors"},{"location":"seat_api/roles_permissions/","text":"SeAT Roles, Permissions and Authorization All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie . Available Methods List All Show Detail List Available Permissions Create New Role Grant User a Role Delete Role Revoke Role from User User has Role User has Permission Validate SeAT Credentials List all Roles Type Detail HTTP Verb GET Endpoint /api/v1/role Description List all recorded Roles from the database. Sample Request: http get http://localhost:8000/api/v1/role Accept:application/json X-Token:123456 Sample Response: [ { \"id\": 1, \"title\": \"Superuser\" }, { \"id\": 2, \"title\": \"Corp Accountants\" } ] Show Role Detail Type Detail HTTP Verb GET Endpoint /api/v1/role/detail/{identifier} Description Get details for a single SeAT Role. Shows Users with the Role, Permissions as well as Affiliations. Parameters identifier - The identifier for the Role. Can be either the role_id or title Sample Request: http get http://localhost:8000/api/v1/role/2 Accept:application/json X-Token:123456 Sample Response: { \"affiliations\": [ { \"affiliation\": 123456, \"id\": 2, \"pivot\": { \"affiliation_id\": 2, \"role_id\": 2 }, \"type\": \"corp\" } ], \"id\": 2, \"permissions\": [ { \"id\": 2, \"pivot\": { \"permission_id\": 2, \"role_id\": 2 }, \"title\": \"corporation.wallet_journal\" } ], \"title\": \"Corp Accountants\", \"users\": [ { \"active\": 0, \"created_at\": \"2015-11-21 14:12:07\", \"email\": \"admin@seat.local\", \"id\": 1, \"last_login\": \"2015-11-30 03:55:44\", \"last_login_source\": \"::1\", \"name\": \"admin\", \"pivot\": { \"role_id\": 2, \"user_id\": 1 }, \"updated_at\": \"2015-11-30 03:55:44\" }, { \"active\": 0, \"created_at\": \"2015-11-26 18:58:29\", \"email\": \"test@test.com\", \"id\": 2, \"last_login\": \"2015-11-26 18:58:29\", \"last_login_source\": \"::1\", \"name\": \"test\", \"pivot\": { \"role_id\": 2, \"user_id\": 2 }, \"updated_at\": \"2015-11-26 21:11:12\" } ] } List all Permissions Type Detail HTTP Verb GET Endpoint /api/v1/role/query/permissions Description List all of the possible SeAT Permissions. Sample Request: http get http://localhost:8000/api/v1/role/query/permissions Accept:application/json X-Token:123456 Sample Response: { \"0\": \"superuser\", \"1\": \"queue_manager\", \"apikey\": [ \"delete\", \"detail\", \"toggle_status\", \"list\", \"update\" ], \"character\": [ \"assets\", \"calendar\", \"contacts\", \"contracts\", \"industry\", \"killmails\", \"list\", \"mail\", \"market_orders\", \"notifications\", \"pi\", \"research_agents\", \"skills\", \"standings\", \"sheet\", \"wallet_journal\", \"wallet_transactions\" ] } Create New Role Type Detail HTTP Verb POST Endpoint /api/v1/role/new Description Create a new SeAT role. Parameters name - The name for the new Role. Sample Request: http post http://localhost:8000/api/v1/role/new name=api_test Accept:application/json X-Token:123456 Sample Response: true Delete Role Type Detail HTTP Verb DELETE Endpoint /api/v1/role/remove/{role_id} Description Delete a SeAT role. Parameters role_id - The id for the Role to delete. Sample Request: http delete http://localhost:8000/api/v1/role/remove/3 Accept:application/json X-Token:123456 Sample Response: true Grant User a Role Type Detail HTTP Verb GET Endpoint /api/v1/role/grant-user-role/{user_id}/{role_id} Description Grant a SeAT user a SeAT role. Parameters user_id - The id for the User. role_id - The id for the Role. Sample Request: http get http://localhost:8000/api/v1/role/grant-user-role/2/2 \\ Accept:application/json X-Token:123456 Sample Response: true Revoke User from Role Type Detail HTTP Verb GET Endpoint /api/v1/role/revoke-user-role/{user_id}/{role_id} Description Remove a SeAT user from a SeAT role. Parameters user_id - The id for the User. role_id - The id for the Role. Sample Request: http get http://localhost:8000/api/v1/role/revoke-user-role/2/2 \\ Accept:application/json X-Token:123456 Sample Response: true User has Role Type Detail HTTP Verb GET Endpoint /api/v1/role/query/role-check/{user_identifier}/{role_identifier} Description Determine if a SeAT user has a specific SeAT Role. Parameters user_identifier - The identifier for the User. Can be either the user_id or name role_identifier - The identifier for the Role. Can be either the role_id or title Sample Request: // Note the quotes around the URL. If your role names have spaces in them, // make sure you properly url encode them before adding it to the URL itself. http get \"http://localhost:8000/api/v1/role/query/role-check/admin/Corp Accountants\" \\ Accept:application/json X-Token:123456 Sample Response: true User has Permission Type Detail HTTP Verb GET Endpoint /api/v1/role/query/permission-check/{user_identifier}/{permission} Description Determine if a SeAT user has a specific SeAT Permission. NOTE This endpoint does not honor affiliation rules! Parameters user_identifier - The identifier for the User. Can be either the user_id or name. permission - The identifier for the Permission. Available permissions can be found at the permissions list . Sample Request: http get http://localhost:8000/api/v1/role/query/permission-check/test/corporation.assets \\ Accept:application/json X-Token:123456 Sample Response: false Validate SeAT Credentials Type Detail HTTP Verb POST Endpoint /api/v1/user/auth/login Description Validates a SeAT accounts credentials Parameters username - The username. password - The password for the user. Sample Request: http post http://localhost:8000/api/v1/user/auth/login Accept:application/json \\ X-Token:123456 username=api_user password=blahblah Sample Response: true","title":"SeAT Roles, Permissions and Authorization"},{"location":"seat_api/roles_permissions/#seat-roles-permissions-and-authorization","text":"All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie .","title":"SeAT Roles, Permissions and Authorization"},{"location":"seat_api/roles_permissions/#available-methods","text":"List All Show Detail List Available Permissions Create New Role Grant User a Role Delete Role Revoke Role from User User has Role User has Permission Validate SeAT Credentials","title":"Available Methods"},{"location":"seat_api/roles_permissions/#list-all-roles","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role Description List all recorded Roles from the database. Sample Request: http get http://localhost:8000/api/v1/role Accept:application/json X-Token:123456 Sample Response: [ { \"id\": 1, \"title\": \"Superuser\" }, { \"id\": 2, \"title\": \"Corp Accountants\" } ]","title":"List all Roles"},{"location":"seat_api/roles_permissions/#show-role-detail","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role/detail/{identifier} Description Get details for a single SeAT Role. Shows Users with the Role, Permissions as well as Affiliations. Parameters identifier - The identifier for the Role. Can be either the role_id or title Sample Request: http get http://localhost:8000/api/v1/role/2 Accept:application/json X-Token:123456 Sample Response: { \"affiliations\": [ { \"affiliation\": 123456, \"id\": 2, \"pivot\": { \"affiliation_id\": 2, \"role_id\": 2 }, \"type\": \"corp\" } ], \"id\": 2, \"permissions\": [ { \"id\": 2, \"pivot\": { \"permission_id\": 2, \"role_id\": 2 }, \"title\": \"corporation.wallet_journal\" } ], \"title\": \"Corp Accountants\", \"users\": [ { \"active\": 0, \"created_at\": \"2015-11-21 14:12:07\", \"email\": \"admin@seat.local\", \"id\": 1, \"last_login\": \"2015-11-30 03:55:44\", \"last_login_source\": \"::1\", \"name\": \"admin\", \"pivot\": { \"role_id\": 2, \"user_id\": 1 }, \"updated_at\": \"2015-11-30 03:55:44\" }, { \"active\": 0, \"created_at\": \"2015-11-26 18:58:29\", \"email\": \"test@test.com\", \"id\": 2, \"last_login\": \"2015-11-26 18:58:29\", \"last_login_source\": \"::1\", \"name\": \"test\", \"pivot\": { \"role_id\": 2, \"user_id\": 2 }, \"updated_at\": \"2015-11-26 21:11:12\" } ] }","title":"Show Role Detail"},{"location":"seat_api/roles_permissions/#list-all-permissions","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role/query/permissions Description List all of the possible SeAT Permissions. Sample Request: http get http://localhost:8000/api/v1/role/query/permissions Accept:application/json X-Token:123456 Sample Response: { \"0\": \"superuser\", \"1\": \"queue_manager\", \"apikey\": [ \"delete\", \"detail\", \"toggle_status\", \"list\", \"update\" ], \"character\": [ \"assets\", \"calendar\", \"contacts\", \"contracts\", \"industry\", \"killmails\", \"list\", \"mail\", \"market_orders\", \"notifications\", \"pi\", \"research_agents\", \"skills\", \"standings\", \"sheet\", \"wallet_journal\", \"wallet_transactions\" ] }","title":"List all Permissions"},{"location":"seat_api/roles_permissions/#create-new-role","text":"Type Detail HTTP Verb POST Endpoint /api/v1/role/new Description Create a new SeAT role. Parameters name - The name for the new Role. Sample Request: http post http://localhost:8000/api/v1/role/new name=api_test Accept:application/json X-Token:123456 Sample Response: true","title":"Create New Role"},{"location":"seat_api/roles_permissions/#delete-role","text":"Type Detail HTTP Verb DELETE Endpoint /api/v1/role/remove/{role_id} Description Delete a SeAT role. Parameters role_id - The id for the Role to delete. Sample Request: http delete http://localhost:8000/api/v1/role/remove/3 Accept:application/json X-Token:123456 Sample Response: true","title":"Delete Role"},{"location":"seat_api/roles_permissions/#grant-user-a-role","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role/grant-user-role/{user_id}/{role_id} Description Grant a SeAT user a SeAT role. Parameters user_id - The id for the User. role_id - The id for the Role. Sample Request: http get http://localhost:8000/api/v1/role/grant-user-role/2/2 \\ Accept:application/json X-Token:123456 Sample Response: true","title":"Grant User a Role"},{"location":"seat_api/roles_permissions/#revoke-user-from-role","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role/revoke-user-role/{user_id}/{role_id} Description Remove a SeAT user from a SeAT role. Parameters user_id - The id for the User. role_id - The id for the Role. Sample Request: http get http://localhost:8000/api/v1/role/revoke-user-role/2/2 \\ Accept:application/json X-Token:123456 Sample Response: true","title":"Revoke User from Role"},{"location":"seat_api/roles_permissions/#user-has-role","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role/query/role-check/{user_identifier}/{role_identifier} Description Determine if a SeAT user has a specific SeAT Role. Parameters user_identifier - The identifier for the User. Can be either the user_id or name role_identifier - The identifier for the Role. Can be either the role_id or title Sample Request: // Note the quotes around the URL. If your role names have spaces in them, // make sure you properly url encode them before adding it to the URL itself. http get \"http://localhost:8000/api/v1/role/query/role-check/admin/Corp Accountants\" \\ Accept:application/json X-Token:123456 Sample Response: true","title":"User has Role"},{"location":"seat_api/roles_permissions/#user-has-permission","text":"Type Detail HTTP Verb GET Endpoint /api/v1/role/query/permission-check/{user_identifier}/{permission} Description Determine if a SeAT user has a specific SeAT Permission. NOTE This endpoint does not honor affiliation rules! Parameters user_identifier - The identifier for the User. Can be either the user_id or name. permission - The identifier for the Permission. Available permissions can be found at the permissions list . Sample Request: http get http://localhost:8000/api/v1/role/query/permission-check/test/corporation.assets \\ Accept:application/json X-Token:123456 Sample Response: false","title":"User has Permission"},{"location":"seat_api/roles_permissions/#validate-seat-credentials","text":"Type Detail HTTP Verb POST Endpoint /api/v1/user/auth/login Description Validates a SeAT accounts credentials Parameters username - The username. password - The password for the user. Sample Request: http post http://localhost:8000/api/v1/user/auth/login Accept:application/json \\ X-Token:123456 username=api_user password=blahblah Sample Response: true","title":"Validate SeAT Credentials"},{"location":"seat_api/seat_users/","text":"SeAT Users All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie . Available Methods List All Show Detail Add a User Edit a User Delete a User List all Users Type Detail HTTP Verb GET Endpoint /api/v1/user Description List all SeAT Users from the database. Sample Request: http get http://localhost:8000/api/v1/user Accept:application/json X-Token:123456 Sample Response: [ { \"active\": 0, \"created_at\": \"2015-11-21 14:12:07\", \"email\": \"admin@seat.local\", \"id\": 1, \"last_login\": \"2015-11-29 08:18:28\", \"last_login_source\": \"::1\", \"name\": \"admin\", \"updated_at\": \"2015-11-29 08:18:28\" }, { \"active\": 0, \"created_at\": \"2015-11-26 18:58:29\", \"email\": \"test@test.com\", \"id\": 2, \"last_login\": \"2015-11-26 18:58:29\", \"last_login_source\": \"::1\", \"name\": \"test\", \"updated_at\": \"2015-11-26 21:11:12\" } ] Show User Detail Type Detail HTTP Verb GET Endpoint /api/v1/user/{identifier} Description Get details for a single SeAT User. Shows owned EVE API keys, Roles and Affiliations. Parameters identifier - The identifier for the user. Can be either the user_id or name. Sample Request: http get http://localhost:8000/api/v1/user/test Accept:application/json X-Token:123456 Sample Response: { \"active\": 0, \"affiliations\": [], \"created_at\": \"2015-11-26 18:58:29\", \"email\": \"test@test.com\", \"id\": 2, \"keys\": [ { \"created_at\": \"2015-11-21 14:12:40\", \"disabled_calls\": null, \"enabled\": 1, \"key_id\": 1234, \"last_error\": \"221:Illegal page request! Please verify the access granted by the key you are using!\", \"updated_at\": \"2015-11-21 14:14:17\", \"user_id\": 2, \"v_code\": \"JYKyPvIv75PN58UWcRcPHrtYKb4ySThFBk3n2qN4eaYGgCr1mrJbOwvQfHqNnf5k\" } ], \"last_login\": \"2015-11-26 18:58:29\", \"last_login_source\": \"::1\", \"name\": \"test\", \"roles\": [ { \"id\": 2, \"pivot\": { \"role_id\": 2, \"user_id\": 2 }, \"title\": \"Corp Accountant\" } ], \"updated_at\": \"2015-11-26 21:11:12\" } Add a SeAT User Type Detail HTTP Verb POST Endpoint /api/v1/user Description Adds a SeAT user. Parameters username - The username. email - The email address. password - The password for the user. Sample Request: http post http://localhost:8000/api/v1/user Accept:application/json X-Token:123456 \\ username=api_user email=test@localhost.local password=blahblah Sample Response: [ \"ok\" ] Edit a User Type Detail HTTP Verb PUT Endpoint /api/v1/user/{identifier} Description Edit a SeAT User in the database. Parameters identifier - The identifier for the user. Can be either the user_id or name. All other fields are optional. Sample Request: # changes a users password and make the user active http put http://localhost:8000/api/v1/user/api_user Accept:application/json \\ X-Token:123456 password=blahblahr active=1 Sample Response: [ \"ok\" ] Delete a User Type Detail HTTP Verb DELETE Endpoint /api/v1/user/{identifier} Description Delete a SeAT User from the database. Parameters identifier - The identifier for the user. Can be either the user_id or name. Sample Request: http delete http://localhost:8000/api/v1/user/api_user Accept:application/json X-Token:123456 Sample Response: [ \"ok\" ]","title":"SeAT Users"},{"location":"seat_api/seat_users/#seat-users","text":"All endpoints in this document are for version1 ( /api/v1 ) of the SeAT API. All methods below have the requests and responses sampled using httpie .","title":"SeAT Users"},{"location":"seat_api/seat_users/#available-methods","text":"List All Show Detail Add a User Edit a User Delete a User","title":"Available Methods"},{"location":"seat_api/seat_users/#list-all-users","text":"Type Detail HTTP Verb GET Endpoint /api/v1/user Description List all SeAT Users from the database. Sample Request: http get http://localhost:8000/api/v1/user Accept:application/json X-Token:123456 Sample Response: [ { \"active\": 0, \"created_at\": \"2015-11-21 14:12:07\", \"email\": \"admin@seat.local\", \"id\": 1, \"last_login\": \"2015-11-29 08:18:28\", \"last_login_source\": \"::1\", \"name\": \"admin\", \"updated_at\": \"2015-11-29 08:18:28\" }, { \"active\": 0, \"created_at\": \"2015-11-26 18:58:29\", \"email\": \"test@test.com\", \"id\": 2, \"last_login\": \"2015-11-26 18:58:29\", \"last_login_source\": \"::1\", \"name\": \"test\", \"updated_at\": \"2015-11-26 21:11:12\" } ]","title":"List all Users"},{"location":"seat_api/seat_users/#show-user-detail","text":"Type Detail HTTP Verb GET Endpoint /api/v1/user/{identifier} Description Get details for a single SeAT User. Shows owned EVE API keys, Roles and Affiliations. Parameters identifier - The identifier for the user. Can be either the user_id or name. Sample Request: http get http://localhost:8000/api/v1/user/test Accept:application/json X-Token:123456 Sample Response: { \"active\": 0, \"affiliations\": [], \"created_at\": \"2015-11-26 18:58:29\", \"email\": \"test@test.com\", \"id\": 2, \"keys\": [ { \"created_at\": \"2015-11-21 14:12:40\", \"disabled_calls\": null, \"enabled\": 1, \"key_id\": 1234, \"last_error\": \"221:Illegal page request! Please verify the access granted by the key you are using!\", \"updated_at\": \"2015-11-21 14:14:17\", \"user_id\": 2, \"v_code\": \"JYKyPvIv75PN58UWcRcPHrtYKb4ySThFBk3n2qN4eaYGgCr1mrJbOwvQfHqNnf5k\" } ], \"last_login\": \"2015-11-26 18:58:29\", \"last_login_source\": \"::1\", \"name\": \"test\", \"roles\": [ { \"id\": 2, \"pivot\": { \"role_id\": 2, \"user_id\": 2 }, \"title\": \"Corp Accountant\" } ], \"updated_at\": \"2015-11-26 21:11:12\" }","title":"Show User Detail"},{"location":"seat_api/seat_users/#add-a-seat-user","text":"Type Detail HTTP Verb POST Endpoint /api/v1/user Description Adds a SeAT user. Parameters username - The username. email - The email address. password - The password for the user. Sample Request: http post http://localhost:8000/api/v1/user Accept:application/json X-Token:123456 \\ username=api_user email=test@localhost.local password=blahblah Sample Response: [ \"ok\" ]","title":"Add a SeAT User"},{"location":"seat_api/seat_users/#edit-a-user","text":"Type Detail HTTP Verb PUT Endpoint /api/v1/user/{identifier} Description Edit a SeAT User in the database. Parameters identifier - The identifier for the user. Can be either the user_id or name. All other fields are optional. Sample Request: # changes a users password and make the user active http put http://localhost:8000/api/v1/user/api_user Accept:application/json \\ X-Token:123456 password=blahblahr active=1 Sample Response: [ \"ok\" ]","title":"Edit a User"},{"location":"seat_api/seat_users/#delete-a-user","text":"Type Detail HTTP Verb DELETE Endpoint /api/v1/user/{identifier} Description Delete a SeAT User from the database. Parameters identifier - The identifier for the user. Can be either the user_id or name. Sample Request: http delete http://localhost:8000/api/v1/user/api_user Accept:application/json X-Token:123456 Sample Response: [ \"ok\" ]","title":"Delete a User"},{"location":"upgrade_guides/general_upgrades/","text":"This guide attempts to document the SeAT upgrade procedure. As with anything, it is a very good idea to have backups ready before attempting any upgrades. In the case of SeAT, the most important component that needs to be backed up is the SeAT database. In short, something as simple as mysqldump -uroot -p seat > backup.sql should be perfectly fine. Should something go wrong, then you can simply re-install SeAT, restore the database and you should be good to go. upgrade options There are 2 ways to upgrade seat. The recommended way being using the seat tool and then the manual way. For most cases the seat tool should be fine as it tries to auto detect things for you, however, if you edited the defaults or installed on some custom operating system, then you may need to upgrade manually. upgrading using the seat tool The seat tool is by far the best way for quick and painless upgrades. All you need to do is run the upgrade command and all will be done for you. Follow the next steps to get this done: First, if you havent downloaded the seat tool yet, do so now by following this guide . If you already have the seat tool downloaded, make sure the tool itself is at its latest version. Do this by running: seat update:self . If you have not yet backed up your database, do so now! This is the only part that can not be recovered in case something goes wrong! Ensure that the job queue is empty. Upgrade SeAT by running: seat update:seat . Done :D manually upgrading If you cant or don't want to use the SeAT tool, follow these steps to upgrade SeAT. Ensure that you are in the path where you installed. By default this should be /var/www/seat . Put your application into maintenance mode. This will ensure that no request from the outside will hit your applications logic, and also help you perform an upgrade uninterrupted. Do this with: php artisan down Its a good thing to update composer itself. This is not a hard requirement, but definitely recommended. Do this with: composer self-update The next thing to do is get the latest SeAT packages. The below example adds the --no-dev argument as these packages are generally not needed in production. Upgrade the packages with: composer update --no-dev With the packages upgraded, we can now publish any new migrations/assets/configs. This can be done with: php artisan vendor:publish --force Once the needed files are published, run any new/outstanding migrations with: php artisan migrate With the migrations done, run the seeders to update any static data: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Restart the supervisor workers to ensure they also pickup the latest code: supervisorctl restart Finally, we can simply bring our application back out of maintenance mode with: php artisan up","title":"General Upgrades"},{"location":"upgrade_guides/general_upgrades/#upgrade-options","text":"There are 2 ways to upgrade seat. The recommended way being using the seat tool and then the manual way. For most cases the seat tool should be fine as it tries to auto detect things for you, however, if you edited the defaults or installed on some custom operating system, then you may need to upgrade manually.","title":"upgrade options"},{"location":"upgrade_guides/general_upgrades/#upgrading-using-the-seat-tool","text":"The seat tool is by far the best way for quick and painless upgrades. All you need to do is run the upgrade command and all will be done for you. Follow the next steps to get this done: First, if you havent downloaded the seat tool yet, do so now by following this guide . If you already have the seat tool downloaded, make sure the tool itself is at its latest version. Do this by running: seat update:self . If you have not yet backed up your database, do so now! This is the only part that can not be recovered in case something goes wrong! Ensure that the job queue is empty. Upgrade SeAT by running: seat update:seat . Done :D","title":"upgrading using the seat tool"},{"location":"upgrade_guides/general_upgrades/#manually-upgrading","text":"If you cant or don't want to use the SeAT tool, follow these steps to upgrade SeAT. Ensure that you are in the path where you installed. By default this should be /var/www/seat . Put your application into maintenance mode. This will ensure that no request from the outside will hit your applications logic, and also help you perform an upgrade uninterrupted. Do this with: php artisan down Its a good thing to update composer itself. This is not a hard requirement, but definitely recommended. Do this with: composer self-update The next thing to do is get the latest SeAT packages. The below example adds the --no-dev argument as these packages are generally not needed in production. Upgrade the packages with: composer update --no-dev With the packages upgraded, we can now publish any new migrations/assets/configs. This can be done with: php artisan vendor:publish --force Once the needed files are published, run any new/outstanding migrations with: php artisan migrate With the migrations done, run the seeders to update any static data: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder Restart the supervisor workers to ensure they also pickup the latest code: supervisorctl restart Finally, we can simply bring our application back out of maintenance mode with: php artisan up","title":"manually upgrading"},{"location":"upgrade_guides/seat1_to_2/","text":"The upgrade path from SeAT 1.x to SeAT 2.0 requires some manual work. This is mainly due to the number of fundamental changes that were made in the SeAT 2.x release. notes on the upgrade The way SeAT is structured has not changed much since its version 1x days. The biggest change is a Laravel framework upgrade to version 5.3. This introduced a new base layout for the application which is why the manual upgrade is needed. The upgrade process has a large amount of database migrations that need to run so grab a coffee depending on how big your database is! requirements SeAT 2.0 requires PHP 7.0. At the time of writing this document, PHP 7.1 is not supported due to bug in PhealNG (the component SeAT uses to talk to the EVE API). MySQL 5.7 is recommended but not required. A database backup is an absolute must . Everything in SeAT can be recovered is some way or form except for your database . Make 100% sure you backed this up before proceeding with the upgrade! Take note of where SeAT is installed. This is usually in /var/www/seat . upgrade procedure preparation If users are using your SeAT instance, or the workers are churning away in the background, then you may risk losing some information (although unlikely). Its therefore recommended that you start by putting SeAT into maintenance mode before starting the upgrade. Do this by running the following command in your SeAT path. $ cd /var/www/seat $ php artisan down You should see the message Application is now in maintenance mode. . backups Make a backup of your SeAT database and store it somewhere safe! Do not skip this step! In your SeAT directory, make a copy of the .env file. This file contains all of your SeAT configuration. These values are needed to reconnect to the database once SeAT 2.0 is installed. php 7 Install PHP7 if you don't have it already. You can check your PHP version by running php -v : $ php -v PHP 7.0.14 (cli) (built: Dec 7 2016 10:25:25) ( NTS ) Copyright (c) 1997-2016 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies get the new code SeAT 2.0 can be installed in exactly the same place as where you had your v1.x installation. If you reuse this path then no webserver re-configuration will be needed. We will move the old installation out of the way, and install SeAT 2.0. To do this, run the following commands: First, move the old installation out of the way: $ cd /var/www $ mv seat seat.old You can double check that this was successful by running ls and ensuring that there is a folder named seat.old now. Next, get the new SeAT code by running composer create-project eveseat/seat seat --no-dev : $ cd /var/www $ composer create-project eveseat/seat seat --no-dev Installing eveseat/seat (2.0.0) - Installing eveseat/seat (2.0.0) Loading from cache Created project in seat > php -r \"file_exists('.env') || copy('.env.example', '.env');\" Loading composer repositories with package information Updating dependencies [ ... snip ... ] publish the assets Next, we need to publish the new SeAT 2.0 CSS & Javascript and database migrations. This can be done with php artisan vendor:publish --force . reconfigure .env file With the new code ready to use, the next thing that is required is to reconnect the database. Remember that .env file you backed up earlier? Refer to it for the values needed in the newly installed env file that can be found at /var/www/seat/.env . Important keys to populate with the correct values are: DB_HOST= DB_PORT= DB_DATABASE= DB_USERNAME= DB_PASSWORD= SeAT 2.0 introduced new configuration items in the .env that you can review. There is also the option to configure Supervisor & SeAT integration, which can be done by following the admin guide titled SeAT & Supervisor Integration . run migrations With the database reconnected, its time to run the migrations for SeAT 2.0. This is the part that may take some time, depending on how big your database is. To run the migrations, make sure you are still in your seat path ( /var/www/seat ) and run php artisan migrate : $ cd /var/www/seat $ php artisan migrate You will see a bunch of messages and eventually your shell prompt again, indicating that it has completed. If you receive errors here, double check that you have entered the correct database settings in the .env file previously mentioned. database seeders With the database migration complete, its time to seed it with some of the static data SeAT needs. Do this with the following commands: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder update worker jobs The Laravel 5.3 upgrade in SeAT changed the way worker jobs are started. You can edit the command used to start a worker in your seat.conf file in supervisor. Normally, this file will be somewhere like in /etc/supervisor/conf.d/ . The only line you really need to edit is the one that starts with command , replacing it with: command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 . A full block for SeAT 2.0 should therefore be: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=www-data NOTE Keep in mind the user value and the path to artisan should be correct. Update them to the correct values of you made changes to the defaults. The user value differs many times based on Linux distribution too! finishing off With all of that done, bring your application back up with php artisan up and start the supervisor workers again. Watch the logs for any errors in case things have not gone as expected. If you need any help, feel free to join the Slack channel details in the Contact page on the left.","title":"SeAT 1.x to SeAT 2.0"},{"location":"upgrade_guides/seat1_to_2/#notes-on-the-upgrade","text":"The way SeAT is structured has not changed much since its version 1x days. The biggest change is a Laravel framework upgrade to version 5.3. This introduced a new base layout for the application which is why the manual upgrade is needed. The upgrade process has a large amount of database migrations that need to run so grab a coffee depending on how big your database is!","title":"notes on the upgrade"},{"location":"upgrade_guides/seat1_to_2/#requirements","text":"SeAT 2.0 requires PHP 7.0. At the time of writing this document, PHP 7.1 is not supported due to bug in PhealNG (the component SeAT uses to talk to the EVE API). MySQL 5.7 is recommended but not required. A database backup is an absolute must . Everything in SeAT can be recovered is some way or form except for your database . Make 100% sure you backed this up before proceeding with the upgrade! Take note of where SeAT is installed. This is usually in /var/www/seat .","title":"requirements"},{"location":"upgrade_guides/seat1_to_2/#upgrade-procedure","text":"","title":"upgrade procedure"},{"location":"upgrade_guides/seat1_to_2/#preparation","text":"If users are using your SeAT instance, or the workers are churning away in the background, then you may risk losing some information (although unlikely). Its therefore recommended that you start by putting SeAT into maintenance mode before starting the upgrade. Do this by running the following command in your SeAT path. $ cd /var/www/seat $ php artisan down You should see the message Application is now in maintenance mode. .","title":"preparation"},{"location":"upgrade_guides/seat1_to_2/#backups","text":"Make a backup of your SeAT database and store it somewhere safe! Do not skip this step! In your SeAT directory, make a copy of the .env file. This file contains all of your SeAT configuration. These values are needed to reconnect to the database once SeAT 2.0 is installed.","title":"backups"},{"location":"upgrade_guides/seat1_to_2/#php-7","text":"Install PHP7 if you don't have it already. You can check your PHP version by running php -v : $ php -v PHP 7.0.14 (cli) (built: Dec 7 2016 10:25:25) ( NTS ) Copyright (c) 1997-2016 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies","title":"php 7"},{"location":"upgrade_guides/seat1_to_2/#get-the-new-code","text":"SeAT 2.0 can be installed in exactly the same place as where you had your v1.x installation. If you reuse this path then no webserver re-configuration will be needed. We will move the old installation out of the way, and install SeAT 2.0. To do this, run the following commands: First, move the old installation out of the way: $ cd /var/www $ mv seat seat.old You can double check that this was successful by running ls and ensuring that there is a folder named seat.old now. Next, get the new SeAT code by running composer create-project eveseat/seat seat --no-dev : $ cd /var/www $ composer create-project eveseat/seat seat --no-dev Installing eveseat/seat (2.0.0) - Installing eveseat/seat (2.0.0) Loading from cache Created project in seat > php -r \"file_exists('.env') || copy('.env.example', '.env');\" Loading composer repositories with package information Updating dependencies [ ... snip ... ]","title":"get the new code"},{"location":"upgrade_guides/seat1_to_2/#publish-the-assets","text":"Next, we need to publish the new SeAT 2.0 CSS & Javascript and database migrations. This can be done with php artisan vendor:publish --force .","title":"publish the assets"},{"location":"upgrade_guides/seat1_to_2/#reconfigure-env-file","text":"With the new code ready to use, the next thing that is required is to reconnect the database. Remember that .env file you backed up earlier? Refer to it for the values needed in the newly installed env file that can be found at /var/www/seat/.env . Important keys to populate with the correct values are: DB_HOST= DB_PORT= DB_DATABASE= DB_USERNAME= DB_PASSWORD= SeAT 2.0 introduced new configuration items in the .env that you can review. There is also the option to configure Supervisor & SeAT integration, which can be done by following the admin guide titled SeAT & Supervisor Integration .","title":"reconfigure .env file"},{"location":"upgrade_guides/seat1_to_2/#run-migrations","text":"With the database reconnected, its time to run the migrations for SeAT 2.0. This is the part that may take some time, depending on how big your database is. To run the migrations, make sure you are still in your seat path ( /var/www/seat ) and run php artisan migrate : $ cd /var/www/seat $ php artisan migrate You will see a bunch of messages and eventually your shell prompt again, indicating that it has completed. If you receive errors here, double check that you have entered the correct database settings in the .env file previously mentioned.","title":"run migrations"},{"location":"upgrade_guides/seat1_to_2/#database-seeders","text":"With the database migration complete, its time to seed it with some of the static data SeAT needs. Do this with the following commands: php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder php artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder","title":"database seeders"},{"location":"upgrade_guides/seat1_to_2/#update-worker-jobs","text":"The Laravel 5.3 upgrade in SeAT changed the way worker jobs are started. You can edit the command used to start a worker in your seat.conf file in supervisor. Normally, this file will be somewhere like in /etc/supervisor/conf.d/ . The only line you really need to edit is the one that starts with command , replacing it with: command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 . A full block for SeAT 2.0 should therefore be: [program:seat] command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100 process_name = %(program_name)s-80%(process_num)02d stdout_logfile = /var/log/seat-80%(process_num)02d.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 numprocs=4 directory=/var/www/seat stopwaitsecs=600 user=www-data NOTE Keep in mind the user value and the path to artisan should be correct. Update them to the correct values of you made changes to the defaults. The user value differs many times based on Linux distribution too!","title":"update worker jobs"},{"location":"upgrade_guides/seat1_to_2/#finishing-off","text":"With all of that done, bring your application back up with php artisan up and start the supervisor workers again. Watch the logs for any errors in case things have not gone as expected. If you need any help, feel free to join the Slack channel details in the Contact page on the left.","title":"finishing off"}]}